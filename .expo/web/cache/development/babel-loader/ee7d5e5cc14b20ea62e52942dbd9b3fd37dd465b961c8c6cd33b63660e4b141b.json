{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"react-native-gesture-handler\");\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _native = require(\"@react-navigation/native\");\nvar _nativeStack = require(\"@react-navigation/native-stack\");\nvar _Opening = _interopRequireDefault(require(\"./SourceCode/Opening/Opening\"));\nvar _Login = _interopRequireDefault(require(\"./SourceCode/Login/Login\"));\nvar _index = _interopRequireDefault(require(\"./SourceCode/Createchildren/index.jsx\"));\nvar _DisplayStoreData = _interopRequireDefault(require(\"./SourceCode/DisplayStoreData\"));\nvar _GptTest = _interopRequireDefault(require(\"./SourceCode/Components/GptTest\"));\nvar _ImageGenerator = _interopRequireDefault(require(\"./SourceCode/Components/ImageGenerator\"));\nvar _LearningMode = _interopRequireDefault(require(\"./SourceCode/LearningMode/LearningMode\"));\nvar _EnvironmentChoose = _interopRequireDefault(require(\"./SourceCode/EnvironmentChoose\"));\nvar _GptLearning = _interopRequireDefault(require(\"./SourceCode/GptLearning\"));\nvar _store = _interopRequireDefault(require(\"./SourceCode/store/store\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _this = this,\n  _jsxFileName = \"/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/App.tsx\";\nvar Stack = (0, _nativeStack.createNativeStackNavigator)();\nvar App = function App() {\n  var _useStore = (0, _store.default)(),\n    user = _useStore.user;\n  return (0, _jsxRuntime.jsx)(_native.NavigationContainer, {\n    children: (0, _jsxRuntime.jsxs)(Stack.Navigator, {\n      initialRouteName: user != null && user.username ? \"Login\" : \"Opening\",\n      screenOptions: {\n        headerShown: false\n      },\n      children: [(0, _jsxRuntime.jsx)(Stack.Screen, {\n        name: \"Opening\",\n        component: _Opening.default\n      }), (0, _jsxRuntime.jsx)(Stack.Screen, {\n        name: \"Login\",\n        component: _Login.default\n      }), (0, _jsxRuntime.jsx)(Stack.Screen, {\n        name: \"CreateChildren\",\n        component: _index.default\n      }), (0, _jsxRuntime.jsx)(Stack.Screen, {\n        name: \"GptTest\",\n        component: _GptTest.default\n      }), (0, _jsxRuntime.jsx)(Stack.Screen, {\n        name: \"ImageGenerator\",\n        component: _ImageGenerator.default\n      }), (0, _jsxRuntime.jsx)(Stack.Screen, {\n        name: \"LearningMode\",\n        component: _LearningMode.default\n      }), (0, _jsxRuntime.jsx)(Stack.Screen, {\n        name: \"EnvironmentChoose\",\n        component: _EnvironmentChoose.default\n      }), (0, _jsxRuntime.jsx)(Stack.Screen, {\n        name: \"GptLearning\",\n        component: _GptLearning.default\n      }), (0, _jsxRuntime.jsx)(Stack.Screen, {\n        name: \"DisplayStoreData\",\n        component: _DisplayStoreData.default\n      })]\n    })\n  });\n};\nvar _default = exports.default = App;","map":{"version":3,"names":["require","_react","_interopRequireDefault","_native","_nativeStack","_Opening","_Login","_index","_DisplayStoreData","_GptTest","_ImageGenerator","_LearningMode","_EnvironmentChoose","_GptLearning","_store","_jsxRuntime","_this","_jsxFileName","Stack","createNativeStackNavigator","App","_useStore","useStore","user","jsx","NavigationContainer","children","jsxs","Navigator","initialRouteName","username","screenOptions","headerShown","Screen","name","component","Opening","Login","CreateChildren","GptTest","ImageGenerator","LearningMode","EnvironmentChoose","GptLearning","DisplayStoreData","_default","exports","default"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/App.tsx"],"sourcesContent":["import 'react-native-gesture-handler'; // 确保在其他任何导入之前导入这个\n\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { View, Text } from 'react-native';\nimport Opening from './SourceCode/Opening/Opening';\nimport Login from './SourceCode/Login/Login';\nimport CreateChildren from './SourceCode/Createchildren/index.jsx';  // 引入 CreateChildren 组件\nimport DisplayStoreData from \"./SourceCode/DisplayStoreData\";\nimport GptTest from \"./SourceCode/Components/GptTest\";\nimport ImageGenerator from \"./SourceCode/Components/ImageGenerator\"\nimport LearningMode from \"./SourceCode/LearningMode/LearningMode\";\nimport EnvironmentChoose from \"./SourceCode/EnvironmentChoose\";\nimport GptLearning from \"./SourceCode/GptLearning\";\nimport useStore from './SourceCode/store/store'; // 引入 zustand store\n\nconst Stack = createNativeStackNavigator();\n\nconst App = () => {\n    const { user } = useStore(); // 从zustand获取user状态\n\n    return (\n        <NavigationContainer>\n            <Stack.Navigator initialRouteName={user?.username ? \"Login\" : \"Opening\"} screenOptions={{ headerShown: false }}>\n                <Stack.Screen name=\"Opening\" component={Opening} />\n                <Stack.Screen name=\"Login\" component={Login} />\n                <Stack.Screen name=\"CreateChildren\" component={CreateChildren} />\n                <Stack.Screen name=\"GptTest\" component={GptTest}/>\n                <Stack.Screen name=\"ImageGenerator\" component={ImageGenerator}/>\n                <Stack.Screen name='LearningMode' component={LearningMode}/>\n                <Stack.Screen name='EnvironmentChoose' component={EnvironmentChoose}/>\n                <Stack.Screen name='GptLearning' component={GptLearning}/>\n                <Stack.Screen name='DisplayStoreData' component={DisplayStoreData}/>\n            </Stack.Navigator>\n        </NavigationContainer>\n    );\n};\n\nexport default App;\n"],"mappings":";;;;;AAAAA,OAAA;AAEA,IAAAC,MAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,OAAA,GAAAH,OAAA;AACA,IAAAI,YAAA,GAAAJ,OAAA;AAEA,IAAAK,QAAA,GAAAH,sBAAA,CAAAF,OAAA;AACA,IAAAM,MAAA,GAAAJ,sBAAA,CAAAF,OAAA;AACA,IAAAO,MAAA,GAAAL,sBAAA,CAAAF,OAAA;AACA,IAAAQ,iBAAA,GAAAN,sBAAA,CAAAF,OAAA;AACA,IAAAS,QAAA,GAAAP,sBAAA,CAAAF,OAAA;AACA,IAAAU,eAAA,GAAAR,sBAAA,CAAAF,OAAA;AACA,IAAAW,aAAA,GAAAT,sBAAA,CAAAF,OAAA;AACA,IAAAY,kBAAA,GAAAV,sBAAA,CAAAF,OAAA;AACA,IAAAa,YAAA,GAAAX,sBAAA,CAAAF,OAAA;AACA,IAAAc,MAAA,GAAAZ,sBAAA,CAAAF,OAAA;AAAgD,IAAAe,WAAA,GAAAf,OAAA;AAAA,IAAAgB,KAAA;EAAAC,YAAA;AAEhD,IAAMC,KAAK,GAAG,IAAAC,uCAA0B,EAAC,CAAC;AAE1C,IAAMC,GAAG,GAAG,SAANA,GAAGA,CAAA,EAAS;EACd,IAAAC,SAAA,GAAiB,IAAAC,cAAQ,EAAC,CAAC;IAAnBC,IAAI,GAAAF,SAAA,CAAJE,IAAI;EAEZ,OACI,IAAAR,WAAA,CAAAS,GAAA,EAACrB,OAAA,CAAAsB,mBAAmB;IAAAC,QAAA,EAChB,IAAAX,WAAA,CAAAY,IAAA,EAACT,KAAK,CAACU,SAAS;MAACC,gBAAgB,EAAEN,IAAI,YAAJA,IAAI,CAAEO,QAAQ,GAAG,OAAO,GAAG,SAAU;MAACC,aAAa,EAAE;QAAEC,WAAW,EAAE;MAAM,CAAE;MAAAN,QAAA,GAC3G,IAAAX,WAAA,CAAAS,GAAA,EAACN,KAAK,CAACe,MAAM;QAACC,IAAI,EAAC,SAAS;QAACC,SAAS,EAAEC;MAAQ,CAAE,CAAC,EACnD,IAAArB,WAAA,CAAAS,GAAA,EAACN,KAAK,CAACe,MAAM;QAACC,IAAI,EAAC,OAAO;QAACC,SAAS,EAAEE;MAAM,CAAE,CAAC,EAC/C,IAAAtB,WAAA,CAAAS,GAAA,EAACN,KAAK,CAACe,MAAM;QAACC,IAAI,EAAC,gBAAgB;QAACC,SAAS,EAAEG;MAAe,CAAE,CAAC,EACjE,IAAAvB,WAAA,CAAAS,GAAA,EAACN,KAAK,CAACe,MAAM;QAACC,IAAI,EAAC,SAAS;QAACC,SAAS,EAAEI;MAAQ,CAAC,CAAC,EAClD,IAAAxB,WAAA,CAAAS,GAAA,EAACN,KAAK,CAACe,MAAM;QAACC,IAAI,EAAC,gBAAgB;QAACC,SAAS,EAAEK;MAAe,CAAC,CAAC,EAChE,IAAAzB,WAAA,CAAAS,GAAA,EAACN,KAAK,CAACe,MAAM;QAACC,IAAI,EAAC,cAAc;QAACC,SAAS,EAAEM;MAAa,CAAC,CAAC,EAC5D,IAAA1B,WAAA,CAAAS,GAAA,EAACN,KAAK,CAACe,MAAM;QAACC,IAAI,EAAC,mBAAmB;QAACC,SAAS,EAAEO;MAAkB,CAAC,CAAC,EACtE,IAAA3B,WAAA,CAAAS,GAAA,EAACN,KAAK,CAACe,MAAM;QAACC,IAAI,EAAC,aAAa;QAACC,SAAS,EAAEQ;MAAY,CAAC,CAAC,EAC1D,IAAA5B,WAAA,CAAAS,GAAA,EAACN,KAAK,CAACe,MAAM;QAACC,IAAI,EAAC,kBAAkB;QAACC,SAAS,EAAES;MAAiB,CAAC,CAAC;IAAA,CACvD;EAAC,CACD,CAAC;AAE9B,CAAC;AAAC,IAAAC,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAEa3B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}