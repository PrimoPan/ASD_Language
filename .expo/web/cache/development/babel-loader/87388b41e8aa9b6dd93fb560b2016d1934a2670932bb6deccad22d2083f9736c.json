{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _native = require(\"@react-navigation/native\");\nvar _api = require(\"../utils/api\");\nvar _store = _interopRequireDefault(require(\"../store/store.jsx\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _this = this,\n  _jsxFileName = \"/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/SourceCode/GptLearning/index.jsx\";\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nvar GptLearning = function GptLearning() {\n  var navigation = (0, _native.useNavigation)();\n  var _useState = (0, _react.useState)([]),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    scenesData = _useState2[0],\n    setScenesData = _useState2[1];\n  var _useState3 = (0, _react.useState)(false),\n    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  var _useState5 = (0, _react.useState)([]),\n    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n    regenerateLoading = _useState6[0],\n    setRegenerateLoading = _useState6[1];\n  var _useState7 = (0, _react.useState)(null),\n    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),\n    selectedScene = _useState8[0],\n    setSelectedScene = _useState8[1];\n  var learningGoals = (0, _store.default)(function (state) {\n    return state.learningGoals;\n  });\n  var setLearningGoals = (0, _store.default)(function (state) {\n    return state.setLearningGoals;\n  });\n  (0, _react.useEffect)(function () {\n    var fetchLearningContent = function () {\n      var _ref = (0, _asyncToGenerator2.default)(function* () {\n        setLoading(true);\n        try {\n          var _JSON$parse;\n          var prompt = `基于以下环境要求生成三个场景：${(learningGoals == null ? void 0 : learningGoals.环境) || '默认环境'}`;\n          var gptResponse = yield (0, _api.gptQuery)(prompt);\n          var scenes = ((_JSON$parse = JSON.parse(gptResponse)) == null ? void 0 : _JSON$parse.response) || [];\n          console.log('GPT Scenes:', scenes);\n          var imagePromises = scenes.map(function (scene) {\n            return (0, _api.generateImage)(`绝对不允许出现文字。卡通风格。重要：场景尽量人物较少，不允许超过2个人，且全部为中国人，场景尽量较空，绝对不允许出现文字。以下是场景描述${scene.描述}`).then(function (url) {\n              return Object.assign({}, scene, {\n                imageUrl: url\n              });\n            });\n          });\n          var generatedScenes = yield Promise.all(imagePromises);\n          setScenesData(generatedScenes);\n          _reactNative.Alert.alert('学习成功', 'GPT 已学习内容并生成反馈。');\n        } catch (error) {\n          console.error('学习失败:', error);\n          _reactNative.Alert.alert('错误', error.message || '学习内容失败，请重试。');\n        } finally {\n          setLoading(false);\n        }\n      });\n      return function fetchLearningContent() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchLearningContent();\n  }, [learningGoals]);\n  var handleRegenerate = function () {\n    var _ref2 = (0, _asyncToGenerator2.default)(function* (index, description) {\n      setRegenerateLoading(function (prev) {\n        var newLoading = (0, _toConsumableArray2.default)(prev);\n        newLoading[index] = true;\n        return newLoading;\n      });\n      try {\n        var newImageUrl = yield (0, _api.generateImage)(`${description}，卡通风格`);\n        setScenesData(function (prev) {\n          return prev.map(function (scene, i) {\n            return i === index ? Object.assign({}, scene, {\n              imageUrl: newImageUrl\n            }) : scene;\n          });\n        });\n      } catch (error) {\n        console.error('重新生成失败:', error);\n        _reactNative.Alert.alert('错误', '无法重新生成图片，请重试。');\n      } finally {\n        setRegenerateLoading(function (prev) {\n          var newLoading = (0, _toConsumableArray2.default)(prev);\n          newLoading[index] = false;\n          return newLoading;\n        });\n      }\n    });\n    return function handleRegenerate(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleSubmit = function handleSubmit() {\n    if (!selectedScene) {\n      _reactNative.Alert.alert('错误', '请选择一个场景进行提交');\n      return;\n    }\n    var updatedGoals = Object.assign({}, learningGoals, {\n      选中场景: selectedScene\n    });\n    setLearningGoals(updatedGoals);\n    _reactNative.Alert.alert('提交成功', `选中的场景已更新到学习目标: ${JSON.stringify(updatedGoals, null, 2)}`);\n    navigation.navigate('DisplayStoreData');\n  };\n  return (0, _jsxRuntime.jsxs)(_reactNative.View, {\n    style: styles.container,\n    children: [(0, _jsxRuntime.jsx)(_reactNative.ScrollView, {\n      contentContainerStyle: styles.scrollContainer,\n      children: loading ? (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {\n        size: \"large\",\n        color: \"#007BFF\"\n      }) : scenesData.map(function (scene, index) {\n        return (0, _jsxRuntime.jsxs)(_reactNative.View, {\n          style: styles.card,\n          children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {\n            source: {\n              uri: scene.imageUrl\n            },\n            style: styles.image,\n            resizeMode: \"contain\"\n          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {\n            style: styles.sceneTitle,\n            children: scene.场景\n          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {\n            style: styles.sceneDescription,\n            children: scene.描述\n          }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {\n            style: [styles.regenerateButton, regenerateLoading[index] && styles.buttonDisabled],\n            onPress: function onPress() {\n              return handleRegenerate(index, scene.描述);\n            },\n            disabled: regenerateLoading[index],\n            children: regenerateLoading[index] ? (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {\n              size: \"small\",\n              color: \"#FFF\"\n            }) : (0, _jsxRuntime.jsx)(_reactNative.Text, {\n              style: styles.buttonText,\n              children: \"\\u91CD\\u65B0\\u751F\\u6210\\u56FE\\u7247\"\n            })\n          }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {\n            style: selectedScene === scene ? [styles.selectButton, styles.selected] : styles.selectButton,\n            onPress: function onPress() {\n              return setSelectedScene(scene);\n            },\n            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {\n              style: styles.buttonText,\n              children: selectedScene === scene ? '已选中' : '选择此场景'\n            })\n          })]\n        }, index);\n      })\n    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {\n      style: [styles.submitButton, !selectedScene && styles.submitButtonDisabled],\n      onPress: handleSubmit,\n      disabled: !selectedScene,\n      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {\n        style: styles.buttonText,\n        children: \"\\u63D0\\u4EA4\\u9009\\u4E2D\\u573A\\u666F\"\n      })\n    })]\n  });\n};\nvar _default = exports.default = GptLearning;\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: '#f5f5f5'\n  },\n  scrollContainer: {\n    alignItems: 'center',\n    paddingVertical: 16\n  },\n  card: {\n    marginBottom: 20,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: '#ccc',\n    borderRadius: 8,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    width: '90%'\n  },\n  image: {\n    width: '100%',\n    height: 200,\n    borderRadius: 8,\n    marginBottom: 12\n  },\n  sceneTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 8,\n    textAlign: 'center'\n  },\n  sceneDescription: {\n    fontSize: 14,\n    color: '#555',\n    textAlign: 'center',\n    marginBottom: 12\n  },\n  regenerateButton: {\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    backgroundColor: '#007BFF',\n    borderRadius: 6,\n    marginBottom: 8\n  },\n  buttonDisabled: {\n    backgroundColor: '#ccc'\n  },\n  selectButton: {\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    backgroundColor: '#28A745',\n    borderRadius: 6\n  },\n  selected: {\n    backgroundColor: '#FFC107'\n  },\n  submitButton: {\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    backgroundColor: '#DC3545',\n    borderRadius: 6,\n    alignItems: 'center',\n    marginVertical: 16\n  },\n  submitButtonDisabled: {\n    backgroundColor: '#ccc'\n  },\n  buttonText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: 'bold'\n  },\n  feedbackText: {\n    fontSize: 16,\n    color: '#666',\n    textAlign: 'center',\n    marginTop: 20\n  }\n});","map":{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_native","_api","_store","_interopRequireDefault","_jsxRuntime","_this","_jsxFileName","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","GptLearning","navigation","useNavigation","_useState","useState","_useState2","_slicedToArray2","scenesData","setScenesData","_useState3","_useState4","loading","setLoading","_useState5","_useState6","regenerateLoading","setRegenerateLoading","_useState7","_useState8","selectedScene","setSelectedScene","learningGoals","useStore","state","setLearningGoals","useEffect","fetchLearningContent","_ref","_asyncToGenerator2","_JSON$parse","prompt","环境","gptResponse","gptQuery","scenes","JSON","parse","response","console","log","imagePromises","map","scene","generateImage","描述","then","url","assign","imageUrl","generatedScenes","Promise","all","Alert","alert","error","message","apply","arguments","handleRegenerate","_ref2","index","description","prev","newLoading","_toConsumableArray2","newImageUrl","_x","_x2","handleSubmit","updatedGoals","选中场景","stringify","navigate","jsxs","View","style","styles","container","children","jsx","ScrollView","contentContainerStyle","scrollContainer","ActivityIndicator","size","color","card","Image","source","uri","image","resizeMode","Text","sceneTitle","场景","sceneDescription","TouchableOpacity","regenerateButton","buttonDisabled","onPress","disabled","buttonText","selectButton","selected","submitButton","submitButtonDisabled","_default","exports","StyleSheet","create","flex","padding","backgroundColor","alignItems","paddingVertical","marginBottom","borderWidth","borderColor","borderRadius","width","height","fontSize","fontWeight","textAlign","paddingHorizontal","marginVertical","feedbackText","marginTop"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/SourceCode/GptLearning/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n    View,\n    Text,\n    StyleSheet,\n    Alert,\n    ScrollView,\n    Image,\n    TouchableOpacity,\n    ActivityIndicator,\n} from 'react-native';\nimport { useNavigation } from '@react-navigation/native'; // 导入导航功能\nimport { gptQuery, generateImage } from '../utils/api'; // 导入 GPT 和图片生成 API\nimport useStore from '../store/store.jsx'; // 导入 zustand store\n\nconst GptLearning = () => {\n    const navigation = useNavigation(); // 获取导航对象\n    const [scenesData, setScenesData] = useState([]); // 场景和图片数据\n    const [loading, setLoading] = useState(false); // 加载状态\n    const [regenerateLoading, setRegenerateLoading] = useState([]); // 单独场景重新生成的加载状态\n    const [selectedScene, setSelectedScene] = useState(null); // 选中的场景\n    const learningGoals = useStore((state) => state.learningGoals); // 获取 store 中的 learningGoals\n    const setLearningGoals = useStore((state) => state.setLearningGoals); // 更新 store 中的 learningGoals\n\n    useEffect(() => {\n        const fetchLearningContent = async () => {\n            setLoading(true);\n            try {\n                const prompt = `基于以下环境要求生成三个场景：${learningGoals?.环境 || '默认环境'}`;\n                const gptResponse = await gptQuery(prompt); // 调用 GPT API\n                const scenes = JSON.parse(gptResponse)?.response || [];\n                console.log('GPT Scenes:', scenes);\n\n                // 为每个场景生成卡通风格图片\n                const imagePromises = scenes.map((scene) =>\n                    generateImage(`绝对不允许出现文字。卡通风格。重要：场景尽量人物较少，不允许超过2个人，且全部为中国人，场景尽量较空，绝对不允许出现文字。以下是场景描述${scene.描述}`).then((url) => ({ ...scene, imageUrl: url }))\n                );\n                const generatedScenes = await Promise.all(imagePromises);\n                setScenesData(generatedScenes);\n\n                Alert.alert('学习成功', 'GPT 已学习内容并生成反馈。');\n            } catch (error) {\n                console.error('学习失败:', error);\n                Alert.alert('错误', error.message || '学习内容失败，请重试。');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchLearningContent();\n    }, [learningGoals]); // 监听 learningGoals 的变化\n\n    const handleRegenerate = async (index, description) => {\n        setRegenerateLoading((prev) => {\n            const newLoading = [...prev];\n            newLoading[index] = true;\n            return newLoading;\n        });\n        try {\n            const newImageUrl = await generateImage(`${description}，卡通风格`);\n            setScenesData((prev) =>\n                prev.map((scene, i) => (i === index ? { ...scene, imageUrl: newImageUrl } : scene))\n            );\n        } catch (error) {\n            console.error('重新生成失败:', error);\n            Alert.alert('错误', '无法重新生成图片，请重试。');\n        } finally {\n            setRegenerateLoading((prev) => {\n                const newLoading = [...prev];\n                newLoading[index] = false;\n                return newLoading;\n            });\n        }\n    };\n\n    const handleSubmit = () => {\n        if (!selectedScene) {\n            Alert.alert('错误', '请选择一个场景进行提交');\n            return;\n        }\n        const updatedGoals = { ...learningGoals, 选中场景: selectedScene };\n        setLearningGoals(updatedGoals);\n        Alert.alert('提交成功', `选中的场景已更新到学习目标: ${JSON.stringify(updatedGoals, null, 2)}`);\n        navigation.navigate('DisplayStoreData'); // 跳转到 DisplayStoreData 页面\n    };\n\n    return (\n        <View style={styles.container}>\n            <ScrollView contentContainerStyle={styles.scrollContainer}>\n                {loading ? (\n                    <ActivityIndicator size=\"large\" color=\"#007BFF\" />\n                ) : (\n                    scenesData.map((scene, index) => (\n                        <View key={index} style={styles.card}>\n                            <Image source={{ uri: scene.imageUrl }} style={styles.image} resizeMode=\"contain\" />\n                            <Text style={styles.sceneTitle}>{scene.场景}</Text>\n                            <Text style={styles.sceneDescription}>{scene.描述}</Text>\n                            <TouchableOpacity\n                                style={[styles.regenerateButton, regenerateLoading[index] && styles.buttonDisabled]}\n                                onPress={() => handleRegenerate(index, scene.描述)}\n                                disabled={regenerateLoading[index]}\n                            >\n                                {regenerateLoading[index] ? (\n                                    <ActivityIndicator size=\"small\" color=\"#FFF\" />\n                                ) : (\n                                    <Text style={styles.buttonText}>重新生成图片</Text>\n                                )}\n                            </TouchableOpacity>\n                            <TouchableOpacity\n                                style={\n                                    selectedScene === scene\n                                        ? [styles.selectButton, styles.selected]\n                                        : styles.selectButton\n                                }\n                                onPress={() => setSelectedScene(scene)}\n                            >\n                                <Text style={styles.buttonText}>\n                                    {selectedScene === scene ? '已选中' : '选择此场景'}\n                                </Text>\n                            </TouchableOpacity>\n                        </View>\n                    ))\n                )}\n            </ScrollView>\n            <TouchableOpacity\n                style={[\n                    styles.submitButton,\n                    !selectedScene && styles.submitButtonDisabled,\n                ]}\n                onPress={handleSubmit}\n                disabled={!selectedScene}\n            >\n                <Text style={styles.buttonText}>提交选中场景</Text>\n            </TouchableOpacity>\n        </View>\n    );\n};\n\nexport default GptLearning;\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        padding: 16,\n        backgroundColor: '#f5f5f5',\n    },\n    scrollContainer: {\n        alignItems: 'center',\n        paddingVertical: 16,\n    },\n    card: {\n        marginBottom: 20,\n        padding: 16,\n        borderWidth: 1,\n        borderColor: '#ccc',\n        borderRadius: 8,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        width: '90%',\n    },\n    image: {\n        width: '100%',\n        height: 200,\n        borderRadius: 8,\n        marginBottom: 12,\n    },\n    sceneTitle: {\n        fontSize: 18,\n        fontWeight: 'bold',\n        marginBottom: 8,\n        textAlign: 'center',\n    },\n    sceneDescription: {\n        fontSize: 14,\n        color: '#555',\n        textAlign: 'center',\n        marginBottom: 12,\n    },\n    regenerateButton: {\n        paddingVertical: 10,\n        paddingHorizontal: 20,\n        backgroundColor: '#007BFF',\n        borderRadius: 6,\n        marginBottom: 8,\n    },\n    buttonDisabled: {\n        backgroundColor: '#ccc',\n    },\n    selectButton: {\n        paddingVertical: 10,\n        paddingHorizontal: 20,\n        backgroundColor: '#28A745',\n        borderRadius: 6,\n    },\n    selected: {\n        backgroundColor: '#FFC107',\n    },\n    submitButton: {\n        paddingVertical: 15,\n        paddingHorizontal: 20,\n        backgroundColor: '#DC3545',\n        borderRadius: 6,\n        alignItems: 'center',\n        marginVertical: 16,\n    },\n    submitButtonDisabled: {\n        backgroundColor: '#ccc',\n    },\n    buttonText: {\n        color: '#fff',\n        fontSize: 14,\n        fontWeight: 'bold',\n    },\n    feedbackText: {\n        fontSize: 16,\n        color: '#666',\n        textAlign: 'center',\n        marginTop: 20,\n    },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}