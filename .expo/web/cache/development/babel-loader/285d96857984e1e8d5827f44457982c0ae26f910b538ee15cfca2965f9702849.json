{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updatePropsJestWrapper = exports.default = void 0;\nvar _Colors = require(\"./Colors.js\");\nvar _index = require(\"./js-reanimated/index.js\");\nvar _PlatformChecker = require(\"./PlatformChecker.js\");\nvar _threads = require(\"./threads.js\");\nvar _errors = require(\"./errors.js\");\nvar updateProps;\nif ((0, _PlatformChecker.shouldBeUseWeb)()) {\n  updateProps = function updateProps(viewDescriptors, updates, isAnimatedProps) {\n    'worklet';\n\n    var _viewDescriptors$valu;\n    (_viewDescriptors$valu = viewDescriptors.value) == null || _viewDescriptors$valu.forEach(function (viewDescriptor) {\n      var component = viewDescriptor.tag;\n      (0, _index._updatePropsJS)(updates, component, isAnimatedProps);\n    });\n  };\n} else {\n  updateProps = function updateProps(viewDescriptors, updates) {\n    'worklet';\n\n    (0, _Colors.processColorsInProps)(updates);\n    global.UpdatePropsManager.update(viewDescriptors, updates);\n  };\n}\nvar updatePropsJestWrapper = exports.updatePropsJestWrapper = function updatePropsJestWrapper(viewDescriptors, updates, animatedStyle, adapters) {\n  adapters.forEach(function (adapter) {\n    adapter(updates);\n  });\n  animatedStyle.current.value = Object.assign({}, animatedStyle.current.value, updates);\n  updateProps(viewDescriptors, updates);\n};\nvar _default = exports.default = updateProps;\nvar createUpdatePropsManager = (0, _PlatformChecker.isFabric)() ? function () {\n  'worklet';\n  var operations = [];\n  return {\n    update: function update(viewDescriptors, updates) {\n      var _this = this;\n      viewDescriptors.value.forEach(function (viewDescriptor) {\n        operations.push({\n          shadowNodeWrapper: viewDescriptor.shadowNodeWrapper,\n          updates: updates\n        });\n        if (operations.length === 1) {\n          queueMicrotask(_this.flush);\n        }\n      });\n    },\n    flush: function flush() {\n      global._updatePropsFabric(operations);\n      operations.length = 0;\n    }\n  };\n} : function () {\n  'worklet';\n  var operations = [];\n  return {\n    update: function update(viewDescriptors, updates) {\n      var _this2 = this;\n      viewDescriptors.value.forEach(function (viewDescriptor) {\n        operations.push({\n          tag: viewDescriptor.tag,\n          name: viewDescriptor.name || 'RCTView',\n          updates: updates\n        });\n        if (operations.length === 1) {\n          queueMicrotask(_this2.flush);\n        }\n      });\n    },\n    flush: function flush() {\n      global._updatePropsPaper(operations);\n      operations.length = 0;\n    }\n  };\n};\nif ((0, _PlatformChecker.shouldBeUseWeb)()) {\n  var maybeThrowError = function maybeThrowError() {\n    if (!(0, _PlatformChecker.isJest)()) {\n      throw new _errors.ReanimatedError('`UpdatePropsManager` is not available on non-native platform.');\n    }\n  };\n  global.UpdatePropsManager = new Proxy({}, {\n    get: maybeThrowError,\n    set: function set() {\n      maybeThrowError();\n      return false;\n    }\n  });\n} else {\n  (0, _threads.runOnUIImmediately)(function () {\n    'worklet';\n\n    global.UpdatePropsManager = createUpdatePropsManager();\n  })();\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","updatePropsJestWrapper","default","_Colors","require","_index","_PlatformChecker","_threads","_errors","updateProps","shouldBeUseWeb","viewDescriptors","updates","isAnimatedProps","_viewDescriptors$valu","forEach","viewDescriptor","component","tag","_updatePropsJS","processColorsInProps","global","UpdatePropsManager","update","animatedStyle","adapters","adapter","current","assign","_default","createUpdatePropsManager","isFabric","operations","_this","push","shadowNodeWrapper","length","queueMicrotask","flush","_updatePropsFabric","_this2","name","_updatePropsPaper","maybeThrowError","isJest","ReanimatedError","Proxy","get","set","runOnUIImmediately"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-reanimated/src/UpdateProps.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-redundant-type-constituents */\n'use strict';\nimport type { MutableRefObject } from 'react';\nimport { processColorsInProps } from './Colors';\nimport type {\n  ShadowNodeWrapper,\n  StyleProps,\n  AnimatedStyle,\n} from './commonTypes';\nimport type { Descriptor } from './hook/commonTypes';\nimport type { ReanimatedHTMLElement } from './js-reanimated';\nimport { _updatePropsJS } from './js-reanimated';\nimport { isFabric, isJest, shouldBeUseWeb } from './PlatformChecker';\nimport { runOnUIImmediately } from './threads';\nimport { ReanimatedError } from './errors';\n\nlet updateProps: (\n  viewDescriptors: ViewDescriptorsWrapper,\n  updates: StyleProps | AnimatedStyle<any>,\n  isAnimatedProps?: boolean\n) => void;\n\nif (shouldBeUseWeb()) {\n  updateProps = (viewDescriptors, updates, isAnimatedProps) => {\n    'worklet';\n    viewDescriptors.value?.forEach((viewDescriptor) => {\n      const component = viewDescriptor.tag as ReanimatedHTMLElement;\n      _updatePropsJS(updates, component, isAnimatedProps);\n    });\n  };\n} else {\n  updateProps = (viewDescriptors, updates) => {\n    'worklet';\n    processColorsInProps(updates);\n    global.UpdatePropsManager.update(viewDescriptors, updates);\n  };\n}\n\nexport const updatePropsJestWrapper = (\n  viewDescriptors: ViewDescriptorsWrapper,\n  updates: AnimatedStyle<any>,\n  animatedStyle: MutableRefObject<AnimatedStyle<any>>,\n  adapters: ((updates: AnimatedStyle<any>) => void)[]\n): void => {\n  adapters.forEach((adapter) => {\n    adapter(updates);\n  });\n  animatedStyle.current.value = {\n    ...animatedStyle.current.value,\n    ...updates,\n  };\n\n  updateProps(viewDescriptors, updates);\n};\n\nexport default updateProps;\n\nconst createUpdatePropsManager = isFabric()\n  ? () => {\n      'worklet';\n      // Fabric\n      const operations: {\n        shadowNodeWrapper: ShadowNodeWrapper;\n        updates: StyleProps | AnimatedStyle<any>;\n      }[] = [];\n      return {\n        update(\n          viewDescriptors: ViewDescriptorsWrapper,\n          updates: StyleProps | AnimatedStyle<any>\n        ) {\n          viewDescriptors.value.forEach((viewDescriptor) => {\n            operations.push({\n              shadowNodeWrapper: viewDescriptor.shadowNodeWrapper,\n              updates,\n            });\n            if (operations.length === 1) {\n              queueMicrotask(this.flush);\n            }\n          });\n        },\n        flush(this: void) {\n          global._updatePropsFabric!(operations);\n          operations.length = 0;\n        },\n      };\n    }\n  : () => {\n      'worklet';\n      // Paper\n      const operations: {\n        tag: number;\n        name: string;\n        updates: StyleProps | AnimatedStyle<any>;\n      }[] = [];\n      return {\n        update(\n          viewDescriptors: ViewDescriptorsWrapper,\n          updates: StyleProps | AnimatedStyle<any>\n        ) {\n          viewDescriptors.value.forEach((viewDescriptor) => {\n            operations.push({\n              tag: viewDescriptor.tag as number,\n              name: viewDescriptor.name || 'RCTView',\n              updates,\n            });\n            if (operations.length === 1) {\n              queueMicrotask(this.flush);\n            }\n          });\n        },\n        flush(this: void) {\n          global._updatePropsPaper!(operations);\n          operations.length = 0;\n        },\n      };\n    };\n\nif (shouldBeUseWeb()) {\n  const maybeThrowError = () => {\n    // Jest attempts to access a property of this object to check if it is a Jest mock\n    // so we can't throw an error in the getter.\n    if (!isJest()) {\n      throw new ReanimatedError(\n        '`UpdatePropsManager` is not available on non-native platform.'\n      );\n    }\n  };\n  global.UpdatePropsManager = new Proxy({} as UpdatePropsManager, {\n    get: maybeThrowError,\n    set: () => {\n      maybeThrowError();\n      return false;\n    },\n  });\n} else {\n  runOnUIImmediately(() => {\n    'worklet';\n    global.UpdatePropsManager = createUpdatePropsManager();\n  })();\n}\n\nexport interface UpdatePropsManager {\n  update(\n    viewDescriptors: ViewDescriptorsWrapper,\n    updates: StyleProps | AnimatedStyle<any>\n  ): void;\n  flush(): void;\n}\n\n/**\n * This used to be `SharedValue<Descriptors[]>` but objects holding just a\n * single `value` prop are fine too.\n */\ninterface ViewDescriptorsWrapper {\n  value: Readonly<Descriptor[]>;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}