{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.attachHandlers = attachHandlers;\nvar _handlersRegistry = require(\"../../handlersRegistry\");\nvar _RNGestureHandlerModule = _interopRequireDefault(require(\"../../../RNGestureHandlerModule\"));\nvar _utils = require(\"../../utils\");\nvar _ActionType = require(\"../../../ActionType\");\nvar _reactNative = require(\"react-native\");\nvar _ghQueueMicrotask = require(\"../../../ghQueueMicrotask\");\nvar _utils2 = require(\"./utils\");\nfunction attachHandlers(_ref) {\n  var preparedGesture = _ref.preparedGesture,\n    gestureConfig = _ref.gestureConfig,\n    gesturesToAttach = _ref.gesturesToAttach,\n    viewTag = _ref.viewTag,\n    webEventHandlersRef = _ref.webEventHandlersRef;\n  gestureConfig.initialize();\n  (0, _ghQueueMicrotask.ghQueueMicrotask)(function () {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    gestureConfig.prepare();\n  });\n  for (var handler of gesturesToAttach) {\n    (0, _utils2.checkGestureCallbacksForWorklets)(handler);\n    _RNGestureHandlerModule.default.createGestureHandler(handler.handlerName, handler.handlerTag, (0, _utils.filterConfig)(handler.config, _utils2.ALLOWED_PROPS));\n    (0, _handlersRegistry.registerHandler)(handler.handlerTag, handler, handler.config.testId);\n  }\n  (0, _ghQueueMicrotask.ghQueueMicrotask)(function () {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    for (var _handler of gesturesToAttach) {\n      _RNGestureHandlerModule.default.updateGestureHandler(_handler.handlerTag, (0, _utils.filterConfig)(_handler.config, _utils2.ALLOWED_PROPS, (0, _utils2.extractGestureRelations)(_handler)));\n    }\n    (0, _utils.scheduleFlushOperations)();\n  });\n  for (var gesture of gesturesToAttach) {\n    var actionType = gesture.shouldUseReanimated ? _ActionType.ActionType.REANIMATED_WORKLET : _ActionType.ActionType.JS_FUNCTION_NEW_API;\n    if (_reactNative.Platform.OS === 'web') {\n      _RNGestureHandlerModule.default.attachGestureHandler(gesture.handlerTag, viewTag, _ActionType.ActionType.JS_FUNCTION_OLD_API, webEventHandlersRef);\n    } else {\n      _RNGestureHandlerModule.default.attachGestureHandler(gesture.handlerTag, viewTag, actionType);\n    }\n  }\n  preparedGesture.attachedGestures = gesturesToAttach;\n  if (preparedGesture.animatedHandlers) {\n    var isAnimatedGesture = function isAnimatedGesture(g) {\n      return g.shouldUseReanimated;\n    };\n    preparedGesture.animatedHandlers.value = gesturesToAttach.filter(isAnimatedGesture).map(function (g) {\n      return g.handlers;\n    });\n  }\n}","map":{"version":3,"names":["_handlersRegistry","require","_RNGestureHandlerModule","_interopRequireDefault","_utils","_ActionType","_reactNative","_ghQueueMicrotask","_utils2","attachHandlers","_ref","preparedGesture","gestureConfig","gesturesToAttach","viewTag","webEventHandlersRef","initialize","ghQueueMicrotask","isMounted","prepare","handler","checkGestureCallbacksForWorklets","RNGestureHandlerModule","createGestureHandler","handlerName","handlerTag","filterConfig","config","ALLOWED_PROPS","registerHandler","testId","updateGestureHandler","extractGestureRelations","scheduleFlushOperations","gesture","actionType","shouldUseReanimated","ActionType","REANIMATED_WORKLET","JS_FUNCTION_NEW_API","Platform","OS","attachGestureHandler","JS_FUNCTION_OLD_API","attachedGestures","animatedHandlers","isAnimatedGesture","g","value","filter","map","handlers"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/GestureDetector/attachHandlers.ts"],"sourcesContent":["import React from 'react';\nimport { GestureType, HandlerCallbacks } from '../gesture';\nimport { registerHandler } from '../../handlersRegistry';\nimport RNGestureHandlerModule from '../../../RNGestureHandlerModule';\nimport { filterConfig, scheduleFlushOperations } from '../../utils';\nimport { ComposedGesture } from '../gestureComposition';\nimport { ActionType } from '../../../ActionType';\nimport { Platform } from 'react-native';\nimport type RNGestureHandlerModuleWeb from '../../../RNGestureHandlerModule.web';\nimport { ghQueueMicrotask } from '../../../ghQueueMicrotask';\nimport { AttachedGestureState, WebEventHandler } from './types';\nimport {\n  extractGestureRelations,\n  checkGestureCallbacksForWorklets,\n  ALLOWED_PROPS,\n} from './utils';\n\ninterface AttachHandlersConfig {\n  preparedGesture: AttachedGestureState;\n  gestureConfig: ComposedGesture | GestureType;\n  gesturesToAttach: GestureType[];\n  viewTag: number;\n  webEventHandlersRef: React.RefObject<WebEventHandler>;\n}\n\nexport function attachHandlers({\n  preparedGesture,\n  gestureConfig,\n  gesturesToAttach,\n  viewTag,\n  webEventHandlersRef,\n}: AttachHandlersConfig) {\n  gestureConfig.initialize();\n\n  // Use queueMicrotask to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  ghQueueMicrotask(() => {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    gestureConfig.prepare();\n  });\n\n  for (const handler of gesturesToAttach) {\n    checkGestureCallbacksForWorklets(handler);\n    RNGestureHandlerModule.createGestureHandler(\n      handler.handlerName,\n      handler.handlerTag,\n      filterConfig(handler.config, ALLOWED_PROPS)\n    );\n\n    registerHandler(handler.handlerTag, handler, handler.config.testId);\n  }\n\n  // Use queueMicrotask to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  ghQueueMicrotask(() => {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    for (const handler of gesturesToAttach) {\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(\n          handler.config,\n          ALLOWED_PROPS,\n          extractGestureRelations(handler)\n        )\n      );\n    }\n\n    scheduleFlushOperations();\n  });\n\n  for (const gesture of gesturesToAttach) {\n    const actionType = gesture.shouldUseReanimated\n      ? ActionType.REANIMATED_WORKLET\n      : ActionType.JS_FUNCTION_NEW_API;\n\n    if (Platform.OS === 'web') {\n      (\n        RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler\n      )(\n        gesture.handlerTag,\n        viewTag,\n        ActionType.JS_FUNCTION_OLD_API, // Ignored on web\n        webEventHandlersRef\n      );\n    } else {\n      RNGestureHandlerModule.attachGestureHandler(\n        gesture.handlerTag,\n        viewTag,\n        actionType\n      );\n    }\n  }\n\n  preparedGesture.attachedGestures = gesturesToAttach;\n\n  if (preparedGesture.animatedHandlers) {\n    const isAnimatedGesture = (g: GestureType) => g.shouldUseReanimated;\n\n    preparedGesture.animatedHandlers.value = gesturesToAttach\n      .filter(isAnimatedGesture)\n      .map((g) => g.handlers) as unknown as HandlerCallbacks<\n      Record<string, unknown>\n    >[];\n  }\n}\n"],"mappings":";;;;;AAEA,IAAAA,iBAAA,GAAAC,OAAA;AACA,IAAAC,uBAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,MAAA,GAAAH,OAAA;AAEA,IAAAI,WAAA,GAAAJ,OAAA;AACA,IAAAK,YAAA,GAAAL,OAAA;AAEA,IAAAM,iBAAA,GAAAN,OAAA;AAEA,IAAAO,OAAA,GAAAP,OAAA;AAcO,SAASQ,cAATA,CAAAC,IAAA,EAMkB;EAAA,IALvBC,eAD6B,GAAAD,IAAA,CAC7BC,eAD6B;IAE7BC,aAF6B,GAAAF,IAAA,CAE7BE,aAF6B;IAG7BC,gBAH6B,GAAAH,IAAA,CAG7BG,gBAH6B;IAI7BC,OAJ6B,GAAAJ,IAAA,CAI7BI,OAJ6B;IAK7BC,mBAAA,GAAAL,IAAA,CAAAK,mBAAA;EAEAH,aAAa,CAACI,UAAd;EAIA,IAAAC,kCAAgB,EAAC,YAAM;IACrB,IAAI,CAACN,eAAe,CAACO,SAArB,EAAgC;MAC9B;IACD;IACDN,aAAa,CAACO,OAAd;EACD,CALe,CAAhB;EAOA,KAAK,IAAMC,OAAX,IAAsBP,gBAAtB,EAAwC;IACtC,IAAAQ,wCAAgC,EAACD,OAAD,CAAhC;IACAE,+BAAsB,CAACC,oBAAvB,CACEH,OAAO,CAACI,WADV,EAEEJ,OAAO,CAACK,UAFV,EAGE,IAAAC,mBAAY,EAACN,OAAO,CAACO,MAAT,EAAiBC,qBAAjB,CAHd;IAMA,IAAAC,iCAAe,EAACT,OAAO,CAACK,UAAT,EAAqBL,OAArB,EAA8BA,OAAO,CAACO,MAAR,CAAeG,MAA7C,CAAf;EACD;EAID,IAAAb,kCAAgB,EAAC,YAAM;IACrB,IAAI,CAACN,eAAe,CAACO,SAArB,EAAgC;MAC9B;IACD;IACD,KAAK,IAAME,QAAX,IAAsBP,gBAAtB,EAAwC;MACtCS,+BAAsB,CAACS,oBAAvB,CACEX,QAAO,CAACK,UADV,EAEE,IAAAC,mBAAY,EACVN,QAAO,CAACO,MADE,EAEVC,qBAFU,EAGV,IAAAI,+BAAuB,EAACZ,QAAD,CAHb,CAFd;IAQD;IAED,IAAAa,8BAAuB;EACxB,CAhBe,CAAhB;EAkBA,KAAK,IAAMC,OAAX,IAAsBrB,gBAAtB,EAAwC;IACtC,IAAMsB,UAAU,GAAGD,OAAO,CAACE,mBAAR,GACfC,sBAAU,CAACC,kBADI,GAEfD,sBAAU,CAACE,mBAFf;IAIA,IAAIC,qBAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;MAEvBnB,+BAAsB,CAACoB,oBADzB,CAGER,OAAO,CAACT,UAHV,EAIEX,OAJF,EAKEuB,sBAAU,CAACM,mBALb,EAME5B,mBANF;IAQD,CATD,MASO;MACLO,+BAAsB,CAACoB,oBAAvB,CACER,OAAO,CAACT,UADV,EAEEX,OAFF,EAGEqB,UAHF;IAKD;EACF;EAEDxB,eAAe,CAACiC,gBAAhB,GAAmC/B,gBAAnC;EAEA,IAAIF,eAAe,CAACkC,gBAApB,EAAsC;IACpC,IAAMC,iBAAiB,GAAI,SAArBA,iBAAiBA,CAAIC,CAAD;MAAA,OAAoBA,CAAC,CAACX,mBAAhD;IAAA;IAEAzB,eAAe,CAACkC,gBAAhB,CAAiCG,KAAjC,GAAyCnC,gBAAgB,CACtDoC,MADsC,CAC/BH,iBAD+B,EAEtCI,GAFsC,CAEjC,UAAAH,CAAD;MAAA,OAAOA,CAAC,CAACI,QAFyB;IAAA,EAAzC;EAKD;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}