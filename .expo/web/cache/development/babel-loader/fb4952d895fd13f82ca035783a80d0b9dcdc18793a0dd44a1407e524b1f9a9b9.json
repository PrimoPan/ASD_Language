{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkDuplicateRouteNames = checkDuplicateRouteNames;\nfunction checkDuplicateRouteNames(state) {\n  var duplicates = [];\n  var _getRouteNames = function getRouteNames(location, state) {\n    state.routes.forEach(function (route) {\n      var _route$state;\n      var currentLocation = location ? `${location} > ${route.name}` : route.name;\n      (_route$state = route.state) == null || (_route$state = _route$state.routeNames) == null || _route$state.forEach(function (routeName) {\n        if (routeName === route.name) {\n          duplicates.push([currentLocation, `${currentLocation} > ${route.name}`]);\n        }\n      });\n      if (route.state) {\n        _getRouteNames(currentLocation, route.state);\n      }\n    });\n  };\n  _getRouteNames('', state);\n  return duplicates;\n}","map":{"version":3,"names":["checkDuplicateRouteNames","state","duplicates","getRouteNames","location","routes","forEach","route","_route$state","currentLocation","name","routeNames","routeName","push"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/@react-navigation/core/src/checkDuplicateRouteNames.tsx"],"sourcesContent":["import type { NavigationState, PartialState } from '@react-navigation/routers';\n\nexport function checkDuplicateRouteNames(state: NavigationState) {\n  const duplicates: string[][] = [];\n\n  const getRouteNames = (\n    location: string,\n    state: NavigationState | PartialState<NavigationState>\n  ) => {\n    state.routes.forEach((route: (typeof state.routes)[0]) => {\n      const currentLocation = location\n        ? `${location} > ${route.name}`\n        : route.name;\n\n      route.state?.routeNames?.forEach((routeName) => {\n        if (routeName === route.name) {\n          duplicates.push([\n            currentLocation,\n            `${currentLocation} > ${route.name}`,\n          ]);\n        }\n      });\n\n      if (route.state) {\n        getRouteNames(currentLocation, route.state);\n      }\n    });\n  };\n\n  getRouteNames('', state);\n\n  return duplicates;\n}\n"],"mappings":";;;;;;AAEO,SAASA,wBAAwBA,CAACC,KAAsB,EAAE;EAC/D,IAAMC,UAAsB,GAAG,EAAE;EAEjC,IAAMC,cAAa,GAAG,SAAhBA,aAAaA,CACjBC,QAAgB,EAChBH,KAAsD,EACnD;IACHA,KAAK,CAACI,MAAM,CAACC,OAAO,CAAE,UAAAC,KAA+B,EAAK;MAAA,IAAAC,YAAA;MACxD,IAAMC,eAAe,GAAGL,QAAQ,GAC5B,GAAGA,QAAQ,MAAMG,KAAK,CAACG,IAAI,EAAE,GAC7BH,KAAK,CAACG,IAAI;MAEd,CAAAF,YAAA,GAAAD,KAAK,CAACN,KAAK,cAAAO,YAAA,GAAXA,YAAA,CAAaG,UAAU,aAAvBH,YAAA,CAAyBF,OAAO,CAAE,UAAAM,SAAS,EAAK;QAC9C,IAAIA,SAAS,KAAKL,KAAK,CAACG,IAAI,EAAE;UAC5BR,UAAU,CAACW,IAAI,CAAC,CACdJ,eAAe,EACf,GAAGA,eAAe,MAAMF,KAAK,CAACG,IAAI,EAAE,CACrC,CAAC;QACJ;MACF,CAAC,CAAC;MAEF,IAAIH,KAAK,CAACN,KAAK,EAAE;QACfE,cAAa,CAACM,eAAe,EAAEF,KAAK,CAACN,KAAK,CAAC;MAC7C;IACF,CAAC,CAAC;EACJ,CAAC;EAEDE,cAAa,CAAC,EAAE,EAAEF,KAAK,CAAC;EAExB,OAAOC,UAAU;AACnB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}