{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LogLevel = exports.DEFAULT_LOGGER_CONFIG = void 0;\nexports.logToLogBoxAndConsole = logToLogBoxAndConsole;\nexports.logger = void 0;\nexports.registerLoggerConfig = registerLoggerConfig;\nexports.replaceLoggerImplementation = replaceLoggerImplementation;\nexports.updateLoggerConfig = updateLoggerConfig;\nvar _LogBox = require(\"./LogBox.js\");\nvar DOCS_URL = 'https://docs.swmansion.com/react-native-reanimated/docs/debugging/logger-configuration';\nvar DOCS_REFERENCE = `If you don't want to see this message, you can disable the \\`strict\\` mode. Refer to:\\n${DOCS_URL} for more details.`;\nvar LogLevel = exports.LogLevel = function (LogLevel) {\n  LogLevel[LogLevel[\"warn\"] = 1] = \"warn\";\n  LogLevel[LogLevel[\"error\"] = 2] = \"error\";\n  return LogLevel;\n}({});\nfunction logToConsole(data) {\n  'worklet';\n\n  switch (data.level) {\n    case 'warn':\n      console.warn(data.message.content);\n      break;\n    case 'error':\n    case 'fatal':\n    case 'syntax':\n      console.error(data.message.content);\n      break;\n  }\n}\nvar DEFAULT_LOGGER_CONFIG = exports.DEFAULT_LOGGER_CONFIG = {\n  logFunction: logToConsole,\n  level: LogLevel.warn,\n  strict: true\n};\nfunction formatMessage(message) {\n  'worklet';\n\n  return `[Reanimated] ${message}`;\n}\nfunction createLog(level, message) {\n  'worklet';\n\n  var formattedMessage = formatMessage(message);\n  return {\n    level: level,\n    message: {\n      content: formattedMessage,\n      substitutions: []\n    },\n    category: formattedMessage,\n    componentStack: [],\n    componentStackType: null,\n    stack: new Error().stack\n  };\n}\nfunction logToLogBoxAndConsole(data) {\n  (0, _LogBox.addLogBoxLog)(data);\n  logToConsole(data);\n}\nfunction registerLoggerConfig(config) {\n  'worklet';\n\n  global.__reanimatedLoggerConfig = config;\n}\nfunction replaceLoggerImplementation(logFunction) {\n  'worklet';\n\n  registerLoggerConfig(Object.assign({}, __reanimatedLoggerConfig, {\n    logFunction: logFunction\n  }));\n}\nfunction updateLoggerConfig(options) {\n  'worklet';\n\n  var _options$level, _options$strict;\n  registerLoggerConfig(Object.assign({}, __reanimatedLoggerConfig, {\n    level: (_options$level = options == null ? void 0 : options.level) != null ? _options$level : DEFAULT_LOGGER_CONFIG.level,\n    strict: (_options$strict = options == null ? void 0 : options.strict) != null ? _options$strict : DEFAULT_LOGGER_CONFIG.strict\n  }));\n}\nfunction handleLog(level, message, options) {\n  'worklet';\n\n  var config = __reanimatedLoggerConfig;\n  if (options.strict && !config.strict || LogLevel[level] < config.level) {\n    return;\n  }\n  if (options.strict) {\n    message += `\\n\\n${DOCS_REFERENCE}`;\n  }\n  config.logFunction(createLog(level, message));\n}\nvar logger = exports.logger = {\n  warn: function warn(message) {\n    'worklet';\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    handleLog('warn', message, options);\n  },\n  error: function error(message) {\n    'worklet';\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    handleLog('error', message, options);\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","LogLevel","DEFAULT_LOGGER_CONFIG","logToLogBoxAndConsole","logger","registerLoggerConfig","replaceLoggerImplementation","updateLoggerConfig","_LogBox","require","DOCS_URL","DOCS_REFERENCE","logToConsole","data","level","console","warn","message","content","error","logFunction","strict","formatMessage","createLog","formattedMessage","substitutions","category","componentStack","componentStackType","stack","Error","addLogBoxLog","config","global","__reanimatedLoggerConfig","assign","options","_options$level","_options$strict","handleLog","arguments","length","undefined"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-reanimated/src/logger/logger.ts"],"sourcesContent":["'use strict';\nimport { addLogBoxLog } from './LogBox';\nimport type { LogData, LogBoxLogLevel } from './LogBox';\n\nconst DOCS_URL =\n  'https://docs.swmansion.com/react-native-reanimated/docs/debugging/logger-configuration';\nconst DOCS_REFERENCE = `If you don't want to see this message, you can disable the \\`strict\\` mode. Refer to:\\n${DOCS_URL} for more details.`;\n\ntype LogFunction = (data: LogData) => void;\n\nexport enum LogLevel {\n  warn = 1,\n  error = 2,\n}\n\nexport type LoggerConfig = {\n  level?: LogLevel;\n  strict?: boolean;\n};\n\nexport type LoggerConfigInternal = {\n  logFunction: LogFunction;\n} & Required<LoggerConfig>;\n\nfunction logToConsole(data: LogData) {\n  'worklet';\n  switch (data.level) {\n    case 'warn':\n      console.warn(data.message.content);\n      break;\n    case 'error':\n    case 'fatal':\n    case 'syntax':\n      console.error(data.message.content);\n      break;\n  }\n}\n\nexport const DEFAULT_LOGGER_CONFIG: LoggerConfigInternal = {\n  logFunction: logToConsole,\n  level: LogLevel.warn,\n  strict: true,\n};\n\nfunction formatMessage(message: string) {\n  'worklet';\n  return `[Reanimated] ${message}`;\n}\n\nfunction createLog(level: LogBoxLogLevel, message: string): LogData {\n  'worklet';\n  const formattedMessage = formatMessage(message);\n\n  return {\n    level,\n    message: {\n      content: formattedMessage,\n      substitutions: [],\n    },\n    category: formattedMessage,\n    componentStack: [],\n    componentStackType: null,\n    // eslint-disable-next-line reanimated/use-reanimated-error\n    stack: new Error().stack,\n  };\n}\n\n/**\n * Function that logs to LogBox and console. Used to replace the default console\n * logging with logging to LogBox on the UI thread when runOnJS is available.\n *\n * @param data - The details of the log.\n */\nexport function logToLogBoxAndConsole(data: LogData) {\n  addLogBoxLog(data);\n  logToConsole(data);\n}\n\n/**\n * Registers the logger configuration. use it only for Worklet runtimes.\n *\n * @param config - The config to register.\n */\nexport function registerLoggerConfig(config: LoggerConfigInternal) {\n  'worklet';\n  global.__reanimatedLoggerConfig = config;\n}\n\n/**\n * Replaces the default log function with a custom implementation.\n *\n * @param logFunction - The custom log function.\n */\nexport function replaceLoggerImplementation(logFunction: LogFunction) {\n  'worklet';\n  registerLoggerConfig({ ...__reanimatedLoggerConfig, logFunction });\n}\n\n/**\n * Updates logger configuration.\n *\n * @param options - The new logger configuration to apply.\n *\n *   - Level: The minimum log level to display.\n *   - Strict: Whether to log warnings and errors that are not strict. Defaults to\n *       false.\n */\nexport function updateLoggerConfig(options?: Partial<LoggerConfig>) {\n  'worklet';\n  registerLoggerConfig({\n    ...__reanimatedLoggerConfig,\n    // Don't reuse previous level and strict values from the global config\n    level: options?.level ?? DEFAULT_LOGGER_CONFIG.level,\n    strict: options?.strict ?? DEFAULT_LOGGER_CONFIG.strict,\n  });\n}\n\ntype LogOptions = {\n  strict?: boolean;\n};\n\nfunction handleLog(\n  level: Exclude<LogBoxLogLevel, 'syntax' | 'fatal'>,\n  message: string,\n  options: LogOptions\n) {\n  'worklet';\n  const config = __reanimatedLoggerConfig;\n  if (\n    // Don't log if the log is marked as strict-only and the config doesn't\n    // enable strict logging\n    (options.strict && !config.strict) ||\n    // Don't log if the log level is below the minimum configured level\n    LogLevel[level] < config.level\n  ) {\n    return;\n  }\n\n  if (options.strict) {\n    message += `\\n\\n${DOCS_REFERENCE}`;\n  }\n\n  config.logFunction(createLog(level, message));\n}\n\nexport const logger = {\n  warn(message: string, options: LogOptions = {}) {\n    'worklet';\n    handleLog('warn', message, options);\n  },\n  error(message: string, options: LogOptions = {}) {\n    'worklet';\n    handleLog('error', message, options);\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}