{"ast":null,"code":"'use strict';\n\nvar _styleAnimation = require(\"../animation/styleAnimation.js\");\nvar _mutables = require(\"../mutables.js\");\nvar _index = require(\"./animationBuilder/index.js\");\nvar _threads = require(\"../threads.js\");\nvar TAG_OFFSET = 1e9;\nfunction startObservingProgress(tag, sharedValue, animationType) {\n  'worklet';\n\n  var isSharedTransition = animationType === _index.LayoutAnimationType.SHARED_ELEMENT_TRANSITION;\n  sharedValue.addListener(tag + TAG_OFFSET, function () {\n    global._notifyAboutProgress(tag, sharedValue.value, isSharedTransition);\n  });\n}\nfunction stopObservingProgress(tag, sharedValue) {\n  'worklet';\n\n  var removeView = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  sharedValue.removeListener(tag + TAG_OFFSET);\n  global._notifyAboutEnd(tag, removeView);\n}\nfunction createLayoutAnimationManager() {\n  'worklet';\n\n  var currentAnimationForTag = new Map();\n  var mutableValuesForTag = new Map();\n  return {\n    start: function start(tag, type, yogaValues, config) {\n      if (type === _index.LayoutAnimationType.SHARED_ELEMENT_TRANSITION_PROGRESS) {\n        global.ProgressTransitionRegister.onTransitionStart(tag, yogaValues);\n        return;\n      }\n      var style = config(yogaValues);\n      var currentAnimation = style.animations;\n      var previousAnimation = currentAnimationForTag.get(tag);\n      if (previousAnimation) {\n        currentAnimation = Object.assign({}, previousAnimation, style.animations);\n      }\n      currentAnimationForTag.set(tag, currentAnimation);\n      var value = mutableValuesForTag.get(tag);\n      if (value === undefined) {\n        value = (0, _mutables.makeMutableUI)(style.initialValues);\n        mutableValuesForTag.set(tag, value);\n      } else {\n        stopObservingProgress(tag, value);\n        value._value = style.initialValues;\n      }\n      var animation = (0, _styleAnimation.withStyleAnimation)(currentAnimation);\n      animation.callback = function (finished) {\n        if (finished) {\n          currentAnimationForTag.delete(tag);\n          mutableValuesForTag.delete(tag);\n          var shouldRemoveView = type === _index.LayoutAnimationType.EXITING;\n          stopObservingProgress(tag, value, shouldRemoveView);\n        }\n        style.callback && style.callback(finished === undefined ? false : finished);\n      };\n      startObservingProgress(tag, value, type);\n      value.value = animation;\n    },\n    stop: function stop(tag) {\n      var value = mutableValuesForTag.get(tag);\n      if (!value) {\n        return;\n      }\n      stopObservingProgress(tag, value);\n    }\n  };\n}\n(0, _threads.runOnUIImmediately)(function () {\n  'worklet';\n\n  global.LayoutAnimationsManager = createLayoutAnimationManager();\n})();","map":{"version":3,"names":["_styleAnimation","require","_mutables","_index","_threads","TAG_OFFSET","startObservingProgress","tag","sharedValue","animationType","isSharedTransition","LayoutAnimationType","SHARED_ELEMENT_TRANSITION","addListener","global","_notifyAboutProgress","value","stopObservingProgress","removeView","arguments","length","undefined","removeListener","_notifyAboutEnd","createLayoutAnimationManager","currentAnimationForTag","Map","mutableValuesForTag","start","type","yogaValues","config","SHARED_ELEMENT_TRANSITION_PROGRESS","ProgressTransitionRegister","onTransitionStart","style","currentAnimation","animations","previousAnimation","get","Object","assign","set","makeMutableUI","initialValues","_value","animation","withStyleAnimation","callback","finished","delete","shouldRemoveView","EXITING","stop","runOnUIImmediately","LayoutAnimationsManager"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-reanimated/src/layoutReanimation/animationsManager.ts"],"sourcesContent":["'use strict';\nimport { withStyleAnimation } from '../animation/styleAnimation';\nimport type { SharedValue } from '../commonTypes';\nimport { makeMutableUI } from '../mutables';\nimport { LayoutAnimationType } from './animationBuilder';\nimport { runOnUIImmediately } from '../threads';\nimport type {\n  SharedTransitionAnimationsValues,\n  LayoutAnimation,\n  LayoutAnimationStartFunction,\n} from './animationBuilder/commonTypes';\n\nconst TAG_OFFSET = 1e9;\n\nfunction startObservingProgress(\n  tag: number,\n  sharedValue: SharedValue<Record<string, unknown>>,\n  animationType: LayoutAnimationType\n): void {\n  'worklet';\n  const isSharedTransition =\n    animationType === LayoutAnimationType.SHARED_ELEMENT_TRANSITION;\n  sharedValue.addListener(tag + TAG_OFFSET, () => {\n    global._notifyAboutProgress(tag, sharedValue.value, isSharedTransition);\n  });\n}\n\nfunction stopObservingProgress(\n  tag: number,\n  sharedValue: SharedValue<number>,\n  removeView = false\n): void {\n  'worklet';\n  sharedValue.removeListener(tag + TAG_OFFSET);\n  global._notifyAboutEnd(tag, removeView);\n}\n\nfunction createLayoutAnimationManager(): {\n  start: LayoutAnimationStartFunction;\n  stop: (tag: number) => void;\n} {\n  'worklet';\n  const currentAnimationForTag = new Map();\n  const mutableValuesForTag = new Map();\n\n  return {\n    start(\n      tag: number,\n      type: LayoutAnimationType,\n      /**\n       * CreateLayoutAnimationManager creates an animation manager for both\n       * Layout animations and Shared Transition Elements animations.\n       */\n      yogaValues: Partial<SharedTransitionAnimationsValues>,\n      config: (\n        arg: Partial<SharedTransitionAnimationsValues>\n      ) => LayoutAnimation\n    ) {\n      if (type === LayoutAnimationType.SHARED_ELEMENT_TRANSITION_PROGRESS) {\n        global.ProgressTransitionRegister.onTransitionStart(tag, yogaValues);\n        return;\n      }\n\n      const style = config(yogaValues);\n      let currentAnimation = style.animations;\n\n      // When layout animation is requested, but a previous one is still running, we merge\n      // new layout animation targets into the ongoing animation\n      const previousAnimation = currentAnimationForTag.get(tag);\n      if (previousAnimation) {\n        currentAnimation = { ...previousAnimation, ...style.animations };\n      }\n      currentAnimationForTag.set(tag, currentAnimation);\n\n      let value = mutableValuesForTag.get(tag);\n      if (value === undefined) {\n        value = makeMutableUI(style.initialValues);\n        mutableValuesForTag.set(tag, value);\n      } else {\n        stopObservingProgress(tag, value);\n        value._value = style.initialValues;\n      }\n\n      // @ts-ignore The line below started failing because I added types to the method â€“ don't have time to fix it right now\n      const animation = withStyleAnimation(currentAnimation);\n\n      animation.callback = (finished?: boolean) => {\n        if (finished) {\n          currentAnimationForTag.delete(tag);\n          mutableValuesForTag.delete(tag);\n          const shouldRemoveView = type === LayoutAnimationType.EXITING;\n          stopObservingProgress(tag, value, shouldRemoveView);\n        }\n        style.callback &&\n          style.callback(finished === undefined ? false : finished);\n      };\n\n      startObservingProgress(tag, value, type);\n      value.value = animation;\n    },\n    stop(tag: number) {\n      const value = mutableValuesForTag.get(tag);\n      if (!value) {\n        return;\n      }\n      stopObservingProgress(tag, value);\n    },\n  };\n}\n\nrunOnUIImmediately(() => {\n  'worklet';\n  global.LayoutAnimationsManager = createLayoutAnimationManager();\n})();\n\nexport type LayoutAnimationsManager = ReturnType<\n  typeof createLayoutAnimationManager\n>;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}