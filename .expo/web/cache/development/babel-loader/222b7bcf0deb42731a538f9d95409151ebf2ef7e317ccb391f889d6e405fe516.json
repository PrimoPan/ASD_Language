{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeShareable = void 0;\nexports.makeShareableCloneOnUIRecursive = makeShareableCloneOnUIRecursive;\nexports.makeShareableCloneRecursive = makeShareableCloneRecursive;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _NativeReanimated = _interopRequireDefault(require(\"./NativeReanimated\"));\nvar _commonTypes = require(\"./commonTypes.js\");\nvar _PlatformChecker = require(\"./PlatformChecker.js\");\nvar _errors = require(\"./errors.js\");\nvar _jsVersion = require(\"./platform-specific/jsVersion.js\");\nvar _shareableMappingCache = require(\"./shareableMappingCache.js\");\nvar _index = require(\"./logger/index.js\");\nvar SHOULD_BE_USE_WEB = (0, _PlatformChecker.shouldBeUseWeb)();\nvar MAGIC_KEY = 'REANIMATED_MAGIC_KEY';\nfunction isHostObject(value) {\n  'worklet';\n  return MAGIC_KEY in value;\n}\nfunction isPlainJSObject(object) {\n  return Object.getPrototypeOf(object) === Object.prototype;\n}\nvar INACCESSIBLE_OBJECT = {\n  __init: function __init() {\n    'worklet';\n\n    return new Proxy({}, {\n      get: function get(_, prop) {\n        if (prop === '_isReanimatedSharedValue' || prop === '__remoteFunction') {\n          return false;\n        }\n        throw new _errors.ReanimatedError(`Trying to access property \\`${String(prop)}\\` of an object which cannot be sent to the UI runtime.`);\n      },\n      set: function set() {\n        throw new _errors.ReanimatedError('Trying to write to an object which cannot be sent to the UI runtime.');\n      }\n    });\n  }\n};\nvar VALID_ARRAY_VIEWS_NAMES = ['Int8Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array', 'Float32Array', 'Float64Array', 'BigInt64Array', 'BigUint64Array', 'DataView'];\nvar DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD = 30;\nvar processedObjectAtThresholdDepth;\nfunction makeShareableCloneRecursive(value) {\n  var shouldPersistRemote = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  if (SHOULD_BE_USE_WEB) {\n    return value;\n  }\n  if (depth >= DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {\n    if (depth === DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {\n      processedObjectAtThresholdDepth = value;\n    } else if (value === processedObjectAtThresholdDepth) {\n      throw new _errors.ReanimatedError('Trying to convert a cyclic object to a shareable. This is not supported.');\n    }\n  } else {\n    processedObjectAtThresholdDepth = undefined;\n  }\n  var type = typeof value;\n  var isTypeObject = type === 'object';\n  var isTypeFunction = type === 'function';\n  if ((isTypeObject || isTypeFunction) && value !== null) {\n    var cached = _shareableMappingCache.shareableMappingCache.get(value);\n    if (cached === _shareableMappingCache.shareableMappingFlag) {\n      return value;\n    } else if (cached !== undefined) {\n      return cached;\n    } else {\n      var toAdapt;\n      if (Array.isArray(value)) {\n        toAdapt = value.map(function (element) {\n          return makeShareableCloneRecursive(element, shouldPersistRemote, depth + 1);\n        });\n        freezeObjectIfDev(value);\n      } else if (isTypeFunction && !(0, _commonTypes.isWorkletFunction)(value)) {\n        toAdapt = value;\n        freezeObjectIfDev(value);\n      } else if (isHostObject(value)) {\n        toAdapt = value;\n      } else if (isPlainJSObject(value) && value.__workletContextObjectFactory) {\n        var workletContextObjectFactory = value.__workletContextObjectFactory;\n        var handle = makeShareableCloneRecursive({\n          __init: function __init() {\n            'worklet';\n\n            return workletContextObjectFactory();\n          }\n        });\n        _shareableMappingCache.shareableMappingCache.set(value, handle);\n        return handle;\n      } else if (isPlainJSObject(value) || isTypeFunction) {\n        toAdapt = {};\n        if ((0, _commonTypes.isWorkletFunction)(value)) {\n          if (__DEV__) {\n            var babelVersion = value.__initData.version;\n            if (babelVersion !== undefined && babelVersion !== _jsVersion.jsVersion) {\n              throw new _errors.ReanimatedError(`Mismatch between JavaScript code version and Reanimated Babel plugin version (${_jsVersion.jsVersion} vs. ${babelVersion}).        \nSee \\`https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#mismatch-between-javascript-code-version-and-reanimated-babel-plugin-version\\` for more details.\nOffending code was: \\`${getWorkletCode(value)}\\``);\n            }\n            (0, _errors.registerWorkletStackDetails)(value.__workletHash, value.__stackDetails);\n          }\n          if (value.__stackDetails) {\n            delete value.__stackDetails;\n          }\n          toAdapt.__initData = makeShareableCloneRecursive(value.__initData, true, depth + 1);\n        }\n        for (var _ref of Object.entries(value)) {\n          var _ref2 = (0, _slicedToArray2.default)(_ref, 2);\n          var key = _ref2[0];\n          var element = _ref2[1];\n          if (key === '__initData' && toAdapt.__initData !== undefined) {\n            continue;\n          }\n          toAdapt[key] = makeShareableCloneRecursive(element, shouldPersistRemote, depth + 1);\n        }\n        freezeObjectIfDev(value);\n      } else if (value instanceof RegExp) {\n        var pattern = value.source;\n        var flags = value.flags;\n        var _handle = makeShareableCloneRecursive({\n          __init: function __init() {\n            'worklet';\n\n            return new RegExp(pattern, flags);\n          }\n        });\n        _shareableMappingCache.shareableMappingCache.set(value, _handle);\n        return _handle;\n      } else if (value instanceof Error) {\n        var name = value.name,\n          message = value.message,\n          stack = value.stack;\n        var _handle2 = makeShareableCloneRecursive({\n          __init: function __init() {\n            'worklet';\n            var error = new Error();\n            error.name = name;\n            error.message = message;\n            error.stack = stack;\n            return error;\n          }\n        });\n        _shareableMappingCache.shareableMappingCache.set(value, _handle2);\n        return _handle2;\n      } else if (value instanceof ArrayBuffer) {\n        toAdapt = value;\n      } else if (ArrayBuffer.isView(value)) {\n        var buffer = value.buffer;\n        var typeName = value.constructor.name;\n        var _handle3 = makeShareableCloneRecursive({\n          __init: function __init() {\n            'worklet';\n\n            if (!VALID_ARRAY_VIEWS_NAMES.includes(typeName)) {\n              throw new _errors.ReanimatedError(`Invalid array view name \\`${typeName}\\`.`);\n            }\n            var constructor = global[typeName];\n            if (constructor === undefined) {\n              throw new _errors.ReanimatedError(`Constructor for \\`${typeName}\\` not found.`);\n            }\n            return new constructor(buffer);\n          }\n        });\n        _shareableMappingCache.shareableMappingCache.set(value, _handle3);\n        return _handle3;\n      } else {\n        var inaccessibleObject = makeShareableCloneRecursive(INACCESSIBLE_OBJECT);\n        _shareableMappingCache.shareableMappingCache.set(value, inaccessibleObject);\n        return inaccessibleObject;\n      }\n      var adapted = _NativeReanimated.default.makeShareableClone(toAdapt, shouldPersistRemote, value);\n      _shareableMappingCache.shareableMappingCache.set(value, adapted);\n      _shareableMappingCache.shareableMappingCache.set(adapted);\n      return adapted;\n    }\n  }\n  return _NativeReanimated.default.makeShareableClone(value, shouldPersistRemote, undefined);\n}\nvar WORKLET_CODE_THRESHOLD = 255;\nfunction getWorkletCode(value) {\n  var _value$__initData;\n  var code = value == null || (_value$__initData = value.__initData) == null ? void 0 : _value$__initData.code;\n  if (!code) {\n    return 'unknown';\n  }\n  if (code.length > WORKLET_CODE_THRESHOLD) {\n    return `${code.substring(0, WORKLET_CODE_THRESHOLD)}...`;\n  }\n  return code;\n}\nfunction isRemoteFunction(value) {\n  'worklet';\n\n  return !!value.__remoteFunction;\n}\nfunction freezeObjectIfDev(value) {\n  if (!__DEV__) {\n    return;\n  }\n  Object.entries(value).forEach(function (_ref3) {\n    var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),\n      key = _ref4[0],\n      element = _ref4[1];\n    var descriptor = Object.getOwnPropertyDescriptor(value, key);\n    if (!descriptor.configurable) {\n      return;\n    }\n    Object.defineProperty(value, key, {\n      get: function get() {\n        return element;\n      },\n      set: function set() {\n        _index.logger.warn(`Tried to modify key \\`${key}\\` of an object which has been already passed to a worklet. See \nhttps://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#tried-to-modify-key-of-an-object-which-has-been-converted-to-a-shareable \nfor more details.`);\n      }\n    });\n  });\n  Object.preventExtensions(value);\n}\nfunction makeShareableCloneOnUIRecursive(value) {\n  'worklet';\n\n  if (SHOULD_BE_USE_WEB) {\n    return value;\n  }\n  function cloneRecursive(value) {\n    if (typeof value === 'object' && value !== null || typeof value === 'function') {\n      if (isHostObject(value)) {\n        return global._makeShareableClone(value, undefined);\n      }\n      if (isRemoteFunction(value)) {\n        return value.__remoteFunction;\n      }\n      if (Array.isArray(value)) {\n        return global._makeShareableClone(value.map(cloneRecursive), undefined);\n      }\n      var toAdapt = {};\n      for (var _ref5 of Object.entries(value)) {\n        var _ref6 = (0, _slicedToArray2.default)(_ref5, 2);\n        var key = _ref6[0];\n        var element = _ref6[1];\n        toAdapt[key] = cloneRecursive(element);\n      }\n      return global._makeShareableClone(toAdapt, value);\n    }\n    return global._makeShareableClone(value, undefined);\n  }\n  return cloneRecursive(value);\n}\nfunction makeShareableJS(value) {\n  return value;\n}\nfunction makeShareableNative(value) {\n  if (_shareableMappingCache.shareableMappingCache.get(value)) {\n    return value;\n  }\n  var handle = makeShareableCloneRecursive({\n    __init: function __init() {\n      'worklet';\n\n      return value;\n    }\n  });\n  _shareableMappingCache.shareableMappingCache.set(value, handle);\n  return value;\n}\nvar makeShareable = exports.makeShareable = SHOULD_BE_USE_WEB ? makeShareableJS : makeShareableNative;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","makeShareable","makeShareableCloneOnUIRecursive","makeShareableCloneRecursive","_slicedToArray2","_NativeReanimated","_commonTypes","_PlatformChecker","_errors","_jsVersion","_shareableMappingCache","_index","SHOULD_BE_USE_WEB","shouldBeUseWeb","MAGIC_KEY","isHostObject","isPlainJSObject","object","getPrototypeOf","prototype","INACCESSIBLE_OBJECT","__init","Proxy","get","_","prop","ReanimatedError","String","set","VALID_ARRAY_VIEWS_NAMES","DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD","processedObjectAtThresholdDepth","shouldPersistRemote","arguments","length","undefined","depth","type","isTypeObject","isTypeFunction","cached","shareableMappingCache","shareableMappingFlag","toAdapt","Array","isArray","map","element","freezeObjectIfDev","isWorkletFunction","__workletContextObjectFactory","workletContextObjectFactory","handle","__DEV__","babelVersion","__initData","version","jsVersion","getWorkletCode","registerWorkletStackDetails","__workletHash","__stackDetails","_ref","entries","_ref2","default","key","RegExp","pattern","source","flags","Error","name","message","stack","error","ArrayBuffer","isView","buffer","typeName","constructor","includes","global","inaccessibleObject","adapted","NativeReanimatedModule","makeShareableClone","WORKLET_CODE_THRESHOLD","_value$__initData","code","substring","isRemoteFunction","__remoteFunction","forEach","_ref3","_ref4","descriptor","getOwnPropertyDescriptor","configurable","logger","warn","preventExtensions","cloneRecursive","_makeShareableClone","_ref5","_ref6","makeShareableJS","makeShareableNative"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-reanimated/src/shareables.ts"],"sourcesContent":["'use strict';\nimport NativeReanimatedModule from './NativeReanimated';\nimport { isWorkletFunction } from './commonTypes';\nimport type {\n  ShareableRef,\n  FlatShareableRef,\n  WorkletFunction,\n} from './commonTypes';\nimport { shouldBeUseWeb } from './PlatformChecker';\nimport { ReanimatedError, registerWorkletStackDetails } from './errors';\nimport { jsVersion } from './platform-specific/jsVersion';\nimport {\n  shareableMappingCache,\n  shareableMappingFlag,\n} from './shareableMappingCache';\nimport { logger } from './logger';\n\n// for web/chrome debugger/jest environments this file provides a stub implementation\n// where no shareable references are used. Instead, the objects themselves are used\n// instead of shareable references, because of the fact that we don't have to deal with\n// running the code on separate VMs.\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\n\nconst MAGIC_KEY = 'REANIMATED_MAGIC_KEY';\n\nfunction isHostObject(value: NonNullable<object>) {\n  'worklet';\n  // We could use JSI to determine whether an object is a host object, however\n  // the below workaround works well and is way faster than an additional JSI call.\n  // We use the fact that host objects have broken implementation of `hasOwnProperty`\n  // and hence return true for all `in` checks regardless of the key we ask for.\n  return MAGIC_KEY in value;\n}\n\nfunction isPlainJSObject(object: object) {\n  return Object.getPrototypeOf(object) === Object.prototype;\n}\n\n// The below object is used as a replacement for objects that cannot be transferred\n// as shareable values. In makeShareableCloneRecursive we detect if an object is of\n// a plain Object.prototype and only allow such objects to be transferred. This lets\n// us avoid all sorts of react internals from leaking into the UI runtime. To make it\n// possible to catch errors when someone actually tries to access such object on the UI\n// runtime, we use the below Proxy object which is instantiated on the UI runtime and\n// throws whenever someone tries to access its fields.\nconst INACCESSIBLE_OBJECT = {\n  __init: () => {\n    'worklet';\n    return new Proxy(\n      {},\n      {\n        get: (_: unknown, prop: string | symbol) => {\n          if (\n            prop === '_isReanimatedSharedValue' ||\n            prop === '__remoteFunction'\n          ) {\n            // not very happy about this check here, but we need to allow for\n            // \"inaccessible\" objects to be tested with isSharedValue check\n            // as it is being used in the mappers when extracting inputs recursively\n            // as well as with isRemoteFunction when cloning objects recursively.\n            // Apparently we can't check if a key exists there as HostObjects always\n            // return true for such tests, so the only possibility for us is to\n            // actually access that key and see if it is set to true. We therefore\n            // need to allow for this key to be accessed here.\n            return false;\n          }\n          throw new ReanimatedError(\n            `Trying to access property \\`${String(\n              prop\n            )}\\` of an object which cannot be sent to the UI runtime.`\n          );\n        },\n        set: () => {\n          throw new ReanimatedError(\n            'Trying to write to an object which cannot be sent to the UI runtime.'\n          );\n        },\n      }\n    );\n  },\n};\n\nconst VALID_ARRAY_VIEWS_NAMES = [\n  'Int8Array',\n  'Uint8Array',\n  'Uint8ClampedArray',\n  'Int16Array',\n  'Uint16Array',\n  'Int32Array',\n  'Uint32Array',\n  'Float32Array',\n  'Float64Array',\n  'BigInt64Array',\n  'BigUint64Array',\n  'DataView',\n];\n\nconst DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD = 30;\n// Below variable stores object that we process in makeShareableCloneRecursive at the specified depth.\n// We use it to check if later on the function reenters with the same object\nlet processedObjectAtThresholdDepth: unknown;\n\nexport function makeShareableCloneRecursive<T>(\n  value: any,\n  shouldPersistRemote = false,\n  depth = 0\n): ShareableRef<T> {\n  if (SHOULD_BE_USE_WEB) {\n    return value;\n  }\n  if (depth >= DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {\n    // if we reach certain recursion depth we suspect that we are dealing with a cyclic object.\n    // this type of objects are not supported and cannot be transferred as shareable, so we\n    // implement a simple detection mechanism that remembers the value at a given depth and\n    // tests whether we try reenter this method later on with the same value. If that happens\n    // we throw an appropriate error.\n    if (depth === DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {\n      processedObjectAtThresholdDepth = value;\n    } else if (value === processedObjectAtThresholdDepth) {\n      throw new ReanimatedError(\n        'Trying to convert a cyclic object to a shareable. This is not supported.'\n      );\n    }\n  } else {\n    processedObjectAtThresholdDepth = undefined;\n  }\n  // This one actually may be worth to be moved to c++, we also need similar logic to run on the UI thread\n  const type = typeof value;\n  const isTypeObject = type === 'object';\n  const isTypeFunction = type === 'function';\n  if ((isTypeObject || isTypeFunction) && value !== null) {\n    const cached = shareableMappingCache.get(value);\n    if (cached === shareableMappingFlag) {\n      return value;\n    } else if (cached !== undefined) {\n      return cached as ShareableRef<T>;\n    } else {\n      let toAdapt: any;\n      if (Array.isArray(value)) {\n        toAdapt = value.map((element) =>\n          makeShareableCloneRecursive(element, shouldPersistRemote, depth + 1)\n        );\n        freezeObjectIfDev(value);\n      } else if (isTypeFunction && !isWorkletFunction(value)) {\n        // this is a remote function\n        toAdapt = value;\n        freezeObjectIfDev(value);\n      } else if (isHostObject(value)) {\n        // for host objects we pass the reference to the object as shareable and\n        // then recreate new host object wrapping the same instance on the UI thread.\n        // there is no point of iterating over keys as we do for regular objects.\n        toAdapt = value;\n      } else if (\n        isPlainJSObject(value) &&\n        value.__workletContextObjectFactory\n      ) {\n        const workletContextObjectFactory = value.__workletContextObjectFactory;\n        const handle = makeShareableCloneRecursive({\n          __init: () => {\n            'worklet';\n            return workletContextObjectFactory();\n          },\n        });\n        shareableMappingCache.set(value, handle);\n        return handle as ShareableRef<T>;\n      } else if (isPlainJSObject(value) || isTypeFunction) {\n        toAdapt = {};\n        if (isWorkletFunction(value)) {\n          if (__DEV__) {\n            const babelVersion = value.__initData.version;\n            if (babelVersion !== undefined && babelVersion !== jsVersion) {\n              throw new ReanimatedError(`Mismatch between JavaScript code version and Reanimated Babel plugin version (${jsVersion} vs. ${babelVersion}).        \nSee \\`https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#mismatch-between-javascript-code-version-and-reanimated-babel-plugin-version\\` for more details.\nOffending code was: \\`${getWorkletCode(value)}\\``);\n            }\n            registerWorkletStackDetails(\n              value.__workletHash,\n              value.__stackDetails!\n            );\n          }\n          if (value.__stackDetails) {\n            // `Error` type of value cannot be copied to the UI thread, so we\n            // remove it after we handled it in dev mode or delete it to ignore it in production mode.\n            // Not removing this would cause an infinite loop in production mode and it just\n            // seems more elegant to handle it this way.\n            delete value.__stackDetails;\n          }\n          // to save on transferring static __initData field of worklet structure\n          // we request shareable value to persist its UI counterpart. This means\n          // that the __initData field that contains long strings representing the\n          // worklet code, source map, and location, will always be\n          // serialized/deserialized once.\n          toAdapt.__initData = makeShareableCloneRecursive(\n            value.__initData,\n            true,\n            depth + 1\n          );\n        }\n\n        for (const [key, element] of Object.entries(value)) {\n          if (key === '__initData' && toAdapt.__initData !== undefined) {\n            continue;\n          }\n          toAdapt[key] = makeShareableCloneRecursive(\n            element,\n            shouldPersistRemote,\n            depth + 1\n          );\n        }\n        freezeObjectIfDev(value);\n      } else if (value instanceof RegExp) {\n        const pattern = value.source;\n        const flags = value.flags;\n        const handle = makeShareableCloneRecursive({\n          __init: () => {\n            'worklet';\n            return new RegExp(pattern, flags);\n          },\n        });\n        shareableMappingCache.set(value, handle);\n        return handle as ShareableRef<T>;\n      } else if (value instanceof Error) {\n        const { name, message, stack } = value;\n        const handle = makeShareableCloneRecursive({\n          __init: () => {\n            'worklet';\n            // eslint-disable-next-line reanimated/use-reanimated-error\n            const error = new Error();\n            error.name = name;\n            error.message = message;\n            error.stack = stack;\n            return error;\n          },\n        });\n        shareableMappingCache.set(value, handle);\n        return handle as ShareableRef<T>;\n      } else if (value instanceof ArrayBuffer) {\n        toAdapt = value;\n      } else if (ArrayBuffer.isView(value)) {\n        // typed array (e.g. Int32Array, Uint8ClampedArray) or DataView\n        const buffer = value.buffer;\n        const typeName = value.constructor.name;\n        const handle = makeShareableCloneRecursive({\n          __init: () => {\n            'worklet';\n            if (!VALID_ARRAY_VIEWS_NAMES.includes(typeName)) {\n              throw new ReanimatedError(\n                `Invalid array view name \\`${typeName}\\`.`\n              );\n            }\n            const constructor = global[typeName as keyof typeof global];\n            if (constructor === undefined) {\n              throw new ReanimatedError(\n                `Constructor for \\`${typeName}\\` not found.`\n              );\n            }\n            return new constructor(buffer);\n          },\n        });\n        shareableMappingCache.set(value, handle);\n        return handle as ShareableRef<T>;\n      } else {\n        // This is reached for object types that are not of plain Object.prototype.\n        // We don't support such objects from being transferred as shareables to\n        // the UI runtime and hence we replace them with \"inaccessible object\"\n        // which is implemented as a Proxy object that throws on any attempt\n        // of accessing its fields. We argue that such objects can sometimes leak\n        // as attributes of objects being captured by worklets but should never\n        // be used on the UI runtime regardless. If they are being accessed, the user\n        // will get an appropriate error message.\n        const inaccessibleObject =\n          makeShareableCloneRecursive<T>(INACCESSIBLE_OBJECT);\n        shareableMappingCache.set(value, inaccessibleObject);\n        return inaccessibleObject;\n      }\n      const adapted = NativeReanimatedModule.makeShareableClone(\n        toAdapt,\n        shouldPersistRemote,\n        value\n      );\n      shareableMappingCache.set(value, adapted);\n      shareableMappingCache.set(adapted);\n      return adapted;\n    }\n  }\n  return NativeReanimatedModule.makeShareableClone(\n    value,\n    shouldPersistRemote,\n    undefined\n  );\n}\n\nconst WORKLET_CODE_THRESHOLD = 255;\n\nfunction getWorkletCode(value: WorkletFunction) {\n  // @ts-ignore this is fine\n  const code = value?.__initData?.code;\n  if (!code) {\n    return 'unknown';\n  }\n  if (code.length > WORKLET_CODE_THRESHOLD) {\n    return `${code.substring(0, WORKLET_CODE_THRESHOLD)}...`;\n  }\n  return code;\n}\n\ntype RemoteFunction<T> = {\n  __remoteFunction: FlatShareableRef<T>;\n};\n\nfunction isRemoteFunction<T>(value: {\n  __remoteFunction?: unknown;\n}): value is RemoteFunction<T> {\n  'worklet';\n  return !!value.__remoteFunction;\n}\n\n/**\n * We freeze\n *\n * - Arrays,\n * - Remote functions,\n * - Plain JS objects,\n *\n * That are transformed to a shareable with a meaningful warning. This should\n * help detect issues when someone modifies data after it's been converted.\n * Meaning that they may be doing a faulty assumption in their code expecting\n * that the updates are going to automatically propagate to the object sent to\n * the UI thread. If the user really wants some objects to be mutable they\n * should use shared values instead.\n */\nfunction freezeObjectIfDev<T extends object>(value: T) {\n  if (!__DEV__) {\n    return;\n  }\n  Object.entries(value).forEach(([key, element]) => {\n    const descriptor = Object.getOwnPropertyDescriptor(value, key)!;\n    if (!descriptor.configurable) {\n      return;\n    }\n    Object.defineProperty(value, key, {\n      get() {\n        return element;\n      },\n      set() {\n        logger.warn(\n          `Tried to modify key \\`${key}\\` of an object which has been already passed to a worklet. See \nhttps://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#tried-to-modify-key-of-an-object-which-has-been-converted-to-a-shareable \nfor more details.`\n        );\n      },\n    });\n  });\n  Object.preventExtensions(value);\n}\n\nexport function makeShareableCloneOnUIRecursive<T>(\n  value: T\n): FlatShareableRef<T> {\n  'worklet';\n  if (SHOULD_BE_USE_WEB) {\n    // @ts-ignore web is an interesting place where we don't run a secondary VM on the UI thread\n    // see more details in the comment where USE_STUB_IMPLEMENTATION is defined.\n    return value;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  function cloneRecursive(value: T): FlatShareableRef<T> {\n    if (\n      (typeof value === 'object' && value !== null) ||\n      typeof value === 'function'\n    ) {\n      if (isHostObject(value)) {\n        // We call `_makeShareableClone` to wrap the provided HostObject\n        // inside ShareableJSRef.\n        return global._makeShareableClone(\n          value,\n          undefined\n        ) as FlatShareableRef<T>;\n      }\n      if (isRemoteFunction<T>(value)) {\n        // RemoteFunctions are created by us therefore they are\n        // a Shareable out of the box and there is no need to\n        // call `_makeShareableClone`.\n        return value.__remoteFunction;\n      }\n      if (Array.isArray(value)) {\n        return global._makeShareableClone(\n          value.map(cloneRecursive),\n          undefined\n        ) as FlatShareableRef<T>;\n      }\n      const toAdapt: Record<string, FlatShareableRef<T>> = {};\n      for (const [key, element] of Object.entries(value)) {\n        toAdapt[key] = cloneRecursive(element);\n      }\n      return global._makeShareableClone(toAdapt, value) as FlatShareableRef<T>;\n    }\n    return global._makeShareableClone(value, undefined);\n  }\n  return cloneRecursive(value);\n}\n\nfunction makeShareableJS<T extends object>(value: T): T {\n  return value;\n}\n\nfunction makeShareableNative<T extends object>(value: T): T {\n  if (shareableMappingCache.get(value)) {\n    return value;\n  }\n  const handle = makeShareableCloneRecursive({\n    __init: () => {\n      'worklet';\n      return value;\n    },\n  });\n  shareableMappingCache.set(value, handle);\n  return value;\n}\n\n/**\n * This function creates a value on UI with persistent state - changes to it on\n * the UI thread will be seen by all worklets. Use it when you want to create a\n * value that is read and written only on the UI thread.\n */\nexport const makeShareable = SHOULD_BE_USE_WEB\n  ? makeShareableJS\n  : makeShareableNative;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}