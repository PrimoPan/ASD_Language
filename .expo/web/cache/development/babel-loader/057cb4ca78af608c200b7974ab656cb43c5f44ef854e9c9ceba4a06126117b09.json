{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createWorkletRuntime = createWorkletRuntime;\nexports.runOnRuntime = runOnRuntime;\nvar _commonTypes = require(\"./commonTypes.js\");\nvar _errors = require(\"./errors.js\");\nvar _initializers = require(\"./initializers.js\");\nvar _index = require(\"./logger/index.js\");\nvar _NativeReanimated = _interopRequireDefault(require(\"./NativeReanimated\"));\nvar _PlatformChecker = require(\"./PlatformChecker.js\");\nvar _shareables = require(\"./shareables.js\");\nvar SHOULD_BE_USE_WEB = (0, _PlatformChecker.shouldBeUseWeb)();\nfunction createWorkletRuntime(name, initializer) {\n  var config = __reanimatedLoggerConfig;\n  return _NativeReanimated.default.createWorkletRuntime(name, (0, _shareables.makeShareableCloneRecursive)(function () {\n    'worklet';\n\n    (0, _errors.registerReanimatedError)();\n    (0, _index.registerLoggerConfig)(config);\n    (0, _initializers.setupCallGuard)();\n    (0, _initializers.setupConsole)();\n    initializer == null || initializer();\n  }));\n}\nfunction runOnRuntime(workletRuntime, worklet) {\n  'worklet';\n\n  if (__DEV__ && !SHOULD_BE_USE_WEB && !(0, _commonTypes.isWorkletFunction)(worklet)) {\n    throw new _errors.ReanimatedError('The function passed to `runOnRuntime` is not a worklet.' + (_WORKLET ? ' Please make sure that `processNestedWorklets` option in Reanimated Babel plugin is enabled.' : ''));\n  }\n  if (_WORKLET) {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return global._scheduleOnRuntime(workletRuntime, (0, _shareables.makeShareableCloneOnUIRecursive)(function () {\n        'worklet';\n\n        worklet.apply(void 0, args);\n      }));\n    };\n  }\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return _NativeReanimated.default.scheduleOnRuntime(workletRuntime, (0, _shareables.makeShareableCloneRecursive)(function () {\n      'worklet';\n\n      worklet.apply(void 0, args);\n    }));\n  };\n}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","createWorkletRuntime","runOnRuntime","_commonTypes","_errors","_initializers","_index","_NativeReanimated","_PlatformChecker","_shareables","SHOULD_BE_USE_WEB","shouldBeUseWeb","name","initializer","config","__reanimatedLoggerConfig","NativeReanimatedModule","makeShareableCloneRecursive","registerReanimatedError","registerLoggerConfig","setupCallGuard","setupConsole","workletRuntime","worklet","__DEV__","isWorkletFunction","ReanimatedError","_WORKLET","_len","arguments","length","args","Array","_key","global","_scheduleOnRuntime","makeShareableCloneOnUIRecursive","apply","_len2","_key2","scheduleOnRuntime"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-reanimated/src/runtimes.ts"],"sourcesContent":["'use strict';\nimport { isWorkletFunction } from './commonTypes';\nimport type { WorkletFunction } from './commonTypes';\nimport { ReanimatedError, registerReanimatedError } from './errors';\nimport { setupCallGuard, setupConsole } from './initializers';\nimport { registerLoggerConfig } from './logger';\nimport NativeReanimatedModule from './NativeReanimated';\nimport { shouldBeUseWeb } from './PlatformChecker';\nimport {\n  makeShareableCloneOnUIRecursive,\n  makeShareableCloneRecursive,\n} from './shareables';\n\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\n\nexport type WorkletRuntime = {\n  __hostObjectWorkletRuntime: never;\n  readonly name: string;\n};\n\n/**\n * Lets you create a new JS runtime which can be used to run worklets possibly\n * on different threads than JS or UI thread.\n *\n * @param name - A name used to identify the runtime which will appear in\n *   devices list in Chrome DevTools.\n * @param initializer - An optional worklet that will be run synchronously on\n *   the same thread immediately after the runtime is created.\n * @returns WorkletRuntime which is a\n *   `jsi::HostObject<reanimated::WorkletRuntime>` - {@link WorkletRuntime}\n * @see https://docs.swmansion.com/react-native-reanimated/docs/threading/createWorkletRuntime\n */\n// @ts-expect-error Check `runOnUI` overload.\nexport function createWorkletRuntime(\n  name: string,\n  initializer?: () => void\n): WorkletRuntime;\n\nexport function createWorkletRuntime(\n  name: string,\n  initializer?: WorkletFunction<[], void>\n): WorkletRuntime {\n  // Assign to a different variable as __reanimatedLoggerConfig is not a captured\n  // identifier in the Worklet runtime.\n  const config = __reanimatedLoggerConfig;\n  return NativeReanimatedModule.createWorkletRuntime(\n    name,\n    makeShareableCloneRecursive(() => {\n      'worklet';\n      registerReanimatedError();\n      registerLoggerConfig(config);\n      setupCallGuard();\n      setupConsole();\n      initializer?.();\n    })\n  );\n}\n\n// @ts-expect-error Check `runOnUI` overload.\nexport function runOnRuntime<Args extends unknown[], ReturnValue>(\n  workletRuntime: WorkletRuntime,\n  worklet: (...args: Args) => ReturnValue\n): WorkletFunction<Args, ReturnValue>;\n/** Schedule a worklet to execute on the background queue. */\nexport function runOnRuntime<Args extends unknown[], ReturnValue>(\n  workletRuntime: WorkletRuntime,\n  worklet: WorkletFunction<Args, ReturnValue>\n): (...args: Args) => void {\n  'worklet';\n  if (__DEV__ && !SHOULD_BE_USE_WEB && !isWorkletFunction(worklet)) {\n    throw new ReanimatedError(\n      'The function passed to `runOnRuntime` is not a worklet.' +\n        (_WORKLET\n          ? ' Please make sure that `processNestedWorklets` option in Reanimated Babel plugin is enabled.'\n          : '')\n    );\n  }\n  if (_WORKLET) {\n    return (...args) =>\n      global._scheduleOnRuntime(\n        workletRuntime,\n        makeShareableCloneOnUIRecursive(() => {\n          'worklet';\n          worklet(...args);\n        })\n      );\n  }\n  return (...args) =>\n    NativeReanimatedModule.scheduleOnRuntime(\n      workletRuntime,\n      makeShareableCloneRecursive(() => {\n        'worklet';\n        worklet(...args);\n      })\n    );\n}\n"],"mappings":"AAAA,YAAY;;AAAA,IAAAA,sBAAA,GAAAC,OAAA;AAAAC,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,KAAA;AAAA;AAAAD,OAAA,CAAAE,oBAAA,GAAAA,oBAAA;AAAAF,OAAA,CAAAG,YAAA,GAAAA,YAAA;AACZ,IAAAC,YAAA,GAAAP,OAAA;AAEA,IAAAQ,OAAA,GAAAR,OAAA;AACA,IAAAS,aAAA,GAAAT,OAAA;AACA,IAAAU,MAAA,GAAAV,OAAA;AACA,IAAAW,iBAAA,GAAAZ,sBAAA,CAAAC,OAAA;AACA,IAAAY,gBAAA,GAAAZ,OAAA;AACA,IAAAa,WAAA,GAAAb,OAAA;AAKA,IAAMc,iBAAiB,GAAG,IAAAC,+BAAc,EAAC,CAAC;AAyBnC,SAASV,oBAAoBA,CAClCW,IAAY,EACZC,WAAuC,EACvB;EAGhB,IAAMC,MAAM,GAAGC,wBAAwB;EACvC,OAAOC,yBAAsB,CAACf,oBAAoB,CAChDW,IAAI,EACJ,IAAAK,uCAA2B,EAAC,YAAM;IAChC,SAAS;;IACT,IAAAC,+BAAuB,EAAC,CAAC;IACzB,IAAAC,2BAAoB,EAACL,MAAM,CAAC;IAC5B,IAAAM,4BAAc,EAAC,CAAC;IAChB,IAAAC,0BAAY,EAAC,CAAC;IACdR,WAAW,YAAXA,WAAW,CAAG,CAAC;EACjB,CAAC,CACH,CAAC;AACH;AAQO,SAASX,YAAYA,CAC1BoB,cAA8B,EAC9BC,OAA2C,EAClB;EACzB,SAAS;;EACT,IAAIC,OAAO,IAAI,CAACd,iBAAiB,IAAI,CAAC,IAAAe,8BAAiB,EAACF,OAAO,CAAC,EAAE;IAChE,MAAM,IAAIG,uBAAe,CACvB,yDAAyD,IACtDC,QAAQ,GACL,8FAA8F,GAC9F,EAAE,CACV,CAAC;EACH;EACA,IAAIA,QAAQ,EAAE;IACZ,OAAO;MAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAIC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;MAAA;MAAA,OACbC,MAAM,CAACC,kBAAkB,CACvBb,cAAc,EACd,IAAAc,2CAA+B,EAAC,YAAM;QACpC,SAAS;;QACTb,OAAO,CAAAc,KAAA,SAAIN,IAAI,CAAC;MAClB,CAAC,CACH,CAAC;IAAA;EACL;EACA,OAAO;IAAA,SAAAO,KAAA,GAAAT,SAAA,CAAAC,MAAA,EAAIC,IAAI,OAAAC,KAAA,CAAAM,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAJR,IAAI,CAAAQ,KAAA,IAAAV,SAAA,CAAAU,KAAA;IAAA;IAAA,OACbvB,yBAAsB,CAACwB,iBAAiB,CACtClB,cAAc,EACd,IAAAL,uCAA2B,EAAC,YAAM;MAChC,SAAS;;MACTM,OAAO,CAAAc,KAAA,SAAIN,IAAI,CAAC;IAClB,CAAC,CACH,CAAC;EAAA;AACL","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}