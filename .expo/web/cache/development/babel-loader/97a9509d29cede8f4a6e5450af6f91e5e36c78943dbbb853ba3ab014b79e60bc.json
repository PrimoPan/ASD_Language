{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _api = require(\"../../utils/api\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _this = this,\n  _jsxFileName = \"/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/SourceCode/Components/GptTest/index.jsx\";\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nvar GptTest = function GptTest() {\n  var _useState = (0, _react.useState)([]),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    imagesData = _useState2[0],\n    setImagesData = _useState2[1];\n  var _useState3 = (0, _react.useState)(false),\n    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  var handleGenerate = function () {\n    var _ref = (0, _asyncToGenerator2.default)(function* () {\n      setLoading(true);\n      try {\n        var _JSON$parse;\n        var prompt = \"生成三个描述，每个描述用于图片生成。\";\n        var response = yield (0, _api.gptQuery)(prompt);\n        var descriptions = ((_JSON$parse = JSON.parse(response)) == null ? void 0 : _JSON$parse.response) || [];\n        var imagePromises = descriptions.map(function (desc) {\n          return (0, _api.generateImage)(desc.描述).then(function (url) {\n            return Object.assign({}, desc, {\n              imageUrl: url\n            });\n          });\n        });\n        var generatedImages = yield Promise.all(imagePromises);\n        setImagesData(generatedImages);\n      } catch (error) {\n        _reactNative.Alert.alert('错误', error.message || '生成失败');\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function handleGenerate() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return (0, _jsxRuntime.jsxs)(_reactNative.View, {\n    style: styles.container,\n    children: [(0, _jsxRuntime.jsx)(_reactNative.Button, {\n      title: loading ? '处理中...' : '生成图片和描述',\n      onPress: handleGenerate,\n      disabled: loading\n    }), (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {\n      contentContainerStyle: styles.scrollContainer,\n      children: imagesData.map(function (item, index) {\n        return (0, _jsxRuntime.jsxs)(_reactNative.View, {\n          style: styles.card,\n          children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {\n            source: {\n              uri: item.imageUrl\n            },\n            style: styles.image,\n            resizeMode: \"contain\"\n          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {\n            style: styles.description,\n            children: item.描述\n          })]\n        }, index);\n      })\n    })]\n  });\n};\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: '#f5f5f5'\n  },\n  scrollContainer: {\n    alignItems: 'center',\n    paddingVertical: 16\n  },\n  card: {\n    marginBottom: 20,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: '#ccc',\n    borderRadius: 8,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    width: '90%'\n  },\n  image: {\n    width: '100%',\n    height: 200,\n    borderRadius: 8,\n    marginBottom: 12\n  },\n  description: {\n    fontSize: 14,\n    color: '#333',\n    textAlign: 'center'\n  }\n});\nvar _default = exports.default = GptTest;","map":{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_api","_jsxRuntime","_this","_jsxFileName","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","GptTest","_useState","useState","_useState2","_slicedToArray2","imagesData","setImagesData","_useState3","_useState4","loading","setLoading","handleGenerate","_ref","_asyncToGenerator2","_JSON$parse","prompt","response","gptQuery","descriptions","JSON","parse","imagePromises","map","desc","generateImage","描述","then","url","assign","imageUrl","generatedImages","Promise","all","error","Alert","alert","message","apply","arguments","jsxs","View","style","styles","container","children","jsx","Button","title","onPress","disabled","ScrollView","contentContainerStyle","scrollContainer","item","index","card","Image","source","uri","image","resizeMode","Text","description","StyleSheet","create","flex","padding","backgroundColor","alignItems","paddingVertical","marginBottom","borderWidth","borderColor","borderRadius","width","height","fontSize","color","textAlign","_default","exports"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/SourceCode/Components/GptTest/index.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Button, StyleSheet, Text, ScrollView, Image, Alert } from 'react-native';\nimport { gptQuery, generateImage } from '../../utils/api'; // 引入封装的接口\n\nconst GptTest = () => {\n    const [imagesData, setImagesData] = useState([]); // 图片和描述的数据数组\n    const [loading, setLoading] = useState(false); // 加载状态\n    const handleGenerate = async () => {\n        setLoading(true);\n        try {\n            // 调用 GPT 接口生成描述\n            const prompt = \"生成三个描述，每个描述用于图片生成。\";\n            const response = await gptQuery(prompt);\n            const descriptions = JSON.parse(response)?.response || [];\n\n            // 调用图片生成接口为每个描述生成图片\n            const imagePromises = descriptions.map((desc) =>\n                generateImage(desc.描述).then((url) => ({ ...desc, imageUrl: url }))\n            );\n            const generatedImages = await Promise.all(imagePromises);\n\n            setImagesData(generatedImages);\n        } catch (error) {\n            Alert.alert('错误', error.message || '生成失败');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <View style={styles.container}>\n            <Button\n                title={loading ? '处理中...' : '生成图片和描述'}\n                onPress={handleGenerate}\n                disabled={loading}\n            />\n            <ScrollView contentContainerStyle={styles.scrollContainer}>\n                {imagesData.map((item, index) => (\n                    <View key={index} style={styles.card}>\n                        <Image source={{ uri: item.imageUrl }} style={styles.image} resizeMode=\"contain\" />\n                        <Text style={styles.description}>{item.描述}</Text>\n                    </View>\n                ))}\n            </ScrollView>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        padding: 16,\n        backgroundColor: '#f5f5f5',\n    },\n    scrollContainer: {\n        alignItems: 'center',\n        paddingVertical: 16,\n    },\n    card: {\n        marginBottom: 20,\n        padding: 16,\n        borderWidth: 1,\n        borderColor: '#ccc',\n        borderRadius: 8,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        width: '90%',\n    },\n    image: {\n        width: '100%',\n        height: 200,\n        borderRadius: 8,\n        marginBottom: 12,\n    },\n    description: {\n        fontSize: 14,\n        color: '#333',\n        textAlign: 'center',\n    },\n});\n\nexport default GptTest;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}