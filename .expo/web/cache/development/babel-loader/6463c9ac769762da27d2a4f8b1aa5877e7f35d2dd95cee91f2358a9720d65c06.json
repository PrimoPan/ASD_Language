{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useAnimatedSensor = useAnimatedSensor;\nvar _react = require(\"react\");\nvar _core = require(\"../core.js\");\nvar _commonTypes = require(\"../commonTypes.js\");\nvar _threads = require(\"../threads.js\");\nfunction eulerToQuaternion(pitch, roll, yaw) {\n  'worklet';\n\n  var c1 = Math.cos(pitch / 2);\n  var s1 = Math.sin(pitch / 2);\n  var c2 = Math.cos(roll / 2);\n  var s2 = Math.sin(roll / 2);\n  var c3 = Math.cos(yaw / 2);\n  var s3 = Math.sin(yaw / 2);\n  return [s1 * c2 * c3 - c1 * s2 * s3, c1 * s2 * c3 + s1 * c2 * s3, c1 * c2 * s3 + s1 * s2 * c3, c1 * c2 * c3 - s1 * s2 * s3];\n}\nfunction adjustRotationToInterfaceOrientation(data) {\n  'worklet';\n\n  var interfaceOrientation = data.interfaceOrientation,\n    pitch = data.pitch,\n    roll = data.roll,\n    yaw = data.yaw;\n  if (interfaceOrientation === _commonTypes.InterfaceOrientation.ROTATION_90) {\n    data.pitch = roll;\n    data.roll = -pitch;\n    data.yaw = yaw - Math.PI / 2;\n  } else if (interfaceOrientation === _commonTypes.InterfaceOrientation.ROTATION_270) {\n    data.pitch = -roll;\n    data.roll = pitch;\n    data.yaw = yaw + Math.PI / 2;\n  } else if (interfaceOrientation === _commonTypes.InterfaceOrientation.ROTATION_180) {\n    data.pitch *= -1;\n    data.roll *= -1;\n    data.yaw *= -1;\n  }\n  var q = eulerToQuaternion(data.pitch, data.roll, data.yaw);\n  data.qx = q[0];\n  data.qy = q[1];\n  data.qz = q[2];\n  data.qw = q[3];\n  return data;\n}\nfunction adjustVectorToInterfaceOrientation(data) {\n  'worklet';\n\n  var interfaceOrientation = data.interfaceOrientation,\n    x = data.x,\n    y = data.y;\n  if (interfaceOrientation === _commonTypes.InterfaceOrientation.ROTATION_90) {\n    data.x = -y;\n    data.y = x;\n  } else if (interfaceOrientation === _commonTypes.InterfaceOrientation.ROTATION_270) {\n    data.x = y;\n    data.y = -x;\n  } else if (interfaceOrientation === _commonTypes.InterfaceOrientation.ROTATION_180) {\n    data.x *= -1;\n    data.y *= -1;\n  }\n  return data;\n}\nfunction useAnimatedSensor(sensorType, userConfig) {\n  var _userConfigRef$curren, _userConfigRef$curren2, _userConfigRef$curren3;\n  var userConfigRef = (0, _react.useRef)(userConfig);\n  var hasConfigChanged = ((_userConfigRef$curren = userConfigRef.current) == null ? void 0 : _userConfigRef$curren.adjustToInterfaceOrientation) !== (userConfig == null ? void 0 : userConfig.adjustToInterfaceOrientation) || ((_userConfigRef$curren2 = userConfigRef.current) == null ? void 0 : _userConfigRef$curren2.interval) !== (userConfig == null ? void 0 : userConfig.interval) || ((_userConfigRef$curren3 = userConfigRef.current) == null ? void 0 : _userConfigRef$curren3.iosReferenceFrame) !== (userConfig == null ? void 0 : userConfig.iosReferenceFrame);\n  if (hasConfigChanged) {\n    userConfigRef.current = Object.assign({}, userConfig);\n  }\n  var config = (0, _react.useMemo)(function () {\n    return Object.assign({\n      interval: 'auto',\n      adjustToInterfaceOrientation: true,\n      iosReferenceFrame: _commonTypes.IOSReferenceFrame.Auto\n    }, userConfigRef.current);\n  }, [userConfigRef.current]);\n  var ref = (0, _react.useRef)({\n    sensor: (0, _core.initializeSensor)(sensorType, config),\n    unregister: function unregister() {},\n    isAvailable: false,\n    config: config\n  });\n  (0, _react.useEffect)(function () {\n    ref.current = {\n      sensor: (0, _core.initializeSensor)(sensorType, config),\n      unregister: function unregister() {},\n      isAvailable: false,\n      config: config\n    };\n    var sensorData = ref.current.sensor;\n    var adjustToInterfaceOrientation = ref.current.config.adjustToInterfaceOrientation;\n    var id = (0, _core.registerSensor)(sensorType, config, function (data) {\n      'worklet';\n\n      if (adjustToInterfaceOrientation) {\n        if (sensorType === _commonTypes.SensorType.ROTATION) {\n          data = adjustRotationToInterfaceOrientation(data);\n        } else {\n          data = adjustVectorToInterfaceOrientation(data);\n        }\n      }\n      sensorData.value = data;\n      (0, _threads.callMicrotasks)();\n    });\n    if (id !== -1) {\n      ref.current.unregister = function () {\n        return (0, _core.unregisterSensor)(id);\n      };\n      ref.current.isAvailable = true;\n    } else {\n      ref.current.unregister = function () {};\n      ref.current.isAvailable = false;\n    }\n    return function () {\n      ref.current.unregister();\n    };\n  }, [sensorType, config]);\n  return ref.current;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","useAnimatedSensor","_react","require","_core","_commonTypes","_threads","eulerToQuaternion","pitch","roll","yaw","c1","Math","cos","s1","sin","c2","s2","c3","s3","adjustRotationToInterfaceOrientation","data","interfaceOrientation","InterfaceOrientation","ROTATION_90","PI","ROTATION_270","ROTATION_180","q","qx","qy","qz","qw","adjustVectorToInterfaceOrientation","x","y","sensorType","userConfig","_userConfigRef$curren","_userConfigRef$curren2","_userConfigRef$curren3","userConfigRef","useRef","hasConfigChanged","current","adjustToInterfaceOrientation","interval","iosReferenceFrame","assign","config","useMemo","IOSReferenceFrame","Auto","ref","sensor","initializeSensor","unregister","isAvailable","useEffect","sensorData","id","registerSensor","SensorType","ROTATION","callMicrotasks","unregisterSensor"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-reanimated/src/hook/useAnimatedSensor.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useMemo, useRef } from 'react';\nimport { initializeSensor, registerSensor, unregisterSensor } from '../core';\nimport type {\n  SensorConfig,\n  AnimatedSensor,\n  Value3D,\n  ValueRotation,\n} from '../commonTypes';\nimport {\n  SensorType,\n  IOSReferenceFrame,\n  InterfaceOrientation,\n} from '../commonTypes';\nimport { callMicrotasks } from '../threads';\n\n// euler angles are in order ZXY, z = yaw, x = pitch, y = roll\n// https://github.com/mrdoob/three.js/blob/dev/src/math/Quaternion.js#L237\nfunction eulerToQuaternion(pitch: number, roll: number, yaw: number) {\n  'worklet';\n  const c1 = Math.cos(pitch / 2);\n  const s1 = Math.sin(pitch / 2);\n  const c2 = Math.cos(roll / 2);\n  const s2 = Math.sin(roll / 2);\n  const c3 = Math.cos(yaw / 2);\n  const s3 = Math.sin(yaw / 2);\n\n  return [\n    s1 * c2 * c3 - c1 * s2 * s3,\n    c1 * s2 * c3 + s1 * c2 * s3,\n    c1 * c2 * s3 + s1 * s2 * c3,\n    c1 * c2 * c3 - s1 * s2 * s3,\n  ];\n}\n\nfunction adjustRotationToInterfaceOrientation(data: ValueRotation) {\n  'worklet';\n  const { interfaceOrientation, pitch, roll, yaw } = data;\n  if (interfaceOrientation === InterfaceOrientation.ROTATION_90) {\n    data.pitch = roll;\n    data.roll = -pitch;\n    data.yaw = yaw - Math.PI / 2;\n  } else if (interfaceOrientation === InterfaceOrientation.ROTATION_270) {\n    data.pitch = -roll;\n    data.roll = pitch;\n    data.yaw = yaw + Math.PI / 2;\n  } else if (interfaceOrientation === InterfaceOrientation.ROTATION_180) {\n    data.pitch *= -1;\n    data.roll *= -1;\n    data.yaw *= -1;\n  }\n\n  const q = eulerToQuaternion(data.pitch, data.roll, data.yaw);\n  data.qx = q[0];\n  data.qy = q[1];\n  data.qz = q[2];\n  data.qw = q[3];\n  return data;\n}\n\nfunction adjustVectorToInterfaceOrientation(data: Value3D) {\n  'worklet';\n  const { interfaceOrientation, x, y } = data;\n  if (interfaceOrientation === InterfaceOrientation.ROTATION_90) {\n    data.x = -y;\n    data.y = x;\n  } else if (interfaceOrientation === InterfaceOrientation.ROTATION_270) {\n    data.x = y;\n    data.y = -x;\n  } else if (interfaceOrientation === InterfaceOrientation.ROTATION_180) {\n    data.x *= -1;\n    data.y *= -1;\n  }\n  return data;\n}\n\n/**\n * Lets you create animations based on data from the device's sensors.\n *\n * @param sensorType - Type of the sensor to use. Configured with\n *   {@link SensorType} enum.\n * @param config - The sensor configuration - {@link SensorConfig}.\n * @returns An object containing the sensor measurements [shared\n *   value](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#shared-value)\n *   and a function to unregister the sensor\n * @see https://docs.swmansion.com/react-native-reanimated/docs/device/useAnimatedSensor\n */\nexport function useAnimatedSensor(\n  sensorType: SensorType.ROTATION,\n  userConfig?: Partial<SensorConfig>\n): AnimatedSensor<ValueRotation>;\nexport function useAnimatedSensor(\n  sensorType: Exclude<SensorType, SensorType.ROTATION>,\n  userConfig?: Partial<SensorConfig>\n): AnimatedSensor<Value3D>;\nexport function useAnimatedSensor(\n  sensorType: SensorType,\n  userConfig?: Partial<SensorConfig>\n): AnimatedSensor<ValueRotation> | AnimatedSensor<Value3D> {\n  const userConfigRef = useRef(userConfig);\n\n  const hasConfigChanged =\n    userConfigRef.current?.adjustToInterfaceOrientation !==\n      userConfig?.adjustToInterfaceOrientation ||\n    userConfigRef.current?.interval !== userConfig?.interval ||\n    userConfigRef.current?.iosReferenceFrame !== userConfig?.iosReferenceFrame;\n\n  if (hasConfigChanged) {\n    userConfigRef.current = { ...userConfig };\n  }\n\n  const config: SensorConfig = useMemo(\n    () => ({\n      interval: 'auto',\n      adjustToInterfaceOrientation: true,\n      iosReferenceFrame: IOSReferenceFrame.Auto,\n      ...userConfigRef.current,\n    }),\n    [userConfigRef.current]\n  );\n\n  const ref = useRef<AnimatedSensor<Value3D | ValueRotation>>({\n    sensor: initializeSensor(sensorType, config),\n    unregister: () => {\n      // NOOP\n    },\n    isAvailable: false,\n    config,\n  });\n\n  useEffect(() => {\n    ref.current = {\n      sensor: initializeSensor(sensorType, config),\n      unregister: () => {\n        // NOOP\n      },\n      isAvailable: false,\n      config,\n    };\n\n    const sensorData = ref.current.sensor;\n    const adjustToInterfaceOrientation =\n      ref.current.config.adjustToInterfaceOrientation;\n\n    const id = registerSensor(sensorType, config, (data) => {\n      'worklet';\n      if (adjustToInterfaceOrientation) {\n        if (sensorType === SensorType.ROTATION) {\n          data = adjustRotationToInterfaceOrientation(data as ValueRotation);\n        } else {\n          data = adjustVectorToInterfaceOrientation(data as Value3D);\n        }\n      }\n      sensorData.value = data;\n      callMicrotasks();\n    });\n\n    if (id !== -1) {\n      // if sensor is available\n      ref.current.unregister = () => unregisterSensor(id);\n      ref.current.isAvailable = true;\n    } else {\n      // if sensor is unavailable\n      ref.current.unregister = () => {\n        // NOOP\n      };\n      ref.current.isAvailable = false;\n    }\n\n    return () => {\n      ref.current.unregister();\n    };\n  }, [sensorType, config]);\n\n  return ref.current as AnimatedSensor<ValueRotation> | AnimatedSensor<Value3D>;\n}\n"],"mappings":"AAAA,YAAY;;AAAAA,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,KAAA;AAAA;AAAAD,OAAA,CAAAE,iBAAA,GAAAA,iBAAA;AACZ,IAAAC,MAAA,GAAAC,OAAA;AACA,IAAAC,KAAA,GAAAD,OAAA;AAOA,IAAAE,YAAA,GAAAF,OAAA;AAKA,IAAAG,QAAA,GAAAH,OAAA;AAIA,SAASI,iBAAiBA,CAACC,KAAa,EAAEC,IAAY,EAAEC,GAAW,EAAE;EACnE,SAAS;;EACT,IAAMC,EAAE,GAAGC,IAAI,CAACC,GAAG,CAACL,KAAK,GAAG,CAAC,CAAC;EAC9B,IAAMM,EAAE,GAAGF,IAAI,CAACG,GAAG,CAACP,KAAK,GAAG,CAAC,CAAC;EAC9B,IAAMQ,EAAE,GAAGJ,IAAI,CAACC,GAAG,CAACJ,IAAI,GAAG,CAAC,CAAC;EAC7B,IAAMQ,EAAE,GAAGL,IAAI,CAACG,GAAG,CAACN,IAAI,GAAG,CAAC,CAAC;EAC7B,IAAMS,EAAE,GAAGN,IAAI,CAACC,GAAG,CAACH,GAAG,GAAG,CAAC,CAAC;EAC5B,IAAMS,EAAE,GAAGP,IAAI,CAACG,GAAG,CAACL,GAAG,GAAG,CAAC,CAAC;EAE5B,OAAO,CACLI,EAAE,GAAGE,EAAE,GAAGE,EAAE,GAAGP,EAAE,GAAGM,EAAE,GAAGE,EAAE,EAC3BR,EAAE,GAAGM,EAAE,GAAGC,EAAE,GAAGJ,EAAE,GAAGE,EAAE,GAAGG,EAAE,EAC3BR,EAAE,GAAGK,EAAE,GAAGG,EAAE,GAAGL,EAAE,GAAGG,EAAE,GAAGC,EAAE,EAC3BP,EAAE,GAAGK,EAAE,GAAGE,EAAE,GAAGJ,EAAE,GAAGG,EAAE,GAAGE,EAAE,CAC5B;AACH;AAEA,SAASC,oCAAoCA,CAACC,IAAmB,EAAE;EACjE,SAAS;;EACT,IAAQC,oBAAoB,GAAuBD,IAAI,CAA/CC,oBAAoB;IAAEd,KAAK,GAAgBa,IAAI,CAAzBb,KAAK;IAAEC,IAAI,GAAUY,IAAI,CAAlBZ,IAAI;IAAEC,GAAA,GAAQW,IAAI,CAAZX,GAAA;EAC3C,IAAIY,oBAAoB,KAAKC,iCAAoB,CAACC,WAAW,EAAE;IAC7DH,IAAI,CAACb,KAAK,GAAGC,IAAI;IACjBY,IAAI,CAACZ,IAAI,GAAG,CAACD,KAAK;IAClBa,IAAI,CAACX,GAAG,GAAGA,GAAG,GAAGE,IAAI,CAACa,EAAE,GAAG,CAAC;EAC9B,CAAC,MAAM,IAAIH,oBAAoB,KAAKC,iCAAoB,CAACG,YAAY,EAAE;IACrEL,IAAI,CAACb,KAAK,GAAG,CAACC,IAAI;IAClBY,IAAI,CAACZ,IAAI,GAAGD,KAAK;IACjBa,IAAI,CAACX,GAAG,GAAGA,GAAG,GAAGE,IAAI,CAACa,EAAE,GAAG,CAAC;EAC9B,CAAC,MAAM,IAAIH,oBAAoB,KAAKC,iCAAoB,CAACI,YAAY,EAAE;IACrEN,IAAI,CAACb,KAAK,IAAI,CAAC,CAAC;IAChBa,IAAI,CAACZ,IAAI,IAAI,CAAC,CAAC;IACfY,IAAI,CAACX,GAAG,IAAI,CAAC,CAAC;EAChB;EAEA,IAAMkB,CAAC,GAAGrB,iBAAiB,CAACc,IAAI,CAACb,KAAK,EAAEa,IAAI,CAACZ,IAAI,EAAEY,IAAI,CAACX,GAAG,CAAC;EAC5DW,IAAI,CAACQ,EAAE,GAAGD,CAAC,CAAC,CAAC,CAAC;EACdP,IAAI,CAACS,EAAE,GAAGF,CAAC,CAAC,CAAC,CAAC;EACdP,IAAI,CAACU,EAAE,GAAGH,CAAC,CAAC,CAAC,CAAC;EACdP,IAAI,CAACW,EAAE,GAAGJ,CAAC,CAAC,CAAC,CAAC;EACd,OAAOP,IAAI;AACb;AAEA,SAASY,kCAAkCA,CAACZ,IAAa,EAAE;EACzD,SAAS;;EACT,IAAQC,oBAAoB,GAAWD,IAAI,CAAnCC,oBAAoB;IAAEY,CAAC,GAAQb,IAAI,CAAba,CAAC;IAAEC,CAAA,GAAMd,IAAI,CAAVc,CAAA;EACjC,IAAIb,oBAAoB,KAAKC,iCAAoB,CAACC,WAAW,EAAE;IAC7DH,IAAI,CAACa,CAAC,GAAG,CAACC,CAAC;IACXd,IAAI,CAACc,CAAC,GAAGD,CAAC;EACZ,CAAC,MAAM,IAAIZ,oBAAoB,KAAKC,iCAAoB,CAACG,YAAY,EAAE;IACrEL,IAAI,CAACa,CAAC,GAAGC,CAAC;IACVd,IAAI,CAACc,CAAC,GAAG,CAACD,CAAC;EACb,CAAC,MAAM,IAAIZ,oBAAoB,KAAKC,iCAAoB,CAACI,YAAY,EAAE;IACrEN,IAAI,CAACa,CAAC,IAAI,CAAC,CAAC;IACZb,IAAI,CAACc,CAAC,IAAI,CAAC,CAAC;EACd;EACA,OAAOd,IAAI;AACb;AAqBO,SAASpB,iBAAiBA,CAC/BmC,UAAsB,EACtBC,UAAkC,EACuB;EAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;EACzD,IAAMC,aAAa,GAAG,IAAAC,aAAM,EAACL,UAAU,CAAC;EAExC,IAAMM,gBAAgB,GACpB,EAAAL,qBAAA,GAAAG,aAAa,CAACG,OAAO,qBAArBN,qBAAA,CAAuBO,4BAA4B,OACjDR,UAAU,oBAAVA,UAAU,CAAEQ,4BAA4B,KAC1C,EAAAN,sBAAA,GAAAE,aAAa,CAACG,OAAO,qBAArBL,sBAAA,CAAuBO,QAAQ,OAAKT,UAAU,oBAAVA,UAAU,CAAES,QAAQ,KACxD,EAAAN,sBAAA,GAAAC,aAAa,CAACG,OAAO,qBAArBJ,sBAAA,CAAuBO,iBAAiB,OAAKV,UAAU,oBAAVA,UAAU,CAAEU,iBAAiB;EAE5E,IAAIJ,gBAAgB,EAAE;IACpBF,aAAa,CAACG,OAAO,GAAA/C,MAAA,CAAAmD,MAAA,KAAQX,UAAA,CAAY;EAC3C;EAEA,IAAMY,MAAoB,GAAG,IAAAC,cAAO,EAClC;IAAA,OAAArD,MAAA,CAAAmD,MAAA;MACEF,QAAQ,EAAE,MAAM;MAChBD,4BAA4B,EAAE,IAAI;MAClCE,iBAAiB,EAAEI,8BAAiB,CAACC;IAAI,GACtCX,aAAa,CAACG,OAAA;EAAA,CACjB,EACF,CAACH,aAAa,CAACG,OAAO,CACxB,CAAC;EAED,IAAMS,GAAG,GAAG,IAAAX,aAAM,EAA0C;IAC1DY,MAAM,EAAE,IAAAC,sBAAgB,EAACnB,UAAU,EAAEa,MAAM,CAAC;IAC5CO,UAAU,EAAE,SAAZA,UAAUA,CAAA,EAAQ,CAChB,CACD;IACDC,WAAW,EAAE,KAAK;IAClBR,MAAA,EAAAA;EACF,CAAC,CAAC;EAEF,IAAAS,gBAAS,EAAC,YAAM;IACdL,GAAG,CAACT,OAAO,GAAG;MACZU,MAAM,EAAE,IAAAC,sBAAgB,EAACnB,UAAU,EAAEa,MAAM,CAAC;MAC5CO,UAAU,EAAE,SAAZA,UAAUA,CAAA,EAAQ,CAChB,CACD;MACDC,WAAW,EAAE,KAAK;MAClBR,MAAA,EAAAA;IACF,CAAC;IAED,IAAMU,UAAU,GAAGN,GAAG,CAACT,OAAO,CAACU,MAAM;IACrC,IAAMT,4BAA4B,GAChCQ,GAAG,CAACT,OAAO,CAACK,MAAM,CAACJ,4BAA4B;IAEjD,IAAMe,EAAE,GAAG,IAAAC,oBAAc,EAACzB,UAAU,EAAEa,MAAM,EAAG,UAAA5B,IAAI,EAAK;MACtD,SAAS;;MACT,IAAIwB,4BAA4B,EAAE;QAChC,IAAIT,UAAU,KAAK0B,uBAAU,CAACC,QAAQ,EAAE;UACtC1C,IAAI,GAAGD,oCAAoC,CAACC,IAAqB,CAAC;QACpE,CAAC,MAAM;UACLA,IAAI,GAAGY,kCAAkC,CAACZ,IAAe,CAAC;QAC5D;MACF;MACAsC,UAAU,CAAC3D,KAAK,GAAGqB,IAAI;MACvB,IAAA2C,uBAAc,EAAC,CAAC;IAClB,CAAC,CAAC;IAEF,IAAIJ,EAAE,KAAK,CAAC,CAAC,EAAE;MAEbP,GAAG,CAACT,OAAO,CAACY,UAAU,GAAG;QAAA,OAAM,IAAAS,sBAAgB,EAACL,EAAE,CAAC;MAAA;MACnDP,GAAG,CAACT,OAAO,CAACa,WAAW,GAAG,IAAI;IAChC,CAAC,MAAM;MAELJ,GAAG,CAACT,OAAO,CAACY,UAAU,GAAG,YAAM,CAC7B,CACD;MACDH,GAAG,CAACT,OAAO,CAACa,WAAW,GAAG,KAAK;IACjC;IAEA,OAAO,YAAM;MACXJ,GAAG,CAACT,OAAO,CAACY,UAAU,CAAC,CAAC;IAC1B,CAAC;EACH,CAAC,EAAE,CAACpB,UAAU,EAAEa,MAAM,CAAC,CAAC;EAExB,OAAOI,GAAG,CAACT,OAAO;AACpB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}