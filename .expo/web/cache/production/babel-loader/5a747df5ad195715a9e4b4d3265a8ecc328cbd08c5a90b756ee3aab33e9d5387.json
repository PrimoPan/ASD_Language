{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=Pressable;var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _react=_interopRequireWildcard(require(\"react\"));var _gestureObjects=require(\"../../handlers/gestures/gestureObjects\");var _GestureDetector=require(\"../../handlers/gestures/GestureDetector\");var _reactNative=require(\"react-native\");var _GestureHandlerButton=_interopRequireDefault(require(\"../GestureHandlerButton\"));var _utils=require(\"./utils\");var _PressabilityDebugView=require(\"../../handlers/PressabilityDebugView\");var _utils2=require(\"../../utils\");var _excluded=[\"testOnly_pressed\",\"hitSlop\",\"pressRetentionOffset\",\"delayHoverIn\",\"onHoverIn\",\"delayHoverOut\",\"onHoverOut\",\"delayLongPress\",\"unstable_pressDelay\",\"onPress\",\"onPressIn\",\"onPressOut\",\"onLongPress\",\"style\",\"children\",\"android_disableSound\",\"android_ripple\",\"disabled\"];function _getRequireWildcardCache(e){if(\"function\"!=typeof WeakMap)return null;var r=new WeakMap(),t=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r;})(e);}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(\"default\"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}var DEFAULT_LONG_PRESS_DURATION=500;function Pressable(props){var _android_ripple$color,_android_ripple$radiu;var testOnly_pressed=props.testOnly_pressed,hitSlop=props.hitSlop,pressRetentionOffset=props.pressRetentionOffset,delayHoverIn=props.delayHoverIn,onHoverIn=props.onHoverIn,delayHoverOut=props.delayHoverOut,onHoverOut=props.onHoverOut,delayLongPress=props.delayLongPress,unstable_pressDelay=props.unstable_pressDelay,onPress=props.onPress,onPressIn=props.onPressIn,onPressOut=props.onPressOut,onLongPress=props.onLongPress,style=props.style,children=props.children,android_disableSound=props.android_disableSound,android_ripple=props.android_ripple,disabled=props.disabled,remainingProps=(0,_objectWithoutProperties2.default)(props,_excluded);var _useState=(0,_react.useState)(testOnly_pressed!==null&&testOnly_pressed!==void 0?testOnly_pressed:false),_useState2=(0,_slicedToArray2.default)(_useState,2),pressedState=_useState2[0],setPressedState=_useState2[1];var pressableRef=(0,_react.useRef)(null);var isPressCallbackEnabled=(0,_react.useRef)(true);var hasPassedBoundsChecks=(0,_react.useRef)(false);var shouldPreventNativeEffects=(0,_react.useRef)(false);var normalizedHitSlop=(0,_react.useMemo)(function(){return typeof hitSlop==='number'?(0,_utils.numberAsInset)(hitSlop):hitSlop!==null&&hitSlop!==void 0?hitSlop:{};},[hitSlop]);var normalizedPressRetentionOffset=(0,_react.useMemo)(function(){return typeof pressRetentionOffset==='number'?(0,_utils.numberAsInset)(pressRetentionOffset):pressRetentionOffset!==null&&pressRetentionOffset!==void 0?pressRetentionOffset:{};},[pressRetentionOffset]);var hoverInTimeout=(0,_react.useRef)(null);var hoverOutTimeout=(0,_react.useRef)(null);var hoverGesture=(0,_react.useMemo)(function(){return _gestureObjects.GestureObjects.Hover().manualActivation(true).cancelsTouchesInView(false).onBegin(function(event){if(hoverOutTimeout.current){clearTimeout(hoverOutTimeout.current);}if(delayHoverIn){hoverInTimeout.current=setTimeout(function(){return onHoverIn===null||onHoverIn===void 0?void 0:onHoverIn((0,_utils.gestureToPressableEvent)(event));},delayHoverIn);return;}onHoverIn===null||onHoverIn===void 0?void 0:onHoverIn((0,_utils.gestureToPressableEvent)(event));}).onFinalize(function(event){if(hoverInTimeout.current){clearTimeout(hoverInTimeout.current);}if(delayHoverOut){hoverOutTimeout.current=setTimeout(function(){return onHoverOut===null||onHoverOut===void 0?void 0:onHoverOut((0,_utils.gestureToPressableEvent)(event));},delayHoverOut);return;}onHoverOut===null||onHoverOut===void 0?void 0:onHoverOut((0,_utils.gestureToPressableEvent)(event));});},[delayHoverIn,delayHoverOut,onHoverIn,onHoverOut]);var pressDelayTimeoutRef=(0,_react.useRef)(null);var isTouchPropagationAllowed=(0,_react.useRef)(false);var deferredEventPayload=(0,_react.useRef)(null);var pressInHandler=(0,_react.useCallback)(function(event){if(handlingOnTouchesDown.current){deferredEventPayload.current=event;}if(!isTouchPropagationAllowed.current){return;}deferredEventPayload.current=null;onPressIn===null||onPressIn===void 0?void 0:onPressIn(event);isPressCallbackEnabled.current=true;pressDelayTimeoutRef.current=null;setPressedState(true);},[onPressIn]);var pressOutHandler=(0,_react.useCallback)(function(event){if(!hasPassedBoundsChecks.current||event.nativeEvent.touches.length>event.nativeEvent.changedTouches.length){return;}if(unstable_pressDelay&&pressDelayTimeoutRef.current!==null){clearTimeout(pressDelayTimeoutRef.current);pressInHandler(event);}if(deferredEventPayload.current){onPressIn===null||onPressIn===void 0?void 0:onPressIn(deferredEventPayload.current);deferredEventPayload.current=null;}onPressOut===null||onPressOut===void 0?void 0:onPressOut(event);if(isPressCallbackEnabled.current){onPress===null||onPress===void 0?void 0:onPress(event);}if(longPressTimeoutRef.current){clearTimeout(longPressTimeoutRef.current);longPressTimeoutRef.current=null;}isTouchPropagationAllowed.current=false;hasPassedBoundsChecks.current=false;isPressCallbackEnabled.current=true;setPressedState(false);},[onPress,onPressIn,onPressOut,pressInHandler,unstable_pressDelay]);var handlingOnTouchesDown=(0,_react.useRef)(false);var onEndHandlingTouchesDown=(0,_react.useRef)(null);var cancelledMidPress=(0,_react.useRef)(false);var activateLongPress=(0,_react.useCallback)(function(event){if(!isTouchPropagationAllowed.current){return;}if(hasPassedBoundsChecks.current){onLongPress===null||onLongPress===void 0?void 0:onLongPress((0,_utils.gestureTouchToPressableEvent)(event));isPressCallbackEnabled.current=false;}if(longPressTimeoutRef.current){clearTimeout(longPressTimeoutRef.current);longPressTimeoutRef.current=null;}},[onLongPress]);var longPressTimeoutRef=(0,_react.useRef)(null);var longPressMinDuration=(delayLongPress!==null&&delayLongPress!==void 0?delayLongPress:DEFAULT_LONG_PRESS_DURATION)+(unstable_pressDelay!==null&&unstable_pressDelay!==void 0?unstable_pressDelay:0);var pressAndTouchGesture=(0,_react.useMemo)(function(){return _gestureObjects.GestureObjects.LongPress().minDuration(_utils2.INT32_MAX).maxDistance(_utils2.INT32_MAX).cancelsTouchesInView(false).onTouchesDown(function(event){var _pressableRef$current;handlingOnTouchesDown.current=true;(_pressableRef$current=pressableRef.current)===null||_pressableRef$current===void 0?void 0:_pressableRef$current.measure(function(_x,_y,width,height){var _onEndHandlingTouches;if(!(0,_utils.isTouchWithinInset)({width:width,height:height},normalizedHitSlop,event.changedTouches.at(-1))||hasPassedBoundsChecks.current||cancelledMidPress.current){cancelledMidPress.current=false;onEndHandlingTouchesDown.current=null;handlingOnTouchesDown.current=false;return;}hasPassedBoundsChecks.current=true;if(longPressTimeoutRef.current===null){longPressTimeoutRef.current=setTimeout(function(){return activateLongPress(event);},longPressMinDuration);}if(unstable_pressDelay){pressDelayTimeoutRef.current=setTimeout(function(){pressInHandler((0,_utils.gestureTouchToPressableEvent)(event));},unstable_pressDelay);}else{pressInHandler((0,_utils.gestureTouchToPressableEvent)(event));}(_onEndHandlingTouches=onEndHandlingTouchesDown.current)===null||_onEndHandlingTouches===void 0?void 0:_onEndHandlingTouches.call(onEndHandlingTouchesDown);onEndHandlingTouchesDown.current=null;handlingOnTouchesDown.current=false;});}).onTouchesUp(function(event){if(handlingOnTouchesDown.current){onEndHandlingTouchesDown.current=function(){return pressOutHandler((0,_utils.gestureTouchToPressableEvent)(event));};return;}if(deferredEventPayload.current!==null){shouldPreventNativeEffects.current=true;}pressOutHandler((0,_utils.gestureTouchToPressableEvent)(event));}).onTouchesCancelled(function(event){isPressCallbackEnabled.current=false;if(handlingOnTouchesDown.current){cancelledMidPress.current=true;onEndHandlingTouchesDown.current=function(){return pressOutHandler((0,_utils.gestureTouchToPressableEvent)(event));};return;}if(!hasPassedBoundsChecks.current||event.allTouches.length>event.changedTouches.length){return;}pressOutHandler((0,_utils.gestureTouchToPressableEvent)(event));});},[activateLongPress,longPressMinDuration,normalizedHitSlop,pressInHandler,pressOutHandler,unstable_pressDelay]);var buttonGesture=(0,_react.useMemo)(function(){return _gestureObjects.GestureObjects.Native().onBegin(function(){if(_reactNative.Platform.OS==='android'||_reactNative.Platform.OS==='macos'){isTouchPropagationAllowed.current=true;}}).onStart(function(){if(_reactNative.Platform.OS==='web'){isTouchPropagationAllowed.current=true;}if(_reactNative.Platform.OS!=='ios'){return;}if(deferredEventPayload.current){isTouchPropagationAllowed.current=true;if(hasPassedBoundsChecks.current){pressInHandler(deferredEventPayload.current);deferredEventPayload.current=null;}else{pressOutHandler(deferredEventPayload.current);isTouchPropagationAllowed.current=false;}return;}if(hasPassedBoundsChecks.current){isTouchPropagationAllowed.current=true;return;}if(shouldPreventNativeEffects.current){shouldPreventNativeEffects.current=false;return;}isTouchPropagationAllowed.current=true;});},[pressInHandler,pressOutHandler]);var appliedHitSlop=(0,_utils.addInsets)(normalizedHitSlop,normalizedPressRetentionOffset);var isPressableEnabled=disabled!==true;var gestures=[pressAndTouchGesture,hoverGesture,buttonGesture];for(var _gesture of gestures){_gesture.enabled(isPressableEnabled);_gesture.runOnJS(true);_gesture.hitSlop(appliedHitSlop);_gesture.shouldCancelWhenOutside(_reactNative.Platform.OS==='web'?false:true);}buttonGesture.hitSlop(normalizedHitSlop);var gesture=_gestureObjects.GestureObjects.Simultaneous.apply(_gestureObjects.GestureObjects,gestures);var defaultRippleColor=android_ripple?undefined:'transparent';var pointerStyle=_reactNative.Platform.OS==='web'?{cursor:'pointer'}:{};var styleProp=typeof style==='function'?style({pressed:pressedState}):style;var childrenProp=typeof children==='function'?children({pressed:pressedState}):children;return _react.default.createElement(_GestureDetector.GestureDetector,{gesture:gesture},_react.default.createElement(_GestureHandlerButton.default,_extends({},remainingProps,{ref:pressableRef,hitSlop:appliedHitSlop,enabled:isPressableEnabled,touchSoundDisabled:android_disableSound!==null&&android_disableSound!==void 0?android_disableSound:undefined,rippleColor:(0,_reactNative.processColor)((_android_ripple$color=android_ripple===null||android_ripple===void 0?void 0:android_ripple.color)!==null&&_android_ripple$color!==void 0?_android_ripple$color:defaultRippleColor),rippleRadius:(_android_ripple$radiu=android_ripple===null||android_ripple===void 0?void 0:android_ripple.radius)!==null&&_android_ripple$radiu!==void 0?_android_ripple$radiu:undefined,style:[pointerStyle,styleProp]}),childrenProp,__DEV__?_react.default.createElement(_PressabilityDebugView.PressabilityDebugView,{color:\"red\",hitSlop:normalizedHitSlop}):null));}","map":{"version":3,"names":["_react","_interopRequireWildcard","require","_gestureObjects","_GestureDetector","_reactNative","_GestureHandlerButton","_interopRequireDefault","_utils","_PressabilityDebugView","_utils2","_excluded","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","DEFAULT_LONG_PRESS_DURATION","Pressable","props","_android_ripple$color","_android_ripple$radiu","testOnly_pressed","hitSlop","pressRetentionOffset","delayHoverIn","onHoverIn","delayHoverOut","onHoverOut","delayLongPress","unstable_pressDelay","onPress","onPressIn","onPressOut","onLongPress","style","children","android_disableSound","android_ripple","disabled","remainingProps","_objectWithoutProperties2","_useState","useState","_useState2","_slicedToArray2","pressedState","setPressedState","pressableRef","useRef","isPressCallbackEnabled","hasPassedBoundsChecks","shouldPreventNativeEffects","normalizedHitSlop","useMemo","numberAsInset","normalizedPressRetentionOffset","hoverInTimeout","hoverOutTimeout","hoverGesture","Gesture","Hover","manualActivation","cancelsTouchesInView","onBegin","event","current","clearTimeout","setTimeout","gestureToPressableEvent","onFinalize","pressDelayTimeoutRef","isTouchPropagationAllowed","deferredEventPayload","pressInHandler","useCallback","handlingOnTouchesDown","pressOutHandler","nativeEvent","touches","length","changedTouches","longPressTimeoutRef","onEndHandlingTouchesDown","cancelledMidPress","activateLongPress","gestureTouchToPressableEvent","longPressMinDuration","pressAndTouchGesture","LongPress","minDuration","INT32_MAX","maxDistance","onTouchesDown","_pressableRef$current","measure","_x","_y","width","height","_onEndHandlingTouches","isTouchWithinInset","at","onTouchesUp","onTouchesCancelled","allTouches","buttonGesture","Native","Platform","OS","onStart","appliedHitSlop","addInsets","isPressableEnabled","gestures","gesture","enabled","runOnJS","shouldCancelWhenOutside","Simultaneous","apply","defaultRippleColor","undefined","pointerStyle","cursor","styleProp","pressed","childrenProp","React","createElement","GestureDetector","NativeButton","_extends","ref","touchSoundDisabled","rippleColor","processColor","color","rippleRadius","radius","__DEV__","PressabilityDebugView"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-gesture-handler/lib/module/components/Pressable/Pressable.tsx"],"sourcesContent":["import React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { GestureObjects as Gesture } from '../../handlers/gestures/gestureObjects';\nimport { GestureDetector } from '../../handlers/gestures/GestureDetector';\nimport { PressableEvent, PressableProps } from './PressableProps';\nimport {\n  Insets,\n  Platform,\n  StyleProp,\n  View,\n  ViewStyle,\n  processColor,\n} from 'react-native';\nimport NativeButton from '../GestureHandlerButton';\nimport {\n  numberAsInset,\n  gestureToPressableEvent,\n  isTouchWithinInset,\n  gestureTouchToPressableEvent,\n  addInsets,\n} from './utils';\nimport { PressabilityDebugView } from '../../handlers/PressabilityDebugView';\nimport { GestureTouchEvent } from '../../handlers/gestureHandlerCommon';\nimport { INT32_MAX } from '../../utils';\n\nconst DEFAULT_LONG_PRESS_DURATION = 500;\n\nexport default function Pressable(props: PressableProps) {\n  const {\n    testOnly_pressed,\n    hitSlop,\n    pressRetentionOffset,\n    delayHoverIn,\n    onHoverIn,\n    delayHoverOut,\n    onHoverOut,\n    delayLongPress,\n    unstable_pressDelay,\n    onPress,\n    onPressIn,\n    onPressOut,\n    onLongPress,\n    style,\n    children,\n    android_disableSound,\n    android_ripple,\n    disabled,\n    ...remainingProps\n  } = props;\n\n  const [pressedState, setPressedState] = useState(testOnly_pressed ?? false);\n\n  const pressableRef = useRef<View>(null);\n\n  // Disabled when onLongPress has been called\n  const isPressCallbackEnabled = useRef<boolean>(true);\n  const hasPassedBoundsChecks = useRef<boolean>(false);\n  const shouldPreventNativeEffects = useRef<boolean>(false);\n\n  const normalizedHitSlop: Insets = useMemo(\n    () =>\n      typeof hitSlop === 'number' ? numberAsInset(hitSlop) : hitSlop ?? {},\n    [hitSlop]\n  );\n\n  const normalizedPressRetentionOffset: Insets = useMemo(\n    () =>\n      typeof pressRetentionOffset === 'number'\n        ? numberAsInset(pressRetentionOffset)\n        : pressRetentionOffset ?? {},\n    [pressRetentionOffset]\n  );\n\n  const hoverInTimeout = useRef<number | null>(null);\n  const hoverOutTimeout = useRef<number | null>(null);\n\n  const hoverGesture = useMemo(\n    () =>\n      Gesture.Hover()\n        .manualActivation(true) // Stops Hover from blocking Native gesture activation on web\n        .cancelsTouchesInView(false)\n        .onBegin((event) => {\n          if (hoverOutTimeout.current) {\n            clearTimeout(hoverOutTimeout.current);\n          }\n          if (delayHoverIn) {\n            hoverInTimeout.current = setTimeout(\n              () => onHoverIn?.(gestureToPressableEvent(event)),\n              delayHoverIn\n            );\n            return;\n          }\n          onHoverIn?.(gestureToPressableEvent(event));\n        })\n        .onFinalize((event) => {\n          if (hoverInTimeout.current) {\n            clearTimeout(hoverInTimeout.current);\n          }\n          if (delayHoverOut) {\n            hoverOutTimeout.current = setTimeout(\n              () => onHoverOut?.(gestureToPressableEvent(event)),\n              delayHoverOut\n            );\n            return;\n          }\n          onHoverOut?.(gestureToPressableEvent(event));\n        }),\n    [delayHoverIn, delayHoverOut, onHoverIn, onHoverOut]\n  );\n\n  const pressDelayTimeoutRef = useRef<number | null>(null);\n  const isTouchPropagationAllowed = useRef<boolean>(false);\n\n  // iOS only: due to varying flow of gestures, events sometimes have to be saved for later use\n  const deferredEventPayload = useRef<PressableEvent | null>(null);\n\n  const pressInHandler = useCallback(\n    (event: PressableEvent) => {\n      if (handlingOnTouchesDown.current) {\n        deferredEventPayload.current = event;\n      }\n\n      if (!isTouchPropagationAllowed.current) {\n        return;\n      }\n\n      deferredEventPayload.current = null;\n\n      onPressIn?.(event);\n      isPressCallbackEnabled.current = true;\n      pressDelayTimeoutRef.current = null;\n      setPressedState(true);\n    },\n    [onPressIn]\n  );\n\n  const pressOutHandler = useCallback(\n    (event: PressableEvent) => {\n      if (\n        !hasPassedBoundsChecks.current ||\n        event.nativeEvent.touches.length >\n          event.nativeEvent.changedTouches.length\n      ) {\n        return;\n      }\n\n      if (unstable_pressDelay && pressDelayTimeoutRef.current !== null) {\n        // When delay is preemptively finished by lifting touches,\n        // we want to immediately activate it's effects - pressInHandler,\n        // even though we are located at the pressOutHandler\n        clearTimeout(pressDelayTimeoutRef.current);\n        pressInHandler(event);\n      }\n\n      if (deferredEventPayload.current) {\n        onPressIn?.(deferredEventPayload.current);\n        deferredEventPayload.current = null;\n      }\n\n      onPressOut?.(event);\n\n      if (isPressCallbackEnabled.current) {\n        onPress?.(event);\n      }\n\n      if (longPressTimeoutRef.current) {\n        clearTimeout(longPressTimeoutRef.current);\n        longPressTimeoutRef.current = null;\n      }\n\n      isTouchPropagationAllowed.current = false;\n      hasPassedBoundsChecks.current = false;\n      isPressCallbackEnabled.current = true;\n      setPressedState(false);\n    },\n    [onPress, onPressIn, onPressOut, pressInHandler, unstable_pressDelay]\n  );\n\n  const handlingOnTouchesDown = useRef<boolean>(false);\n  const onEndHandlingTouchesDown = useRef<(() => void) | null>(null);\n  const cancelledMidPress = useRef<boolean>(false);\n\n  const activateLongPress = useCallback(\n    (event: GestureTouchEvent) => {\n      if (!isTouchPropagationAllowed.current) {\n        return;\n      }\n\n      if (hasPassedBoundsChecks.current) {\n        onLongPress?.(gestureTouchToPressableEvent(event));\n        isPressCallbackEnabled.current = false;\n      }\n\n      if (longPressTimeoutRef.current) {\n        clearTimeout(longPressTimeoutRef.current);\n        longPressTimeoutRef.current = null;\n      }\n    },\n    [onLongPress]\n  );\n\n  const longPressTimeoutRef = useRef<number | null>(null);\n  const longPressMinDuration =\n    (delayLongPress ?? DEFAULT_LONG_PRESS_DURATION) +\n    (unstable_pressDelay ?? 0);\n\n  const pressAndTouchGesture = useMemo(\n    () =>\n      Gesture.LongPress()\n        .minDuration(INT32_MAX) // Stops long press from blocking native gesture\n        .maxDistance(INT32_MAX) // Stops long press from cancelling after set distance\n        .cancelsTouchesInView(false)\n        .onTouchesDown((event) => {\n          handlingOnTouchesDown.current = true;\n          pressableRef.current?.measure((_x, _y, width, height) => {\n            if (\n              !isTouchWithinInset(\n                {\n                  width,\n                  height,\n                },\n                normalizedHitSlop,\n                event.changedTouches.at(-1)\n              ) ||\n              hasPassedBoundsChecks.current ||\n              cancelledMidPress.current\n            ) {\n              cancelledMidPress.current = false;\n              onEndHandlingTouchesDown.current = null;\n              handlingOnTouchesDown.current = false;\n              return;\n            }\n\n            hasPassedBoundsChecks.current = true;\n\n            // In case of multiple touches, the first one starts long press gesture\n            if (longPressTimeoutRef.current === null) {\n              // Start long press gesture timer\n              longPressTimeoutRef.current = setTimeout(\n                () => activateLongPress(event),\n                longPressMinDuration\n              );\n            }\n\n            if (unstable_pressDelay) {\n              pressDelayTimeoutRef.current = setTimeout(() => {\n                pressInHandler(gestureTouchToPressableEvent(event));\n              }, unstable_pressDelay);\n            } else {\n              pressInHandler(gestureTouchToPressableEvent(event));\n            }\n\n            onEndHandlingTouchesDown.current?.();\n            onEndHandlingTouchesDown.current = null;\n            handlingOnTouchesDown.current = false;\n          });\n        })\n        .onTouchesUp((event) => {\n          if (handlingOnTouchesDown.current) {\n            onEndHandlingTouchesDown.current = () =>\n              pressOutHandler(gestureTouchToPressableEvent(event));\n            return;\n          }\n          // On iOS, short taps will make LongPress gesture call onTouchesUp before Native gesture calls onStart\n          // This variable ensures that onStart isn't detected as the first gesture since Pressable is pressed.\n          if (deferredEventPayload.current !== null) {\n            shouldPreventNativeEffects.current = true;\n          }\n          pressOutHandler(gestureTouchToPressableEvent(event));\n        })\n        .onTouchesCancelled((event) => {\n          isPressCallbackEnabled.current = false;\n\n          if (handlingOnTouchesDown.current) {\n            cancelledMidPress.current = true;\n            onEndHandlingTouchesDown.current = () =>\n              pressOutHandler(gestureTouchToPressableEvent(event));\n            return;\n          }\n\n          if (\n            !hasPassedBoundsChecks.current ||\n            event.allTouches.length > event.changedTouches.length\n          ) {\n            return;\n          }\n\n          pressOutHandler(gestureTouchToPressableEvent(event));\n        }),\n    [\n      activateLongPress,\n      longPressMinDuration,\n      normalizedHitSlop,\n      pressInHandler,\n      pressOutHandler,\n      unstable_pressDelay,\n    ]\n  );\n\n  // RNButton is placed inside ButtonGesture to enable Android's ripple and to capture non-propagating events\n  const buttonGesture = useMemo(\n    () =>\n      Gesture.Native()\n        .onBegin(() => {\n          // Android sets BEGAN state on press down\n          if (Platform.OS === 'android' || Platform.OS === 'macos') {\n            isTouchPropagationAllowed.current = true;\n          }\n        })\n        .onStart(() => {\n          if (Platform.OS === 'web') {\n            isTouchPropagationAllowed.current = true;\n          }\n\n          // iOS sets ACTIVE state on press down\n          if (Platform.OS !== 'ios') {\n            return;\n          }\n\n          if (deferredEventPayload.current) {\n            isTouchPropagationAllowed.current = true;\n\n            if (hasPassedBoundsChecks.current) {\n              pressInHandler(deferredEventPayload.current);\n              deferredEventPayload.current = null;\n            } else {\n              pressOutHandler(deferredEventPayload.current);\n              isTouchPropagationAllowed.current = false;\n            }\n\n            return;\n          }\n\n          if (hasPassedBoundsChecks.current) {\n            isTouchPropagationAllowed.current = true;\n            return;\n          }\n\n          if (shouldPreventNativeEffects.current) {\n            shouldPreventNativeEffects.current = false;\n            return;\n          }\n\n          isTouchPropagationAllowed.current = true;\n        }),\n    [pressInHandler, pressOutHandler]\n  );\n\n  const appliedHitSlop = addInsets(\n    normalizedHitSlop,\n    normalizedPressRetentionOffset\n  );\n\n  const isPressableEnabled = disabled !== true;\n\n  const gestures = [pressAndTouchGesture, hoverGesture, buttonGesture];\n\n  for (const gesture of gestures) {\n    gesture.enabled(isPressableEnabled);\n    gesture.runOnJS(true);\n    gesture.hitSlop(appliedHitSlop);\n    gesture.shouldCancelWhenOutside(Platform.OS === 'web' ? false : true);\n  }\n\n  // Uses different hitSlop, to activate on hitSlop area instead of pressRetentionOffset area\n  buttonGesture.hitSlop(normalizedHitSlop);\n\n  const gesture = Gesture.Simultaneous(...gestures);\n\n  const defaultRippleColor = android_ripple ? undefined : 'transparent';\n\n  // `cursor: 'pointer'` on `RNButton` crashes iOS\n  const pointerStyle: StyleProp<ViewStyle> =\n    Platform.OS === 'web' ? { cursor: 'pointer' } : {};\n\n  const styleProp =\n    typeof style === 'function' ? style({ pressed: pressedState }) : style;\n\n  const childrenProp =\n    typeof children === 'function'\n      ? children({ pressed: pressedState })\n      : children;\n\n  return (\n    <GestureDetector gesture={gesture}>\n      <NativeButton\n        {...remainingProps}\n        ref={pressableRef}\n        hitSlop={appliedHitSlop}\n        enabled={isPressableEnabled}\n        touchSoundDisabled={android_disableSound ?? undefined}\n        rippleColor={processColor(android_ripple?.color ?? defaultRippleColor)}\n        rippleRadius={android_ripple?.radius ?? undefined}\n        style={[pointerStyle, styleProp]}>\n        {childrenProp}\n        {__DEV__ ? (\n          <PressabilityDebugView color=\"red\" hitSlop={normalizedHitSlop} />\n        ) : null}\n      </NativeButton>\n    </GestureDetector>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}