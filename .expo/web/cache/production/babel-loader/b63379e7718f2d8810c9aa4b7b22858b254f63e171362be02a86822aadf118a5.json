{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.GestureDetector=void 0;var _react=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _findNodeHandle=_interopRequireDefault(require(\"../../../findNodeHandle\"));var _utils=require(\"../../../utils\");var _GestureHandlerRootViewContext=_interopRequireDefault(require(\"../../../GestureHandlerRootViewContext\"));var _useAnimatedGesture=require(\"./useAnimatedGesture\");var _attachHandlers=require(\"./attachHandlers\");var _needsToReattach=require(\"./needsToReattach\");var _dropHandlers=require(\"./dropHandlers\");var _utils2=require(\"./utils\");var _Wrap=require(\"./Wrap\");var _useDetectorUpdater=require(\"./useDetectorUpdater\");var _useViewRefHandler=require(\"./useViewRefHandler\");function _getRequireWildcardCache(e){if(\"function\"!=typeof WeakMap)return null;var r=new WeakMap(),t=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r;})(e);}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(\"default\"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n;}function propagateDetectorConfig(props,gesture){var keysToPropagate=['userSelect','enableContextMenu','touchAction'];for(var key of keysToPropagate){var value=props[key];if(value===undefined){continue;}for(var g of gesture.toGestureArray()){var config=g.config;config[key]=value;}}}var GestureDetector=exports.GestureDetector=function GestureDetector(props){var rootViewContext=(0,_react.useContext)(_GestureHandlerRootViewContext.default);if(__DEV__&&!rootViewContext&&!(0,_utils.isJestEnv)()&&_reactNative.Platform.OS!=='web'){throw new Error('GestureDetector must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.');}var gestureConfig=props.gesture;propagateDetectorConfig(props,gestureConfig);var gesturesToAttach=(0,_react.useMemo)(function(){return gestureConfig.toGestureArray();},[gestureConfig]);var shouldUseReanimated=gesturesToAttach.some(function(g){return g.shouldUseReanimated;});var webEventHandlersRef=(0,_utils2.useWebEventHandlers)();var state=(0,_react.useRef)({firstRender:true,viewRef:null,previousViewTag:-1,forceRebuildReanimatedEvent:false}).current;var preparedGesture=_react.default.useRef({attachedGestures:[],animatedEventHandler:null,animatedHandlers:null,shouldUseReanimated:shouldUseReanimated,isMounted:false}).current;var updateAttachedGestures=(0,_useDetectorUpdater.useDetectorUpdater)(state,preparedGesture,gesturesToAttach,gestureConfig,webEventHandlersRef);var refHandler=(0,_useViewRefHandler.useViewRefHandler)(state,updateAttachedGestures);var needsToRebuildReanimatedEvent=state.firstRender||state.forceRebuildReanimatedEvent||(0,_needsToReattach.needsToReattach)(preparedGesture,gesturesToAttach);state.forceRebuildReanimatedEvent=false;(0,_useAnimatedGesture.useAnimatedGesture)(preparedGesture,needsToRebuildReanimatedEvent);(0,_react.useLayoutEffect)(function(){var viewTag=(0,_findNodeHandle.default)(state.viewRef);preparedGesture.isMounted=true;(0,_attachHandlers.attachHandlers)({preparedGesture:preparedGesture,gestureConfig:gestureConfig,gesturesToAttach:gesturesToAttach,webEventHandlersRef:webEventHandlersRef,viewTag:viewTag});return function(){preparedGesture.isMounted=false;(0,_dropHandlers.dropHandlers)(preparedGesture);};},[]);(0,_react.useEffect)(function(){if(state.firstRender){state.firstRender=false;}else{updateAttachedGestures();}},[props]);if(shouldUseReanimated){return _react.default.createElement(_Wrap.AnimatedWrap,{ref:refHandler,onGestureHandlerEvent:preparedGesture.animatedEventHandler},props.children);}else{return _react.default.createElement(_Wrap.Wrap,{ref:refHandler},props.children);}};","map":{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_findNodeHandle","_interopRequireDefault","_utils","_GestureHandlerRootViewContext","_useAnimatedGesture","_attachHandlers","_needsToReattach","_dropHandlers","_utils2","_Wrap","_useDetectorUpdater","_useViewRefHandler","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","propagateDetectorConfig","props","gesture","keysToPropagate","key","value","undefined","g","toGestureArray","config","GestureDetector","exports","rootViewContext","useContext","GestureHandlerRootViewContext","__DEV__","isJestEnv","Platform","OS","Error","gestureConfig","gesturesToAttach","useMemo","shouldUseReanimated","some","webEventHandlersRef","useWebEventHandlers","state","useRef","firstRender","viewRef","previousViewTag","forceRebuildReanimatedEvent","current","preparedGesture","React","attachedGestures","animatedEventHandler","animatedHandlers","isMounted","updateAttachedGestures","useDetectorUpdater","refHandler","useViewRefHandler","needsToRebuildReanimatedEvent","needsToReattach","useAnimatedGesture","useLayoutEffect","viewTag","findNodeHandle","attachHandlers","dropHandlers","useEffect","createElement","AnimatedWrap","ref","onGestureHandlerEvent","children","Wrap"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/GestureDetector/index.tsx"],"sourcesContent":["/* eslint-disable react/no-unused-prop-types */\nimport React, {\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from 'react';\nimport { Platform } from 'react-native';\nimport findNodeHandle from '../../../findNodeHandle';\nimport { GestureType } from '../gesture';\nimport { UserSelect, TouchAction } from '../../gestureHandlerCommon';\nimport { ComposedGesture } from '../gestureComposition';\nimport { isJestEnv } from '../../../utils';\n\nimport GestureHandlerRootViewContext from '../../../GestureHandlerRootViewContext';\nimport { AttachedGestureState, GestureDetectorState } from './types';\nimport { useAnimatedGesture } from './useAnimatedGesture';\nimport { attachHandlers } from './attachHandlers';\nimport { needsToReattach } from './needsToReattach';\nimport { dropHandlers } from './dropHandlers';\nimport { useWebEventHandlers } from './utils';\nimport { Wrap, AnimatedWrap } from './Wrap';\nimport { useDetectorUpdater } from './useDetectorUpdater';\nimport { useViewRefHandler } from './useViewRefHandler';\n\nfunction propagateDetectorConfig(\n  props: GestureDetectorProps,\n  gesture: ComposedGesture | GestureType\n) {\n  const keysToPropagate: (keyof GestureDetectorProps)[] = [\n    'userSelect',\n    'enableContextMenu',\n    'touchAction',\n  ];\n\n  for (const key of keysToPropagate) {\n    const value = props[key];\n    if (value === undefined) {\n      continue;\n    }\n\n    for (const g of gesture.toGestureArray()) {\n      const config = g.config as { [key: string]: unknown };\n      config[key] = value;\n    }\n  }\n}\n\ninterface GestureDetectorProps {\n  children?: React.ReactNode;\n  /**\n   * A gesture object containing the configuration and callbacks.\n   * Can be any of:\n   * - base gestures (`Tap`, `Pan`, ...)\n   * - `ComposedGesture` (`Race`, `Simultaneous`, `Exclusive`)\n   */\n  gesture: ComposedGesture | GestureType;\n  /**\n   * #### Web only\n   * This parameter allows to specify which `userSelect` property should be applied to underlying view.\n   * Possible values are `\"none\" | \"auto\" | \"text\"`. Default value is set to `\"none\"`.\n   */\n  userSelect?: UserSelect;\n  /**\n   * #### Web only\n   * Specifies whether context menu should be enabled after clicking on underlying view with right mouse button.\n   * Default value is set to `false`.\n   */\n  enableContextMenu?: boolean;\n  /**\n   * #### Web only\n   * This parameter allows to specify which `touchAction` property should be applied to underlying view.\n   * Supports all CSS touch-action values (e.g. `\"none\"`, `\"pan-y\"`). Default value is set to `\"none\"`.\n   */\n  touchAction?: TouchAction;\n}\n\n/**\n * `GestureDetector` is responsible for creating and updating native gesture handlers based on the config of provided gesture.\n *\n * ### Props\n * - `gesture`\n * - `userSelect` (**Web only**)\n * - `enableContextMenu` (**Web only**)\n * - `touchAction` (**Web only**)\n *\n * ### Remarks\n * - Gesture Detector will use first native view in its subtree to recognize gestures, however if this view is used only to group its children it may get automatically collapsed.\n * - Using the same instance of a gesture across multiple Gesture Detectors is not possible.\n *\n * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/gesture-detector\n */\nexport const GestureDetector = (props: GestureDetectorProps) => {\n  const rootViewContext = useContext(GestureHandlerRootViewContext);\n  if (__DEV__ && !rootViewContext && !isJestEnv() && Platform.OS !== 'web') {\n    throw new Error(\n      'GestureDetector must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.'\n    );\n  }\n\n  // Gesture config should be wrapped with useMemo to prevent unnecessary re-renders\n  const gestureConfig = props.gesture;\n  propagateDetectorConfig(props, gestureConfig);\n\n  const gesturesToAttach = useMemo(\n    () => gestureConfig.toGestureArray(),\n    [gestureConfig]\n  );\n  const shouldUseReanimated = gesturesToAttach.some(\n    (g) => g.shouldUseReanimated\n  );\n\n  const webEventHandlersRef = useWebEventHandlers();\n  // Store state in ref to prevent unnecessary renders\n  const state = useRef<GestureDetectorState>({\n    firstRender: true,\n    viewRef: null,\n    previousViewTag: -1,\n    forceRebuildReanimatedEvent: false,\n  }).current;\n\n  const preparedGesture = React.useRef<AttachedGestureState>({\n    attachedGestures: [],\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    shouldUseReanimated: shouldUseReanimated,\n    isMounted: false,\n  }).current;\n\n  const updateAttachedGestures = useDetectorUpdater(\n    state,\n    preparedGesture,\n    gesturesToAttach,\n    gestureConfig,\n    webEventHandlersRef\n  );\n\n  const refHandler = useViewRefHandler(state, updateAttachedGestures);\n\n  // Reanimated event should be rebuilt only when gestures are reattached, otherwise\n  // config update will be enough as all necessary items are stored in shared values anyway\n  const needsToRebuildReanimatedEvent =\n    state.firstRender ||\n    state.forceRebuildReanimatedEvent ||\n    needsToReattach(preparedGesture, gesturesToAttach);\n  state.forceRebuildReanimatedEvent = false;\n\n  useAnimatedGesture(preparedGesture, needsToRebuildReanimatedEvent);\n\n  useLayoutEffect(() => {\n    const viewTag = findNodeHandle(state.viewRef) as number;\n    preparedGesture.isMounted = true;\n\n    attachHandlers({\n      preparedGesture,\n      gestureConfig,\n      gesturesToAttach,\n      webEventHandlersRef,\n      viewTag,\n    });\n\n    return () => {\n      preparedGesture.isMounted = false;\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (state.firstRender) {\n      state.firstRender = false;\n    } else {\n      updateAttachedGestures();\n    }\n  }, [props]);\n\n  if (shouldUseReanimated) {\n    return (\n      <AnimatedWrap\n        ref={refHandler}\n        onGestureHandlerEvent={preparedGesture.animatedEventHandler}>\n        {props.children}\n      </AnimatedWrap>\n    );\n  } else {\n    return <Wrap ref={refHandler}>{props.children}</Wrap>;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}