{"ast":null,"code":"'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});exports.Extrapolation=void 0;exports.clamp=clamp;exports.interpolate=interpolate;var _errors=require(\"./errors.js\");var Extrapolation=exports.Extrapolation=function(Extrapolation){Extrapolation[\"IDENTITY\"]=\"identity\";Extrapolation[\"CLAMP\"]=\"clamp\";Extrapolation[\"EXTEND\"]=\"extend\";return Extrapolation;}({});function getVal(type,coef,val,leftEdgeOutput,rightEdgeOutput,x){'worklet';switch(type){case Extrapolation.IDENTITY:return x;case Extrapolation.CLAMP:if(coef*val<coef*leftEdgeOutput){return leftEdgeOutput;}return rightEdgeOutput;case Extrapolation.EXTEND:default:return val;}}function isExtrapolate(value){'worklet';return value===Extrapolation.EXTEND||value===Extrapolation.CLAMP||value===Extrapolation.IDENTITY;}function validateType(type){'worklet';var extrapolationConfig={extrapolateLeft:Extrapolation.EXTEND,extrapolateRight:Extrapolation.EXTEND};if(!type){return extrapolationConfig;}if(typeof type==='string'){if(!isExtrapolate(type)){throw new _errors.ReanimatedError(`Unsupported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n        interpolate(value, [inputRange], [outputRange], \"clamp\")`);}extrapolationConfig.extrapolateLeft=type;extrapolationConfig.extrapolateRight=type;return extrapolationConfig;}if(type.extrapolateLeft&&!isExtrapolate(type.extrapolateLeft)||type.extrapolateRight&&!isExtrapolate(type.extrapolateRight)){throw new _errors.ReanimatedError(`Unsupported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n      interpolate(value, [inputRange], [outputRange], {\n        extrapolateLeft: Extrapolation.CLAMP,\n        extrapolateRight: Extrapolation.IDENTITY\n      }})`);}Object.assign(extrapolationConfig,type);return extrapolationConfig;}function internalInterpolate(x,narrowedInput,extrapolationConfig){'worklet';var leftEdgeInput=narrowedInput.leftEdgeInput,rightEdgeInput=narrowedInput.rightEdgeInput,leftEdgeOutput=narrowedInput.leftEdgeOutput,rightEdgeOutput=narrowedInput.rightEdgeOutput;if(rightEdgeInput-leftEdgeInput===0){return leftEdgeOutput;}var progress=(x-leftEdgeInput)/(rightEdgeInput-leftEdgeInput);var val=leftEdgeOutput+progress*(rightEdgeOutput-leftEdgeOutput);var coef=rightEdgeOutput>=leftEdgeOutput?1:-1;if(coef*val<coef*leftEdgeOutput){return getVal(extrapolationConfig.extrapolateLeft,coef,val,leftEdgeOutput,rightEdgeOutput,x);}else if(coef*val>coef*rightEdgeOutput){return getVal(extrapolationConfig.extrapolateRight,coef,val,leftEdgeOutput,rightEdgeOutput,x);}return val;}function interpolate(x,inputRange,outputRange,type){'worklet';if(inputRange.length<2||outputRange.length<2){throw new _errors.ReanimatedError('Interpolation input and output ranges should contain at least two values.');}var extrapolationConfig=validateType(type);var length=inputRange.length;var narrowedInput={leftEdgeInput:inputRange[0],rightEdgeInput:inputRange[1],leftEdgeOutput:outputRange[0],rightEdgeOutput:outputRange[1]};if(length>2){if(x>inputRange[length-1]){narrowedInput.leftEdgeInput=inputRange[length-2];narrowedInput.rightEdgeInput=inputRange[length-1];narrowedInput.leftEdgeOutput=outputRange[length-2];narrowedInput.rightEdgeOutput=outputRange[length-1];}else{for(var i=1;i<length;++i){if(x<=inputRange[i]){narrowedInput.leftEdgeInput=inputRange[i-1];narrowedInput.rightEdgeInput=inputRange[i];narrowedInput.leftEdgeOutput=outputRange[i-1];narrowedInput.rightEdgeOutput=outputRange[i];break;}}}}return internalInterpolate(x,narrowedInput,extrapolationConfig);}function clamp(value,min,max){'worklet';return Math.min(Math.max(value,min),max);}","map":{"version":3,"names":["Object","defineProperty","exports","value","Extrapolation","clamp","interpolate","_errors","require","getVal","type","coef","val","leftEdgeOutput","rightEdgeOutput","x","IDENTITY","CLAMP","EXTEND","isExtrapolate","validateType","extrapolationConfig","extrapolateLeft","extrapolateRight","ReanimatedError","assign","internalInterpolate","narrowedInput","leftEdgeInput","rightEdgeInput","progress","inputRange","outputRange","length","i","min","max","Math"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-reanimated/src/interpolation.ts"],"sourcesContent":["'use strict';\n\nimport { ReanimatedError } from './errors';\n\n/**\n * Extrapolation type.\n *\n * @param IDENTITY - Returns the provided value as is.\n * @param CLAMP - Clamps the value to the edge of the output range.\n * @param EXTEND - Predicts the values beyond the output range.\n */\nexport enum Extrapolation {\n  IDENTITY = 'identity',\n  CLAMP = 'clamp',\n  EXTEND = 'extend',\n}\n\n/** Represents the possible values for extrapolation as a string. */\ntype ExtrapolationAsString = 'identity' | 'clamp' | 'extend';\n\ninterface InterpolationNarrowedInput {\n  leftEdgeInput: number;\n  rightEdgeInput: number;\n  leftEdgeOutput: number;\n  rightEdgeOutput: number;\n}\n\n/** Allows to specify extrapolation for left and right edge of the interpolation. */\nexport interface ExtrapolationConfig {\n  extrapolateLeft?: Extrapolation | string;\n  extrapolateRight?: Extrapolation | string;\n}\n\ninterface RequiredExtrapolationConfig {\n  extrapolateLeft: Extrapolation;\n  extrapolateRight: Extrapolation;\n}\n\n/** Configuration options for extrapolation. */\nexport type ExtrapolationType =\n  | ExtrapolationConfig\n  | Extrapolation\n  | ExtrapolationAsString\n  | undefined;\n\nfunction getVal(\n  type: Extrapolation,\n  coef: number,\n  val: number,\n  leftEdgeOutput: number,\n  rightEdgeOutput: number,\n  x: number\n): number {\n  'worklet';\n\n  switch (type) {\n    case Extrapolation.IDENTITY:\n      return x;\n    case Extrapolation.CLAMP:\n      if (coef * val < coef * leftEdgeOutput) {\n        return leftEdgeOutput;\n      }\n      return rightEdgeOutput;\n    case Extrapolation.EXTEND:\n    default:\n      return val;\n  }\n}\n\nfunction isExtrapolate(value: string): value is Extrapolation {\n  'worklet';\n\n  return (\n    /* eslint-disable @typescript-eslint/no-unsafe-enum-comparison */\n    value === Extrapolation.EXTEND ||\n    value === Extrapolation.CLAMP ||\n    value === Extrapolation.IDENTITY\n    /* eslint-enable @typescript-eslint/no-unsafe-enum-comparison */\n  );\n}\n\n// validates extrapolations type\n// if type is correct, converts it to ExtrapolationConfig\nfunction validateType(type: ExtrapolationType): RequiredExtrapolationConfig {\n  'worklet';\n  // initialize extrapolationConfig with default extrapolation\n  const extrapolationConfig: RequiredExtrapolationConfig = {\n    extrapolateLeft: Extrapolation.EXTEND,\n    extrapolateRight: Extrapolation.EXTEND,\n  };\n\n  if (!type) {\n    return extrapolationConfig;\n  }\n\n  if (typeof type === 'string') {\n    if (!isExtrapolate(type)) {\n      throw new ReanimatedError(\n        `Unsupported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n        interpolate(value, [inputRange], [outputRange], \"clamp\")`\n      );\n    }\n    extrapolationConfig.extrapolateLeft = type;\n    extrapolationConfig.extrapolateRight = type;\n    return extrapolationConfig;\n  }\n\n  // otherwise type is extrapolation config object\n  if (\n    (type.extrapolateLeft && !isExtrapolate(type.extrapolateLeft)) ||\n    (type.extrapolateRight && !isExtrapolate(type.extrapolateRight))\n  ) {\n    throw new ReanimatedError(\n      `Unsupported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n      interpolate(value, [inputRange], [outputRange], {\n        extrapolateLeft: Extrapolation.CLAMP,\n        extrapolateRight: Extrapolation.IDENTITY\n      }})`\n    );\n  }\n\n  Object.assign(extrapolationConfig, type);\n  return extrapolationConfig;\n}\n\nfunction internalInterpolate(\n  x: number,\n  narrowedInput: InterpolationNarrowedInput,\n  extrapolationConfig: RequiredExtrapolationConfig\n) {\n  'worklet';\n  const { leftEdgeInput, rightEdgeInput, leftEdgeOutput, rightEdgeOutput } =\n    narrowedInput;\n  if (rightEdgeInput - leftEdgeInput === 0) {\n    return leftEdgeOutput;\n  }\n  const progress = (x - leftEdgeInput) / (rightEdgeInput - leftEdgeInput);\n  const val = leftEdgeOutput + progress * (rightEdgeOutput - leftEdgeOutput);\n  const coef = rightEdgeOutput >= leftEdgeOutput ? 1 : -1;\n\n  if (coef * val < coef * leftEdgeOutput) {\n    return getVal(\n      extrapolationConfig.extrapolateLeft,\n      coef,\n      val,\n      leftEdgeOutput,\n      rightEdgeOutput,\n      x\n    );\n  } else if (coef * val > coef * rightEdgeOutput) {\n    return getVal(\n      extrapolationConfig.extrapolateRight,\n      coef,\n      val,\n      leftEdgeOutput,\n      rightEdgeOutput,\n      x\n    );\n  }\n\n  return val;\n}\n\n/**\n * Lets you map a value from one range to another using linear interpolation.\n *\n * @param value - A number from the `input` range that is going to be mapped to\n *   the `output` range.\n * @param inputRange - An array of numbers specifying the input range of the\n *   interpolation.\n * @param outputRange - An array of numbers specifying the output range of the\n *   interpolation.\n * @param extrapolate - Determines what happens when the `value` goes beyond the\n *   `input` range. Defaults to `Extrapolation.EXTEND` -\n *   {@link ExtrapolationType}.\n * @returns A mapped value within the output range.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/interpolate\n */\nexport function interpolate(\n  x: number,\n  inputRange: readonly number[],\n  outputRange: readonly number[],\n  type?: ExtrapolationType\n): number {\n  'worklet';\n  if (inputRange.length < 2 || outputRange.length < 2) {\n    throw new ReanimatedError(\n      'Interpolation input and output ranges should contain at least two values.'\n    );\n  }\n\n  const extrapolationConfig = validateType(type);\n  const length = inputRange.length;\n  const narrowedInput: InterpolationNarrowedInput = {\n    leftEdgeInput: inputRange[0],\n    rightEdgeInput: inputRange[1],\n    leftEdgeOutput: outputRange[0],\n    rightEdgeOutput: outputRange[1],\n  };\n  if (length > 2) {\n    if (x > inputRange[length - 1]) {\n      narrowedInput.leftEdgeInput = inputRange[length - 2];\n      narrowedInput.rightEdgeInput = inputRange[length - 1];\n      narrowedInput.leftEdgeOutput = outputRange[length - 2];\n      narrowedInput.rightEdgeOutput = outputRange[length - 1];\n    } else {\n      for (let i = 1; i < length; ++i) {\n        if (x <= inputRange[i]) {\n          narrowedInput.leftEdgeInput = inputRange[i - 1];\n          narrowedInput.rightEdgeInput = inputRange[i];\n          narrowedInput.leftEdgeOutput = outputRange[i - 1];\n          narrowedInput.rightEdgeOutput = outputRange[i];\n          break;\n        }\n      }\n    }\n  }\n\n  return internalInterpolate(x, narrowedInput, extrapolationConfig);\n}\n\n/**\n * Lets you limit a value within a specified range.\n *\n * @param value - A number that will be returned as long as the provided value\n *   is in range between `min` and `max`.\n * @param min - A number which will be returned when provided `value` is lower\n *   than `min`.\n * @param max - A number which will be returned when provided `value` is higher\n *   than `max`.\n * @returns A number between min and max bounds.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/clamp/\n */\nexport function clamp(value: number, min: number, max: number) {\n  'worklet';\n  return Math.min(Math.max(value, min), max);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}