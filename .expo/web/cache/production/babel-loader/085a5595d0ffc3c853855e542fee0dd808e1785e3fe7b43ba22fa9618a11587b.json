{"ast":null,"code":"'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});exports.useAnimatedProps=void 0;var _useAnimatedStyle=require(\"./useAnimatedStyle.js\");var _PlatformChecker=require(\"../PlatformChecker.js\");function useAnimatedPropsJS(updater,deps,adapters){return(0,_useAnimatedStyle.useAnimatedStyle)(updater,deps,adapters,true);}var useAnimatedPropsNative=_useAnimatedStyle.useAnimatedStyle;var useAnimatedProps=exports.useAnimatedProps=(0,_PlatformChecker.shouldBeUseWeb)()?useAnimatedPropsJS:useAnimatedPropsNative;","map":{"version":3,"names":["Object","defineProperty","exports","value","useAnimatedProps","_useAnimatedStyle","require","_PlatformChecker","useAnimatedPropsJS","updater","deps","adapters","useAnimatedStyle","useAnimatedPropsNative","shouldBeUseWeb"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-reanimated/src/hook/useAnimatedProps.ts"],"sourcesContent":["'use strict';\nimport { useAnimatedStyle } from './useAnimatedStyle';\nimport type { DependencyList, UseAnimatedStyleInternal } from './commonTypes';\nimport { shouldBeUseWeb } from '../PlatformChecker';\nimport type { AnimatedPropsAdapterFunction } from '../commonTypes';\n\n// TODO: we should make sure that when useAP is used we are not assigning styles\n\ntype UseAnimatedProps = <Props extends object>(\n  updater: () => Partial<Props>,\n  dependencies?: DependencyList | null,\n  adapters?:\n    | AnimatedPropsAdapterFunction\n    | AnimatedPropsAdapterFunction[]\n    | null,\n  isAnimatedProps?: boolean\n) => Partial<Props>;\n\nfunction useAnimatedPropsJS<Props extends object>(\n  updater: () => Props,\n  deps?: DependencyList | null,\n  adapters?:\n    | AnimatedPropsAdapterFunction\n    | AnimatedPropsAdapterFunction[]\n    | null\n) {\n  return (useAnimatedStyle as UseAnimatedStyleInternal<Props>)(\n    updater,\n    deps,\n    adapters,\n    true\n  );\n}\n\nconst useAnimatedPropsNative = useAnimatedStyle;\n\n/**\n * Lets you create an animated props object which can be animated using shared\n * values.\n *\n * @param updater - A function returning an object with properties you want to\n *   animate.\n * @param dependencies - An optional array of dependencies. Only relevant when\n *   using Reanimated without the Babel plugin on the Web.\n * @param adapters - An optional function or array of functions allowing to\n *   adopt prop naming between JS and the native side.\n * @returns An animated props object which has to be passed to `animatedProps`\n *   property of an Animated component that you want to animate.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedProps\n */\nexport const useAnimatedProps: UseAnimatedProps = shouldBeUseWeb()\n  ? (useAnimatedPropsJS as UseAnimatedProps)\n  : useAnimatedPropsNative;\n"],"mappings":"AAAA,YAAY,CAAAA,MAAA,CAAAC,cAAA,CAAAC,OAAA,eAAAC,KAAA,QAAAD,OAAA,CAAAE,gBAAA,QACZ,IAAAC,iBAAA,CAAAC,OAAA,0BAEA,IAAAC,gBAAA,CAAAD,OAAA,0BAeA,QAAS,CAAAE,kBAAkBA,CACzBC,OAAoB,CACpBC,IAA4B,CAC5BC,QAGQ,CACR,CACA,MAAQ,GAAAC,kCAAgB,EACtBH,OAAO,CACPC,IAAI,CACJC,QAAQ,CACR,IACF,CAAC,CACH,CAEA,GAAM,CAAAE,sBAAsB,CAAGD,kCAAgB,CAgBxC,GAAM,CAAAR,gBAAkC,CAAAF,OAAA,CAAAE,gBAAA,CAAG,GAAAU,+BAAc,EAAC,CAAC,CAC7DN,kBAAkB,CACnBK,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}