{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=createHandler;var _toConsumableArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _defineProperty3=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _customDirectEventTypes=require(\"./customDirectEventTypes\");var _RNGestureHandlerModule=_interopRequireDefault(require(\"../RNGestureHandlerModule\"));var _State=require(\"../State\");var _handlersRegistry=require(\"./handlersRegistry\");var _getNextHandlerTag=require(\"./getNextHandlerTag\");var _utils=require(\"./utils\");var _findNodeHandle=_interopRequireDefault(require(\"../findNodeHandle\"));var _utils2=require(\"../utils\");var _ActionType=require(\"../ActionType\");var _PressabilityDebugView=require(\"./PressabilityDebugView\");var _GestureHandlerRootViewContext=_interopRequireDefault(require(\"../GestureHandlerRootViewContext\"));var _ghQueueMicrotask=require(\"../ghQueueMicrotask\");function _getRequireWildcardCache(e){if(\"function\"!=typeof WeakMap)return null;var r=new WeakMap(),t=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r;})(e);}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(\"default\"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n;}function _callSuper(t,o,e){return o=(0,_getPrototypeOf2.default)(o),(0,_possibleConstructorReturn2.default)(t,_isNativeReflectConstruct()?Reflect.construct(o,e||[],(0,_getPrototypeOf2.default)(t).constructor):o.apply(t,e));}function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));}catch(t){}return(_isNativeReflectConstruct=function _isNativeReflectConstruct(){return!!t;})();}var _UIManagerAny$getView,_UIManagerAny$getView2,_UIManagerAny$getCons;function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var UIManagerAny=_reactNative.UIManager;_customDirectEventTypes.customDirectEventTypes.topGestureHandlerEvent={registrationName:'onGestureHandlerEvent'};var customGHEventsConfigFabricAndroid={topOnGestureHandlerEvent:{registrationName:'onGestureHandlerEvent'},topOnGestureHandlerStateChange:{registrationName:'onGestureHandlerStateChange'}};var customGHEventsConfig=Object.assign({onGestureHandlerEvent:{registrationName:'onGestureHandlerEvent'},onGestureHandlerStateChange:{registrationName:'onGestureHandlerStateChange'}},(0,_utils2.isFabric)()&&_reactNative.Platform.OS==='android'&&customGHEventsConfigFabricAndroid);UIManagerAny.genericDirectEventTypes=Object.assign({},UIManagerAny.genericDirectEventTypes,customGHEventsConfig);var UIManagerConstants=(_UIManagerAny$getView=(_UIManagerAny$getView2=UIManagerAny.getViewManagerConfig)===null||_UIManagerAny$getView2===void 0?void 0:_UIManagerAny$getView2.call(UIManagerAny,'getConstants'))!==null&&_UIManagerAny$getView!==void 0?_UIManagerAny$getView:(_UIManagerAny$getCons=UIManagerAny.getConstants)===null||_UIManagerAny$getCons===void 0?void 0:_UIManagerAny$getCons.call(UIManagerAny);if(UIManagerConstants){UIManagerConstants.genericDirectEventTypes=Object.assign({},UIManagerConstants.genericDirectEventTypes,customGHEventsConfig);}var _UIManagerAny$setJSRe=UIManagerAny.setJSResponder,oldSetJSResponder=_UIManagerAny$setJSRe===void 0?function(){}:_UIManagerAny$setJSRe,_UIManagerAny$clearJS=UIManagerAny.clearJSResponder,oldClearJSResponder=_UIManagerAny$clearJS===void 0?function(){}:_UIManagerAny$clearJS;UIManagerAny.setJSResponder=function(tag,blockNativeResponder){_RNGestureHandlerModule.default.handleSetJSResponder(tag,blockNativeResponder);oldSetJSResponder(tag,blockNativeResponder);};UIManagerAny.clearJSResponder=function(){_RNGestureHandlerModule.default.handleClearJSResponder();oldClearJSResponder();};var allowTouches=true;var DEV_ON_ANDROID=__DEV__&&_reactNative.Platform.OS==='android';if(DEV_ON_ANDROID){_reactNative.DeviceEventEmitter.addListener('toggleElementInspector',function(){allowTouches=!allowTouches;});}function hasUnresolvedRefs(props){var extract=function extract(refs){if(!Array.isArray(refs)){return refs&&refs.current===null;}return refs.some(function(r){return r&&r.current===null;});};return extract(props['simultaneousHandlers'])||extract(props['waitFor']);}var stateToPropMappings=(0,_defineProperty3.default)((0,_defineProperty3.default)((0,_defineProperty3.default)((0,_defineProperty3.default)((0,_defineProperty3.default)((0,_defineProperty3.default)({},_State.State.UNDETERMINED,undefined),_State.State.BEGAN,'onBegan'),_State.State.FAILED,'onFailed'),_State.State.CANCELLED,'onCancelled'),_State.State.ACTIVE,'onActivated'),_State.State.END,'onEnded');var UNRESOLVED_REFS_RETRY_LIMIT=1;function createHandler(_ref){var name=_ref.name,_ref$allowedProps=_ref.allowedProps,allowedProps=_ref$allowedProps===void 0?[]:_ref$allowedProps,_ref$config=_ref.config,config=_ref$config===void 0?{}:_ref$config,transformProps=_ref.transformProps,_ref$customNativeProp=_ref.customNativeProps,customNativeProps=_ref$customNativeProp===void 0?[]:_ref$customNativeProp;var Handler=function(_React$Component){function Handler(props){var _this;(0,_classCallCheck2.default)(this,Handler);_this=_callSuper(this,Handler,[props]);_defineProperty(_this,\"handlerTag\",void 0);_defineProperty(_this,\"config\",void 0);_defineProperty(_this,\"propsRef\",void 0);_defineProperty(_this,\"isMountedRef\",void 0);_defineProperty(_this,\"viewNode\",void 0);_defineProperty(_this,\"viewTag\",void 0);_defineProperty(_this,\"inspectorToggleListener\",void 0);_defineProperty(_this,\"onGestureHandlerEvent\",function(event){if(event.nativeEvent.handlerTag===_this.handlerTag){if(typeof _this.props.onGestureEvent==='function'){var _this$props$onGesture,_this$props;(_this$props$onGesture=(_this$props=_this.props).onGestureEvent)===null||_this$props$onGesture===void 0?void 0:_this$props$onGesture.call(_this$props,event);}}else{var _this$props$onGesture2,_this$props2;(_this$props$onGesture2=(_this$props2=_this.props).onGestureHandlerEvent)===null||_this$props$onGesture2===void 0?void 0:_this$props$onGesture2.call(_this$props2,event);}});_defineProperty(_this,\"onGestureHandlerStateChange\",function(event){if(event.nativeEvent.handlerTag===_this.handlerTag){if(typeof _this.props.onHandlerStateChange==='function'){var _this$props$onHandler,_this$props3;(_this$props$onHandler=(_this$props3=_this.props).onHandlerStateChange)===null||_this$props$onHandler===void 0?void 0:_this$props$onHandler.call(_this$props3,event);}var state=event.nativeEvent.state;var stateEventName=stateToPropMappings[state];var eventHandler=stateEventName&&_this.props[stateEventName];if(eventHandler&&typeof eventHandler==='function'){eventHandler(event);}}else{var _this$props$onGesture3,_this$props4;(_this$props$onGesture3=(_this$props4=_this.props).onGestureHandlerStateChange)===null||_this$props$onGesture3===void 0?void 0:_this$props$onGesture3.call(_this$props4,event);}});_defineProperty(_this,\"refHandler\",function(node){_this.viewNode=node;var child=React.Children.only(_this.props.children);var ref=child.ref;if(ref!==null){if(typeof ref==='function'){ref(node);}else{ref.current=node;}}});_defineProperty(_this,\"createGestureHandler\",function(newConfig){_this.config=newConfig;_RNGestureHandlerModule.default.createGestureHandler(name,_this.handlerTag,newConfig);});_defineProperty(_this,\"attachGestureHandler\",function(newViewTag){_this.viewTag=newViewTag;if(_reactNative.Platform.OS==='web'){_RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag,newViewTag,_ActionType.ActionType.JS_FUNCTION_OLD_API,_this.propsRef);}else{(0,_handlersRegistry.registerOldGestureHandler)(_this.handlerTag,{onGestureEvent:_this.onGestureHandlerEvent,onGestureStateChange:_this.onGestureHandlerStateChange});var actionType=function(){var _this$props5,_this$props6;var onGestureEvent=(_this$props5=_this.props)===null||_this$props5===void 0?void 0:_this$props5.onGestureEvent;var isGestureHandlerWorklet=onGestureEvent&&('current'in onGestureEvent||'workletEventHandler'in onGestureEvent);var onHandlerStateChange=(_this$props6=_this.props)===null||_this$props6===void 0?void 0:_this$props6.onHandlerStateChange;var isStateChangeHandlerWorklet=onHandlerStateChange&&('current'in onHandlerStateChange||'workletEventHandler'in onHandlerStateChange);var isReanimatedHandler=isGestureHandlerWorklet||isStateChangeHandlerWorklet;if(isReanimatedHandler){return _ActionType.ActionType.REANIMATED_WORKLET;}else if(onGestureEvent&&'__isNative'in onGestureEvent){return _ActionType.ActionType.NATIVE_ANIMATED_EVENT;}else{return _ActionType.ActionType.JS_FUNCTION_OLD_API;}}();_RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag,newViewTag,actionType);}(0,_utils.scheduleFlushOperations)();});_defineProperty(_this,\"updateGestureHandler\",function(newConfig){_this.config=newConfig;_RNGestureHandlerModule.default.updateGestureHandler(_this.handlerTag,newConfig);(0,_utils.scheduleFlushOperations)();});_this.handlerTag=(0,_getNextHandlerTag.getNextHandlerTag)();_this.config={};_this.propsRef=React.createRef();_this.isMountedRef=React.createRef();_this.state={allowTouches:allowTouches};if(props.id){if(_handlersRegistry.handlerIDToTag[props.id]!==undefined){throw new Error(`Handler with ID \"${props.id}\" already registered`);}_handlersRegistry.handlerIDToTag[props.id]=_this.handlerTag;}return _this;}(0,_inherits2.default)(Handler,_React$Component);return(0,_createClass2.default)(Handler,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;var props=this.props;this.isMountedRef.current=true;if(DEV_ON_ANDROID){this.inspectorToggleListener=_reactNative.DeviceEventEmitter.addListener('toggleElementInspector',function(){_this2.setState(function(_){return{allowTouches:allowTouches};});_this2.update(UNRESOLVED_REFS_RETRY_LIMIT);});}if(hasUnresolvedRefs(props)){(0,_ghQueueMicrotask.ghQueueMicrotask)(function(){_this2.update(UNRESOLVED_REFS_RETRY_LIMIT);});}this.createGestureHandler((0,_utils.filterConfig)(transformProps?transformProps(this.props):this.props,[].concat((0,_toConsumableArray2.default)(allowedProps),(0,_toConsumableArray2.default)(customNativeProps)),config));this.attachGestureHandler((0,_findNodeHandle.default)(this.viewNode));}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){var viewTag=(0,_findNodeHandle.default)(this.viewNode);if(this.viewTag!==viewTag){this.attachGestureHandler(viewTag);}this.update(UNRESOLVED_REFS_RETRY_LIMIT);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){var _this$inspectorToggle;(_this$inspectorToggle=this.inspectorToggleListener)===null||_this$inspectorToggle===void 0?void 0:_this$inspectorToggle.remove();this.isMountedRef.current=false;_RNGestureHandlerModule.default.dropGestureHandler(this.handlerTag);(0,_utils.scheduleFlushOperations)();var handlerID=this.props.id;if(handlerID){delete _handlersRegistry.handlerIDToTag[handlerID];}}},{key:\"update\",value:function update(remainingTries){var _this3=this;if(!this.isMountedRef.current){return;}var props=this.props;if(hasUnresolvedRefs(props)&&remainingTries>0){(0,_ghQueueMicrotask.ghQueueMicrotask)(function(){_this3.update(remainingTries-1);});}else{var newConfig=(0,_utils.filterConfig)(transformProps?transformProps(this.props):this.props,[].concat((0,_toConsumableArray2.default)(allowedProps),(0,_toConsumableArray2.default)(customNativeProps)),config);if(!(0,_utils2.deepEqual)(this.config,newConfig)){this.updateGestureHandler(newConfig);}}}},{key:\"setNativeProps\",value:function setNativeProps(updates){var mergedProps=Object.assign({},this.props,updates);var newConfig=(0,_utils.filterConfig)(transformProps?transformProps(mergedProps):mergedProps,[].concat((0,_toConsumableArray2.default)(allowedProps),(0,_toConsumableArray2.default)(customNativeProps)),config);this.updateGestureHandler(newConfig);}},{key:\"render\",value:function render(){var _this$props$testID;if(__DEV__&&!this.context&&!(0,_utils2.isJestEnv)()&&_reactNative.Platform.OS!=='web'){throw new Error(name+' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.');}var gestureEventHandler=this.onGestureHandlerEvent;var _this$props7=this.props,onGestureEvent=_this$props7.onGestureEvent,onGestureHandlerEvent=_this$props7.onGestureHandlerEvent;if(onGestureEvent&&typeof onGestureEvent!=='function'){if(onGestureHandlerEvent){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureEventHandler=onGestureEvent;}else{if(onGestureHandlerEvent&&typeof onGestureHandlerEvent!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}var gestureStateEventHandler=this.onGestureHandlerStateChange;var _this$props8=this.props,onHandlerStateChange=_this$props8.onHandlerStateChange,onGestureHandlerStateChange=_this$props8.onGestureHandlerStateChange;if(onHandlerStateChange&&typeof onHandlerStateChange!=='function'){if(onGestureHandlerStateChange){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureStateEventHandler=onHandlerStateChange;}else{if(onGestureHandlerStateChange&&typeof onGestureHandlerStateChange!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}var events={onGestureHandlerEvent:this.state.allowTouches?gestureEventHandler:undefined,onGestureHandlerStateChange:this.state.allowTouches?gestureStateEventHandler:undefined};this.propsRef.current=events;var child=null;try{child=React.Children.only(this.props.children);}catch(e){throw new Error((0,_utils2.tagMessage)(`${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`));}var grandChildren=child.props.children;if(__DEV__&&child.type&&(child.type==='RNGestureHandlerButton'||child.type.name==='View'||child.type.displayName==='View')){grandChildren=React.Children.toArray(grandChildren);grandChildren.push(React.createElement(_PressabilityDebugView.PressabilityDebugView,{key:\"pressabilityDebugView\",color:\"mediumspringgreen\",hitSlop:child.props.hitSlop}));}return React.cloneElement(child,Object.assign({ref:this.refHandler,collapsable:false},(0,_utils2.isJestEnv)()?{handlerType:name,handlerTag:this.handlerTag,enabled:this.props.enabled}:{},{testID:(_this$props$testID=this.props.testID)!==null&&_this$props$testID!==void 0?_this$props$testID:child.props.testID},events),grandChildren);}}]);}(React.Component);_defineProperty(Handler,\"displayName\",name);_defineProperty(Handler,\"contextType\",_GestureHandlerRootViewContext.default);return Handler;}","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_customDirectEventTypes","_RNGestureHandlerModule","_interopRequireDefault","_State","_handlersRegistry","_getNextHandlerTag","_utils","_findNodeHandle","_utils2","_ActionType","_PressabilityDebugView","_GestureHandlerRootViewContext","_ghQueueMicrotask","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_callSuper","o","_getPrototypeOf2","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","UIManagerAny","UIManager","customDirectEventTypes","topGestureHandlerEvent","registrationName","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","topOnGestureHandlerStateChange","customGHEventsConfig","assign","onGestureHandlerEvent","onGestureHandlerStateChange","isFabric","Platform","OS","genericDirectEventTypes","UIManagerConstants","_UIManagerAny$getView","_UIManagerAny$getView2","getViewManagerConfig","_UIManagerAny$getCons","getConstants","_UIManagerAny$setJSRe","setJSResponder","oldSetJSResponder","_UIManagerAny$clearJS","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","RNGestureHandlerModule","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","DeviceEventEmitter","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","stateToPropMappings","_defineProperty3","State","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","UNRESOLVED_REFS_RETRY_LIMIT","createHandler","_ref","name","_ref$allowedProps","allowedProps","_ref$config","config","transformProps","_ref$customNativeProp","customNativeProps","Handler","_React$Component","_this","_classCallCheck2","_defineProperty","event","nativeEvent","handlerTag","onGestureEvent","_this$props$onGesture","_this$props","_this$props$onGesture2","_this$props2","onHandlerStateChange","_this$props$onHandler","_this$props3","state","stateEventName","eventHandler","_this$props$onGesture3","_this$props4","node","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","ActionType","JS_FUNCTION_OLD_API","propsRef","registerOldGestureHandler","onGestureStateChange","actionType","_this$props5","_this$props6","isGestureHandlerWorklet","isStateChangeHandlerWorklet","isReanimatedHandler","REANIMATED_WORKLET","NATIVE_ANIMATED_EVENT","scheduleFlushOperations","updateGestureHandler","getNextHandlerTag","createRef","isMountedRef","id","handlerIDToTag","Error","_inherits2","_createClass2","key","value","componentDidMount","_this2","inspectorToggleListener","setState","_","update","ghQueueMicrotask","filterConfig","concat","_toConsumableArray2","findNodeHandle","componentDidUpdate","componentWillUnmount","_this$inspectorToggle","remove","dropGestureHandler","handlerID","remainingTries","_this3","deepEqual","setNativeProps","updates","mergedProps","render","_this$props$testID","context","isJestEnv","gestureEventHandler","_this$props7","gestureStateEventHandler","_this$props8","events","tagMessage","grandChildren","type","displayName","toArray","push","createElement","PressabilityDebugView","color","hitSlop","cloneElement","refHandler","collapsable","handlerType","enabled","testID","Component","GestureHandlerRootViewContext"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-gesture-handler/lib/module/handlers/createHandler.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\nimport { customDirectEventTypes } from './customDirectEventTypes';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport { State } from '../State';\nimport { handlerIDToTag, registerOldGestureHandler } from './handlersRegistry';\nimport { getNextHandlerTag } from './getNextHandlerTag';\n\nimport {\n  BaseGestureHandlerProps,\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from './gestureHandlerCommon';\nimport { filterConfig, scheduleFlushOperations } from './utils';\nimport findNodeHandle from '../findNodeHandle';\nimport { ValueOf } from '../typeUtils';\nimport { deepEqual, isFabric, isJestEnv, tagMessage } from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\nimport GestureHandlerRootViewContext from '../GestureHandlerRootViewContext';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\n\nconst UIManagerAny = UIManager as any;\n\ncustomDirectEventTypes.topGestureHandlerEvent = {\n  registrationName: 'onGestureHandlerEvent',\n};\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    // no-op\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    // no-op\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<HandlerPropsT extends Record<string, unknown>> =\n  Readonly<{\n    name: string;\n    allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n    config: Readonly<Record<string, unknown>>;\n    transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n    customNativeProps?: Readonly<string[]>;\n  }>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\ntype AttachGestureHandlerWeb = (\n  handlerTag: number,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  newView: any,\n  _actionType: ActionType,\n  propsRef: React.RefObject<unknown>\n) => void;\n\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n    static contextType = GestureHandlerRootViewContext;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private isMountedRef: React.MutableRefObject<boolean | null>;\n    private viewNode: any;\n    private viewTag?: number;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.isMountedRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      this.isMountedRef.current = true;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // queueMicrotask. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        ghQueueMicrotask(() => {\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      this.isMountedRef.current = false;\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // Typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (\n          RNGestureHandlerModule.attachGestureHandler as AttachGestureHandlerWeb\n        )(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          const onGestureEvent = this.props?.onGestureEvent;\n          const isGestureHandlerWorklet =\n            onGestureEvent &&\n            ('current' in onGestureEvent ||\n              'workletEventHandler' in onGestureEvent);\n          const onHandlerStateChange = this.props?.onHandlerStateChange;\n          const isStateChangeHandlerWorklet =\n            onHandlerStateChange &&\n            ('current' in onHandlerStateChange ||\n              'workletEventHandler' in onHandlerStateChange);\n          const isReanimatedHandler =\n            isGestureHandlerWorklet || isStateChangeHandlerWorklet;\n          if (isReanimatedHandler) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (onGestureEvent && '__isNative' in onGestureEvent) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n\n      scheduleFlushOperations();\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n\n    private update(remainingTries: number) {\n      if (!this.isMountedRef.current) {\n        return;\n      }\n\n      const props: HandlerProps<U> = this.props;\n\n      // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        ghQueueMicrotask(() => {\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        );\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      if (__DEV__ && !this.context && !isJestEnv() && Platform.OS !== 'web') {\n        throw new Error(\n          name +\n            ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.'\n        );\n      }\n\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const { onGestureEvent, onGestureHandlerEvent }: OnGestureEventHandlers =\n        this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      let child: any = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(\n          tagMessage(\n            `${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n          )\n        );\n      }\n\n      let grandChildren = child.props.children;\n      if (\n        __DEV__ &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          <PressabilityDebugView\n            key=\"pressabilityDebugView\"\n            color=\"mediumspringgreen\"\n            hitSlop={child.props.hitSlop}\n          />\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isJestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n                enabled: this.props.enabled,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":"s0BAAA,IAAAA,KAAA,CAAAC,uBAAA,CAAAC,OAAA,WACA,IAAAC,YAAA,CAAAD,OAAA,iBAMA,IAAAE,uBAAA,CAAAF,OAAA,6BACA,IAAAG,uBAAA,CAAAC,sBAAA,CAAAJ,OAAA,+BACA,IAAAK,MAAA,CAAAL,OAAA,aACA,IAAAM,iBAAA,CAAAN,OAAA,uBACA,IAAAO,kBAAA,CAAAP,OAAA,wBAOA,IAAAQ,MAAA,CAAAR,OAAA,YACA,IAAAS,eAAA,CAAAL,sBAAA,CAAAJ,OAAA,uBAEA,IAAAU,OAAA,CAAAV,OAAA,aACA,IAAAW,WAAA,CAAAX,OAAA,kBACA,IAAAY,sBAAA,CAAAZ,OAAA,4BACA,IAAAa,8BAAA,CAAAT,sBAAA,CAAAJ,OAAA,sCACA,IAAAc,iBAAA,CAAAd,OAAA,iCAAAe,yBAAAC,CAAA,wBAAAC,OAAA,iBAAAC,CAAA,KAAAD,OAAA,GAAAE,CAAA,KAAAF,OAAA,UAAAF,wBAAA,UAAAA,yBAAAC,CAAA,SAAAA,CAAA,CAAAG,CAAA,CAAAD,CAAA,IAAAF,CAAA,YAAAjB,wBAAAiB,CAAA,CAAAE,CAAA,MAAAA,CAAA,EAAAF,CAAA,EAAAA,CAAA,CAAAI,UAAA,QAAAJ,CAAA,WAAAA,CAAA,mBAAAA,CAAA,qBAAAA,CAAA,QAAAK,OAAA,CAAAL,CAAA,MAAAG,CAAA,CAAAJ,wBAAA,CAAAG,CAAA,KAAAC,CAAA,EAAAA,CAAA,CAAAG,GAAA,CAAAN,CAAA,SAAAG,CAAA,CAAAI,GAAA,CAAAP,CAAA,MAAAQ,CAAA,EAAAC,SAAA,OAAAC,CAAA,CAAAC,MAAA,CAAAC,cAAA,EAAAD,MAAA,CAAAE,wBAAA,SAAAC,CAAA,IAAAd,CAAA,gBAAAc,CAAA,KAAAC,cAAA,CAAAC,IAAA,CAAAhB,CAAA,CAAAc,CAAA,OAAAG,CAAA,CAAAP,CAAA,CAAAC,MAAA,CAAAE,wBAAA,CAAAb,CAAA,CAAAc,CAAA,OAAAG,CAAA,GAAAA,CAAA,CAAAV,GAAA,EAAAU,CAAA,CAAAC,GAAA,EAAAP,MAAA,CAAAC,cAAA,CAAAJ,CAAA,CAAAM,CAAA,CAAAG,CAAA,EAAAT,CAAA,CAAAM,CAAA,EAAAd,CAAA,CAAAc,CAAA,UAAAN,CAAA,CAAAH,OAAA,CAAAL,CAAA,CAAAG,CAAA,EAAAA,CAAA,CAAAe,GAAA,CAAAlB,CAAA,CAAAQ,CAAA,EAAAA,CAAA,WAAAW,WAAAhB,CAAA,CAAAiB,CAAA,CAAApB,CAAA,SAAAoB,CAAA,IAAAC,gBAAA,CAAAhB,OAAA,EAAAe,CAAA,KAAAE,2BAAA,CAAAjB,OAAA,EAAAF,CAAA,CAAAoB,yBAAA,GAAAC,OAAA,CAAAC,SAAA,CAAAL,CAAA,CAAApB,CAAA,QAAAqB,gBAAA,CAAAhB,OAAA,EAAAF,CAAA,EAAAuB,WAAA,EAAAN,CAAA,CAAAO,KAAA,CAAAxB,CAAA,CAAAH,CAAA,aAAAuB,0BAAA,UAAApB,CAAA,EAAAyB,OAAA,CAAAC,SAAA,CAAAC,OAAA,CAAAd,IAAA,CAAAQ,OAAA,CAAAC,SAAA,CAAAG,OAAA,0BAAAzB,CAAA,UAAAoB,yBAAA,UAAAA,0BAAA,UAAApB,CAAA,O,6PAEA,GAAM,CAAA4B,YAAY,CAAGC,sBAArB,CAEAC,8CAAsB,CAACC,sBAAvB,CAAgD,CAC9CC,gBAAgB,CAAE,uBAD4B,CAAhD,CAIA,GAAM,CAAAC,iCAAiC,CAAG,CACxCC,wBAAwB,CAAE,CAAEF,gBAAgB,CAAE,uBAApB,CADc,CAExCG,8BAA8B,CAAE,CAC9BH,gBAAgB,CAAE,6BADY,CAFQ,CAA1C,CAOA,GAAM,CAAAI,oBAAoB,CAAA5B,MAAA,CAAA6B,MAAA,EACxBC,qBAAqB,CAAE,CAAEN,gBAAgB,CAAE,uBAApB,CADI,CAE3BO,2BAA2B,CAAE,CAC3BP,gBAAgB,CAAE,6BADS,CAFF,EAcvB,GAAAQ,gBAAQ,KACVC,qBAAQ,CAACC,EAAT,GAAgB,SADd,EAEFT,iCAFF,CAdF,CAuBAL,YAAY,CAACe,uBAAb,CAAAnC,MAAA,CAAA6B,MAAA,IACKT,YAAY,CAACe,uBADqB,CAElCP,oBAAA,CAFL,CAOA,GAAM,CAAAQ,kBAAkB,EAAAC,qBAAA,EAAAC,sBAAA,CACtBlB,YAAY,CAACmB,oBADS,UAAAD,sBAAA,iBACtBA,sBAAA,CAAAjC,IAAA,CAAAe,YAAY,CAAwB,cAAxB,CADU,UAAAiB,qBAAA,UAAAA,qBAAA,EAAAG,qBAAA,CAEtBpB,YAAY,CAACqB,YAFS,UAAAD,qBAAA,iBAEtBA,qBAAA,CAAAnC,IAAA,CAAAe,YAAY,CAFd,CAIA,GAAIgB,kBAAJ,CAAwB,CACtBA,kBAAkB,CAACD,uBAAnB,CAAAnC,MAAA,CAAA6B,MAAA,IACKO,kBAAkB,CAACD,uBADqB,CAExCP,oBAAA,CAFL,CAID,CAGD,IAAAc,qBAAA,CAOItB,YAPJ,CACEuB,cAAc,CAAEC,iBAAiB,CAAAF,qBAAA,UAAG,UAAM,CAEzC,CAHG,CAAAA,qBAAA,CAAAG,qBAAA,CAOFzB,YAPJ,CAIE0B,gBAAgB,CAAEC,mBAAmB,CAAAF,qBAAA,UAAG,UAAM,CAE7C,EAAAA,qBAAA,CAEHzB,YAAY,CAACuB,cAAb,CAA8B,SAACK,GAAD,CAAcC,oBAAd,CAAgD,CAC5EC,+BAAsB,CAACC,oBAAvB,CAA4CH,GAA5C,CAAiDC,oBAAjD,EACAL,iBAAiB,CAACI,GAAD,CAAMC,oBAAN,CAAjB,CACD,CAHD,CAIA7B,YAAY,CAAC0B,gBAAb,CAAgC,UAAM,CACpCI,+BAAsB,CAACE,sBAAvB,GACAL,mBAAmB,GACpB,CAHD,CAKA,GAAI,CAAAM,YAAY,CAAG,IAAnB,CACA,GAAM,CAAAC,cAAc,CAAGC,OAAO,EAAItB,qBAAQ,CAACC,EAAT,GAAgB,SAAlD,CAGA,GAAIoB,cAAJ,CAAoB,CAClBE,+BAAkB,CAACC,WAAnB,CAA+B,wBAA/B,CAAyD,UAAM,CAC7DJ,YAAY,CAAG,CAACA,YAAhB,CACD,CAFD,EAGD,CAKD,QAAS,CAAAK,iBAATA,CACEC,KADF,CAEE,CAEA,GAAM,CAAAC,OAAO,CAAI,QAAX,CAAAA,OAAOA,CAAIC,IAAD,CAAuB,CACrC,GAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAL,CAA0B,CACxB,MAAO,CAAAA,IAAI,EAAIA,IAAI,CAACG,OAAL,GAAiB,IAAhC,CACD,CACD,MAAO,CAAAH,IAAI,CAACI,IAAL,CAAW,SAAA1E,CAAD,QAAO,CAAAA,CAAC,EAAIA,CAAC,CAACyE,OAAF,GAAc,IAApC,GAAP,CACD,CALD,CAMA,MAAO,CAAAJ,OAAO,CAACD,KAAK,CAAC,sBAAD,CAAN,CAAP,EAA0CC,OAAO,CAACD,KAAK,CAAC,SAAD,CAAN,CAAxD,CACD,CAED,GAAM,CAAAO,mBAAmB,IAAAC,gBAAA,CAAAzE,OAAA,KAAAyE,gBAAA,CAAAzE,OAAA,KAAAyE,gBAAA,CAAAzE,OAAA,KAAAyE,gBAAA,CAAAzE,OAAA,KAAAyE,gBAAA,CAAAzE,OAAA,KAAAyE,gBAAA,CAAAzE,OAAA,KACtB0E,YAAK,CAACC,YAAP,CAAsBC,SADI,EAEzBF,YAAK,CAACG,KAAP,CAAe,SAFW,EAGzBH,YAAK,CAACI,MAAP,CAAgB,UAHU,EAIzBJ,YAAK,CAACK,SAAP,CAAmB,aAJO,EAKzBL,YAAK,CAACM,MAAP,CAAgB,aALU,EAMzBN,YAAK,CAACO,GAAP,CAAa,UANf,CAgCA,GAAM,CAAAC,2BAA2B,CAAG,CAApC,CAGe,QAAS,CAAAC,aAATA,CAAAC,IAAA,CAS6D,IAL1E,CAAAC,IADA,CAAAD,IAAA,CACAC,IADA,CAAAC,iBAAA,CAAAF,IAAA,CAEAG,YAAY,CAAZA,YAAY,CAAAD,iBAAA,UAAG,EAFf,CAAAA,iBAAA,CAAAE,WAAA,CAAAJ,IAAA,CAGAK,MAAM,CAANA,MAAM,CAAAD,WAAA,UAAG,EAHT,CAAAA,WAAA,CAIAE,cAJA,CAAAN,IAAA,CAIAM,cAJA,CAAAC,qBAAA,CAAAP,IAAA,CAKAQ,iBAAiB,CAAjBA,iBAAiB,CAAAD,qBAAA,UAAG,GAAAA,qBAAA,IAKd,CAAAE,OAAN,UAAAC,gBAAA,EAeE,SAAAD,QAAY5B,KAAD,CAAmC,KAAA8B,KAAA,IAAAC,gBAAA,CAAAhG,OAAA,OAAA6F,OAAA,EAC5CE,KAAA,CAAAjF,UAAA,MAAA+E,OAAA,EAAM5B,KAAN,GAD4CgC,eAAA,CAAAF,KAAA,sBAAAE,eAAA,CAAAF,KAAA,kBAAAE,eAAA,CAAAF,KAAA,oBAAAE,eAAA,CAAAF,KAAA,wBAAAE,eAAA,CAAAF,KAAA,oBAAAE,eAAA,CAAAF,KAAA,mBAAAE,eAAA,CAAAF,KAAA,mCAAAE,eAAA,CAAAF,KAAA,yBAwEb,SAAAG,KAAD,CAA4B,CAC1D,GAAIA,KAAK,CAACC,WAAN,CAAkBC,UAAlB,GAAiCL,KAAA,CAAKK,UAA1C,CAAsD,CACpD,GAAI,MAAO,CAAAL,KAAA,CAAK9B,KAAL,CAAWoC,cAAlB,GAAqC,UAAzC,CAAqD,KAAAC,qBAAA,CAAAC,WAAA,CACnD,CAAAD,qBAAA,EAAAC,WAAA,CAAAR,KAAA,CAAK9B,KAAL,EAAWoC,cAAX,UAAAC,qBAAA,iBAAAA,qBAAA,CAAA3F,IAAA,CAAA4F,WAAA,CAA4BL,KAA5B,EACD,CACF,CAJD,IAIO,KAAAM,sBAAA,CAAAC,YAAA,CACL,CAAAD,sBAAA,EAAAC,YAAA,CAAAV,KAAA,CAAK9B,KAAL,EAAW7B,qBAAX,UAAAoE,sBAAA,iBAAAA,sBAAA,CAAA7F,IAAA,CAAA8F,YAAA,CAAmCP,KAAnC,EACD,CACF,CAhF6C,EAAAD,eAAA,CAAAF,KAAA,+BAoF5C,SAAAG,KADoC,CAEjC,CACH,GAAIA,KAAK,CAACC,WAAN,CAAkBC,UAAlB,GAAiCL,KAAA,CAAKK,UAA1C,CAAsD,CACpD,GAAI,MAAO,CAAAL,KAAA,CAAK9B,KAAL,CAAWyC,oBAAlB,GAA2C,UAA/C,CAA2D,KAAAC,qBAAA,CAAAC,YAAA,CACzD,CAAAD,qBAAA,EAAAC,YAAA,CAAAb,KAAA,CAAK9B,KAAL,EAAWyC,oBAAX,UAAAC,qBAAA,iBAAAA,qBAAA,CAAAhG,IAAA,CAAAiG,YAAA,CAAkCV,KAAlC,EACD,CAED,GAAM,CAAAW,KAA4B,CAAGX,KAAK,CAACC,WAAN,CAAkBU,KAAvD,CACA,GAAM,CAAAC,cAAc,CAAGtC,mBAAmB,CAACqC,KAAD,CAA1C,CACA,GAAM,CAAAE,YAAY,CAAGD,cAAc,EAAIf,KAAA,CAAK9B,KAAL,CAAW6C,cAAX,CAAvC,CACA,GAAIC,YAAY,EAAI,MAAO,CAAAA,YAAP,GAAwB,UAA5C,CAAwD,CACtDA,YAAY,CAACb,KAAD,CAAZ,CACD,CACF,CAXD,IAWO,KAAAc,sBAAA,CAAAC,YAAA,CACL,CAAAD,sBAAA,EAAAC,YAAA,CAAAlB,KAAA,CAAK9B,KAAL,EAAW5B,2BAAX,UAAA2E,sBAAA,iBAAAA,sBAAA,CAAArG,IAAA,CAAAsG,YAAA,CAAyCf,KAAzC,EACD,CACF,CApG6C,EAAAD,eAAA,CAAAF,KAAA,cAsGxB,SAAAmB,IAAD,CAAe,CAClCnB,KAAA,CAAKoB,QAAL,CAAgBD,IAAhB,CAEA,GAAM,CAAAE,KAAK,CAAG3I,KAAK,CAAC4I,QAAN,CAAeC,IAAf,CAAoBvB,KAAA,CAAK9B,KAAL,CAAWsD,QAA/B,CAAd,CAEA,GAAQ,CAAAC,GAAA,CAAaJ,KAArB,CAAQI,GAAA,CACR,GAAIA,GAAG,GAAK,IAAZ,CAAkB,CAChB,GAAI,MAAO,CAAAA,GAAP,GAAe,UAAnB,CAA+B,CAC7BA,GAAG,CAACN,IAAD,CAAH,CACD,CAFD,IAEO,CACLM,GAAG,CAAClD,OAAJ,CAAc4C,IAAd,CACD,CACF,CACF,CAnH6C,EAAAjB,eAAA,CAAAF,KAAA,wBAsH5C,SAAA0B,SAD6B,CAE1B,CACH1B,KAAA,CAAKN,MAAL,CAAcgC,SAAd,CAEAjE,+BAAsB,CAACkE,oBAAvB,CACErC,IADF,CAEEU,KAAA,CAAKK,UAFP,CAGEqB,SAHF,EAKD,CA/H6C,EAAAxB,eAAA,CAAAF,KAAA,wBAiId,SAAA4B,UAAD,CAAwB,CACrD5B,KAAA,CAAK6B,OAAL,CAAeD,UAAf,CAEA,GAAIpF,qBAAQ,CAACC,EAAT,GAAgB,KAApB,CAA2B,CAGvBgB,+BAAsB,CAACqE,oBADzB,CAGE9B,KAAA,CAAKK,UAHP,CAIEuB,UAJF,CAKEG,sBAAU,CAACC,mBALb,CAMEhC,KAAA,CAAKiC,QANP,EAQD,CAVD,IAUO,CACL,GAAAC,2CAAyB,EAAClC,KAAA,CAAKK,UAAN,CAAkB,CACzCC,cAAc,CAAEN,KAAA,CAAK3D,qBADoB,CAEzC8F,oBAAoB,CAAEnC,KAAA,CAAK1D,2BAFc,CAAlB,CAAzB,CAKA,GAAM,CAAA8F,UAAU,CAAI,UAAM,KAAAC,YAAA,CAAAC,YAAA,CACxB,GAAM,CAAAhC,cAAc,EAAA+B,YAAA,CAAGrC,KAAA,CAAK9B,KAAR,UAAAmE,YAAA,iBAAGA,YAAA,CAAY/B,cAAnC,CACA,GAAM,CAAAiC,uBAAuB,CAC3BjC,cAAc,GACb,WAAa,CAAAA,cAAb,EACC,uBAAyB,CAAAA,cAFb,CADhB,CAIA,GAAM,CAAAK,oBAAoB,EAAA2B,YAAA,CAAGtC,KAAA,CAAK9B,KAAR,UAAAoE,YAAA,iBAAGA,YAAA,CAAY3B,oBAAzC,CACA,GAAM,CAAA6B,2BAA2B,CAC/B7B,oBAAoB,GACnB,WAAa,CAAAA,oBAAb,EACC,uBAAyB,CAAAA,oBAFP,CADtB,CAIA,GAAM,CAAA8B,mBAAmB,CACvBF,uBAAuB,EAAIC,2BAD7B,CAEA,GAAIC,mBAAJ,CAAyB,CAEvB,MAAO,CAAAV,sBAAU,CAACW,kBAAlB,CACD,CAHD,IAGO,IAAIpC,cAAc,EAAI,cAAgB,CAAAA,cAAtC,CAAsD,CAE3D,MAAO,CAAAyB,sBAAU,CAACY,qBAAlB,CACD,CAHM,IAGA,CAEL,MAAO,CAAAZ,sBAAU,CAACC,mBAAlB,CACD,CACF,CAvBkB,EAAnB,CAyBAvE,+BAAsB,CAACqE,oBAAvB,CACE9B,KAAA,CAAKK,UADP,CAEEuB,UAFF,CAGEQ,UAHF,EAKD,CAED,GAAAQ,8BAAuB,IACxB,CArL6C,EAAA1C,eAAA,CAAAF,KAAA,wBAwL5C,SAAA0B,SAD6B,CAE1B,CACH1B,KAAA,CAAKN,MAAL,CAAcgC,SAAd,CAEAjE,+BAAsB,CAACoF,oBAAvB,CAA4C7C,KAAA,CAAKK,UAAjD,CAA6DqB,SAA7D,EACA,GAAAkB,8BAAuB,IACxB,CA9L6C,EAE5C5C,KAAA,CAAKK,UAAL,CAAkB,GAAAyC,oCAAiB,GAAnC,CACA9C,KAAA,CAAKN,MAAL,CAAc,EAAd,CACAM,KAAA,CAAKiC,QAAL,CAAgBvJ,KAAK,CAACqK,SAAN,EAAhB,CACA/C,KAAA,CAAKgD,YAAL,CAAoBtK,KAAK,CAACqK,SAAN,EAApB,CACA/C,KAAA,CAAKc,KAAL,CAAa,CAAElD,YAAA,CAAAA,YAAF,CAAb,CACA,GAAIM,KAAK,CAAC+E,EAAV,CAAc,CACZ,GAAIC,gCAAc,CAAChF,KAAK,CAAC+E,EAAP,CAAd,GAA6BpE,SAAjC,CAA4C,CAC1C,KAAM,IAAI,CAAAsE,KAAJ,CAAW,oBAAmBjF,KAAK,CAAC+E,EAAG,sBAAvC,CAAN,CACD,CACDC,gCAAc,CAAChF,KAAK,CAAC+E,EAAP,CAAd,CAA2BjD,KAAA,CAAKK,UAAhC,CACD,QAAAL,KAAA,CACF,IAAAoD,UAAA,CAAAnJ,OAAA,EAAA6F,OAAA,CAAAC,gBAAA,WAAAsD,aAAA,CAAApJ,OAAA,EAAA6F,OAAA,GAAAwD,GAAA,qBAAAC,KAAA,CAED,SAAAC,iBAAiBA,CAAA,CAAG,KAAAC,MAAA,MAClB,GAAM,CAAAvF,KAAsB,CAAG,KAAKA,KAApC,CACA,KAAK8E,YAAL,CAAkBzE,OAAlB,CAA4B,IAA5B,CAEA,GAAIV,cAAJ,CAAoB,CAClB,KAAK6F,uBAAL,CAA+B3F,+BAAkB,CAACC,WAAnB,CAC7B,wBAD6B,CAE7B,UAAM,CACJyF,MAAA,CAAKE,QAAL,CAAe,SAAAC,CAAD,QAAQ,CAAEhG,YAAA,CAAAA,YAAF,CAAR,EAAd,EACA6F,MAAA,CAAKI,MAAL,CAAY1E,2BAAZ,EACD,CAL4B,CAA/B,CAOD,CACD,GAAIlB,iBAAiB,CAACC,KAAD,CAArB,CAA8B,CAO5B,GAAA4F,kCAAgB,EAAC,UAAM,CACrBL,MAAA,CAAKI,MAAL,CAAY1E,2BAAZ,EACD,CAFe,CAAhB,CAGD,CAED,KAAKwC,oBAAL,CACE,GAAAoC,mBAAY,EACVpE,cAAc,CAAGA,cAAc,CAAC,KAAKzB,KAAN,CAAjB,CAAgC,KAAKA,KADzC,IAAA8F,MAAA,IAAAC,mBAAA,CAAAhK,OAAA,EAENuF,YAAJ,KAAAyE,mBAAA,CAAAhK,OAAA,EAAqB4F,iBAArB,GACAH,MAHU,CADd,EAQA,KAAKoC,oBAAL,CAA0B,GAAAoC,uBAAc,EAAC,KAAK9C,QAAN,CAAxC,EACD,IAAAkC,GAAA,sBAAAC,KAAA,CAED,SAAAY,kBAAkBA,CAAA,CAAG,CACnB,GAAM,CAAAtC,OAAO,CAAG,GAAAqC,uBAAc,EAAC,KAAK9C,QAAN,CAA9B,CACA,GAAI,KAAKS,OAAL,GAAiBA,OAArB,CAA8B,CAC5B,KAAKC,oBAAL,CAA0BD,OAA1B,EACD,CACD,KAAKgC,MAAL,CAAY1E,2BAAZ,EACD,IAAAmE,GAAA,wBAAAC,KAAA,CAED,SAAAa,oBAAoBA,CAAA,CAAG,KAAAC,qBAAA,CACrB,CAAAA,qBAAA,MAAKX,uBAAL,UAAAW,qBAAA,iBAAAA,qBAAA,CAA8BC,MAA9B,GACA,KAAKtB,YAAL,CAAkBzE,OAAlB,CAA4B,KAA5B,CACAd,+BAAsB,CAAC8G,kBAAvB,CAA0C,KAAKlE,UAA/C,EACA,GAAAuC,8BAAuB,IAEvB,GAAM,CAAA4B,SAA6B,CAAG,KAAKtG,KAAL,CAAW+E,EAAjD,CACA,GAAIuB,SAAJ,CAAe,CAEb,MAAO,CAAAtB,gCAAc,CAACsB,SAAD,CAArB,CACD,CACF,IAAAlB,GAAA,UAAAC,KAAA,CA0HO,SAAAM,MAAMA,CAACY,cAAD,CAAyB,KAAAC,MAAA,MACrC,GAAI,CAAC,KAAK1B,YAAL,CAAkBzE,OAAvB,CAAgC,CAC9B,OACD,CAED,GAAM,CAAAL,KAAsB,CAAG,KAAKA,KAApC,CAKA,GAAID,iBAAiB,CAACC,KAAD,CAAjB,EAA4BuG,cAAc,CAAG,CAAjD,CAAoD,CAClD,GAAAX,kCAAgB,EAAC,UAAM,CACrBY,MAAA,CAAKb,MAAL,CAAYY,cAAc,CAAG,CAA7B,EACD,CAFe,CAAhB,CAGD,CAJD,IAIO,CACL,GAAM,CAAA/C,SAAS,CAAG,GAAAqC,mBAAY,EAC5BpE,cAAc,CAAGA,cAAc,CAAC,KAAKzB,KAAN,CAAjB,CAAgC,KAAKA,KADvB,IAAA8F,MAAA,IAAAC,mBAAA,CAAAhK,OAAA,EAExBuF,YAAJ,KAAAyE,mBAAA,CAAAhK,OAAA,EAAqB4F,iBAArB,GACAH,MAH4B,CAA9B,CAKA,GAAI,CAAC,GAAAiF,iBAAS,EAAC,KAAKjF,MAAN,CAAcgC,SAAd,CAAd,CAAwC,CACtC,KAAKmB,oBAAL,CAA0BnB,SAA1B,EACD,CACF,CACF,IAAA4B,GAAA,kBAAAC,KAAA,CAED,SAAAqB,cAAcA,CAACC,OAAD,CAAe,CAC3B,GAAM,CAAAC,WAAW,CAAAvK,MAAA,CAAA6B,MAAA,IAAQ,KAAK8B,KAAV,CAAoB2G,OAAA,CAAxC,CACA,GAAM,CAAAnD,SAAS,CAAG,GAAAqC,mBAAY,EAC5BpE,cAAc,CAAGA,cAAc,CAACmF,WAAD,CAAjB,CAAiCA,WADnB,IAAAd,MAAA,IAAAC,mBAAA,CAAAhK,OAAA,EAExBuF,YAAJ,KAAAyE,mBAAA,CAAAhK,OAAA,EAAqB4F,iBAArB,GACAH,MAH4B,CAA9B,CAKA,KAAKmD,oBAAL,CAA0BnB,SAA1B,EACD,IAAA4B,GAAA,UAAAC,KAAA,CAED,SAAAwB,MAAMA,CAAA,CAAG,KAAAC,kBAAA,CACP,GAAIlH,OAAO,EAAI,CAAC,KAAKmH,OAAjB,EAA4B,CAAC,GAAAC,iBAAS,GAAtC,EAA4C1I,qBAAQ,CAACC,EAAT,GAAgB,KAAhE,CAAuE,CACrE,KAAM,IAAI,CAAA0G,KAAJ,CACJ7D,IAAI,CACF,yMAFE,CAAN,CAID,CAED,GAAI,CAAA6F,mBAAmB,CAAG,KAAK9I,qBAA/B,CAMA,IAAA+I,YAAA,CACE,KAAKlH,KADP,CAAQoC,cAAF,CAAA8E,YAAA,CAAE9E,cAAF,CAAkBjE,qBAAA,CAAA+I,YAAA,CAAA/I,qBAAA,CAExB,GAAIiE,cAAc,EAAI,MAAO,CAAAA,cAAP,GAA0B,UAAhD,CAA4D,CAI1D,GAAIjE,qBAAJ,CAA2B,CACzB,KAAM,IAAI,CAAA8G,KAAJ,CACJ,yEADI,CAAN,CAGD,CACDgC,mBAAmB,CAAG7E,cAAtB,CACD,CAVD,IAUO,CACL,GACEjE,qBAAqB,EACrB,MAAO,CAAAA,qBAAP,GAAiC,UAFnC,CAGE,CACA,KAAM,IAAI,CAAA8G,KAAJ,CACJ,yEADI,CAAN,CAGD,CACF,CAED,GAAI,CAAAkC,wBAAwB,CAAG,KAAK/I,2BAApC,CAMA,IAAAgJ,YAAA,CAGkC,KAAKpH,KAHvC,CACEyC,oBADI,CAAA2E,YAAA,CACJ3E,oBADI,CAEJrE,2BAAA,CAAAgJ,YAAA,CAAAhJ,2BAAA,CAEF,GAAIqE,oBAAoB,EAAI,MAAO,CAAAA,oBAAP,GAAgC,UAA5D,CAAwE,CAItE,GAAIrE,2BAAJ,CAAiC,CAC/B,KAAM,IAAI,CAAA6G,KAAJ,CACJ,yEADI,CAAN,CAGD,CACDkC,wBAAwB,CAAG1E,oBAA3B,CACD,CAVD,IAUO,CACL,GACErE,2BAA2B,EAC3B,MAAO,CAAAA,2BAAP,GAAuC,UAFzC,CAGE,CACA,KAAM,IAAI,CAAA6G,KAAJ,CACJ,yEADI,CAAN,CAGD,CACF,CACD,GAAM,CAAAoC,MAAM,CAAG,CACblJ,qBAAqB,CAAE,KAAKyE,KAAL,CAAWlD,YAAX,CACnBuH,mBADmB,CAEnBtG,SAHS,CAIbvC,2BAA2B,CAAE,KAAKwE,KAAL,CAAWlD,YAAX,CACzByH,wBADyB,CAEzBxG,SANS,CAAf,CASA,KAAKoD,QAAL,CAAc1D,OAAd,CAAwBgH,MAAxB,CAEA,GAAI,CAAAlE,KAAU,CAAG,IAAjB,CACA,GAAI,CACFA,KAAK,CAAG3I,KAAK,CAAC4I,QAAN,CAAeC,IAAf,CAAoB,KAAKrD,KAAL,CAAWsD,QAA/B,CAAR,CACD,CAAC,MAAO5H,CAAP,CAAU,CACV,KAAM,IAAI,CAAAuJ,KAAJ,CACJ,GAAAqC,kBAAU,EACP,GAAElG,IAAK,4JADA,CADN,CAAN,CAKD,CAED,GAAI,CAAAmG,aAAa,CAAGpE,KAAK,CAACnD,KAAN,CAAYsD,QAAhC,CACA,GACE1D,OAAO,EACPuD,KAAK,CAACqE,IADN,GAECrE,KAAK,CAACqE,IAAN,GAAe,wBAAf,EACCrE,KAAK,CAACqE,IAAN,CAAWpG,IAAX,GAAoB,MADrB,EAEC+B,KAAK,CAACqE,IAAN,CAAWC,WAAX,GAA2B,MAJ7B,CADF,CAME,CACAF,aAAa,CAAG/M,KAAK,CAAC4I,QAAN,CAAesE,OAAf,CAAuBH,aAAvB,CAAhB,CACAA,aAAa,CAACI,IAAd,CACEnN,KAAA,CAAAoN,aAAA,CAACC,4CAAD,EACEzC,GAAG,CAAC,uBADN,CAEE0C,KAAK,CAAC,mBAFR,CAGEC,OAAO,CAAE5E,KAAK,CAACnD,KAAN,CAAY+H,OAHvB,EADF,EAOD,CAED,MAAO,CAAAvN,KAAK,CAACwN,YAAN,CACL7E,KADK,CAAA9G,MAAA,CAAA6B,MAAA,EAGHqF,GAAG,CAAE,KAAK0E,UADZ,CAEEC,WAAW,CAAE,KAFf,EAGM,GAAAlB,iBAAS,IACT,CACEmB,WAAW,CAAE/G,IADf,CAEEe,UAAU,CAAE,KAAKA,UAFnB,CAGEiG,OAAO,CAAE,KAAKpI,KAAL,CAAWoI,OAHtB,CADS,CAMT,EANJ,EAOAC,MAAM,EAAAvB,kBAAA,CAAE,KAAK9G,KAAL,CAAWqI,MAAb,UAAAvB,kBAAA,UAAAA,kBAAA,CAAuB3D,KAAK,CAACnD,KAAN,CAAYqI,MAV3C,EAWKhB,MAAA,EAELE,aAfK,CAAP,CAiBD,OA/WmB/M,KAAK,CAAC8N,SAA5B,EAJ0EtG,eAAA,CAIpEJ,OAJoE,eAQnDR,IARmD,EAAAY,eAAA,CAIpEJ,OAJoE,eASnD2G,sCATmD,EAqX1E,MAAO,CAAA3G,OAAP,CACD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}