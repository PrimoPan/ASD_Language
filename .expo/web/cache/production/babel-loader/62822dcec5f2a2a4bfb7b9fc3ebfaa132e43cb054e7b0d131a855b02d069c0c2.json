{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.getFocusedRouteNameFromRoute=getFocusedRouteNameFromRoute;var _useRouteCache=require(\"./useRouteCache.js\");function getFocusedRouteNameFromRoute(route){var _route$_useRouteCache,_state$index;var state=(_route$_useRouteCache=route[_useRouteCache.CHILD_STATE])!=null?_route$_useRouteCache:route.state;var params=route.params;var routeName=state?state.routes[(_state$index=state.index)!=null?_state$index:typeof state.type==='string'&&state.type!=='stack'?0:state.routes.length-1].name:typeof(params==null?void 0:params.screen)==='string'?params.screen:undefined;return routeName;}","map":{"version":3,"names":["_useRouteCache","require","getFocusedRouteNameFromRoute","route","_route$_useRouteCache","_state$index","state","CHILD_STATE","params","routeName","routes","index","type","length","name","screen","undefined"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/@react-navigation/core/src/getFocusedRouteNameFromRoute.tsx"],"sourcesContent":["import type { Route } from '@react-navigation/routers';\n\nimport { CHILD_STATE } from './useRouteCache';\n\nexport function getFocusedRouteNameFromRoute(\n  route: Partial<Route<string>>\n): string | undefined {\n  // @ts-expect-error: this isn't in type definitions coz we want this private\n  const state = route[CHILD_STATE] ?? route.state;\n  const params = route.params as { screen?: unknown } | undefined;\n\n  const routeName = state\n    ? // Get the currently active route name in the nested navigator\n      state.routes[\n        // If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n        // The type property will only exist for rehydrated state and not for state from deep link\n        state.index ??\n          (typeof state.type === 'string' && state.type !== 'stack'\n            ? 0\n            : state.routes.length - 1)\n      ].name\n    : // If state doesn't exist, we need to default to `screen` param if available\n      typeof params?.screen === 'string'\n      ? params.screen\n      : undefined;\n\n  return routeName;\n}\n"],"mappings":"wIAEA,IAAAA,cAAA,CAAAC,OAAA,uBAEO,QAAS,CAAAC,4BAA4BA,CAC1CC,KAA6B,CACT,KAAAC,qBAAA,CAAAC,YAAA,CAEpB,GAAM,CAAAC,KAAK,EAAAF,qBAAA,CAAGD,KAAK,CAACH,cAAA,CAAAO,WAAW,CAAC,QAAAH,qBAAA,CAAID,KAAK,CAACG,KAAK,CAC/C,GAAM,CAAAE,MAAM,CAAGL,KAAK,CAACK,MAA0C,CAE/D,GAAM,CAAAC,SAAS,CAAGH,KAAK,CAEnBA,KAAK,CAACI,MAAM,EAAAL,YAAA,CAGVC,KAAK,CAACK,KAAK,QAAAN,YAAA,CACR,MAAO,CAAAC,KAAK,CAACM,IAAI,GAAK,QAAQ,EAAIN,KAAK,CAACM,IAAI,GAAK,OAAO,CACrD,CAAC,CACDN,KAAK,CAACI,MAAM,CAACG,MAAM,CAAG,CAAC,CAC9B,CAACC,IAAI,CAEN,OAAON,MAAM,cAANA,MAAM,CAAEO,MAAM,IAAK,QAAQ,CAChCP,MAAM,CAACO,MAAM,CACbC,SAAS,CAEf,MAAO,CAAAP,SAAS,CAClB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}