{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _hammerjs=_interopRequireDefault(require(\"@egjs/hammerjs\"));var _reactNative=require(\"react-native\");var _State=require(\"../State\");var _constants=require(\"./constants\");var NodeManager=_interopRequireWildcard(require(\"./NodeManager\"));var _ghQueueMicrotask=require(\"../ghQueueMicrotask\");var _excluded=[\"enabled\"];function _getRequireWildcardCache(e){if(\"function\"!=typeof WeakMap)return null;var r=new WeakMap(),t=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r;})(e);}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(\"default\"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var gestureInstances=0;var GestureHandler=function(){function GestureHandler(){var _this=this;(0,_classCallCheck2.default)(this,GestureHandler);_defineProperty(this,\"handlerTag\",void 0);_defineProperty(this,\"isGestureRunning\",false);_defineProperty(this,\"view\",null);_defineProperty(this,\"hasCustomActivationCriteria\",void 0);_defineProperty(this,\"hasGestureFailed\",false);_defineProperty(this,\"hammer\",null);_defineProperty(this,\"initialRotation\",null);_defineProperty(this,\"__initialX\",void 0);_defineProperty(this,\"__initialY\",void 0);_defineProperty(this,\"config\",{});_defineProperty(this,\"previousState\",_State.State.UNDETERMINED);_defineProperty(this,\"pendingGestures\",{});_defineProperty(this,\"oldState\",_State.State.UNDETERMINED);_defineProperty(this,\"lastSentState\",null);_defineProperty(this,\"gestureInstance\",void 0);_defineProperty(this,\"_stillWaiting\",void 0);_defineProperty(this,\"propsRef\",void 0);_defineProperty(this,\"ref\",void 0);_defineProperty(this,\"clearSelfAsPending\",function(){if(Array.isArray(_this.config.waitFor)){for(var gesture of _this.config.waitFor){gesture.removePendingGesture(_this.id);}}});_defineProperty(this,\"destroy\",function(){_this.clearSelfAsPending();if(_this.hammer){_this.hammer.stop(false);_this.hammer.destroy();}_this.hammer=null;});_defineProperty(this,\"isPointInView\",function(_ref){var x=_ref.x,y=_ref.y;var rect=_this.view.getBoundingClientRect();var pointerInside=x>=rect.left&&x<=rect.right&&y>=rect.top&&y<=rect.bottom;return pointerInside;});_defineProperty(this,\"sendEvent\",function(nativeEvent){var _this$propsRef$curren=_this.propsRef.current,onGestureHandlerEvent=_this$propsRef$curren.onGestureHandlerEvent,onGestureHandlerStateChange=_this$propsRef$curren.onGestureHandlerStateChange;var event=_this.transformEventData(nativeEvent);invokeNullableMethod(onGestureHandlerEvent,event);if(_this.lastSentState!==event.nativeEvent.state){_this.lastSentState=event.nativeEvent.state;invokeNullableMethod(onGestureHandlerStateChange,event);}});_defineProperty(this,\"sync\",function(){var gesture=_this.hammer.get(_this.name);if(!gesture)return;var enable=function enable(recognizer,inputData){if(!_this.config.enabled){_this.isGestureRunning=false;_this.hasGestureFailed=false;return false;}if(!inputData||!recognizer.options||typeof inputData.maxPointers==='undefined'){return _this.shouldEnableGestureOnSetup;}if(_this.hasGestureFailed){return false;}if(!_this.isDiscrete){if(_this.isGestureRunning){return true;}_this._stillWaiting=_this._getPendingGestures();if(_this._stillWaiting.length){for(var _gesture2 of _this._stillWaiting){if(!_gesture2.isDiscrete&&_gesture2.isGestureRunning){_this.hasGestureFailed=true;_this.isGestureRunning=false;return false;}}return false;}}if(!_this.hasCustomActivationCriteria){return true;}var deltaRotation=_this.initialRotation==null?0:inputData.rotation-_this.initialRotation;var _this$isGestureEnable=_this.isGestureEnabledForEvent(_this.getConfig(),recognizer,Object.assign({},inputData,{deltaRotation:deltaRotation})),success=_this$isGestureEnable.success,failed=_this$isGestureEnable.failed;if(failed){_this.simulateCancelEvent(inputData);_this.hasGestureFailed=true;}return success;};var params=_this.getHammerConfig();gesture.set(Object.assign({},params,{enable:enable}));});this.gestureInstance=gestureInstances++;this.hasCustomActivationCriteria=false;}return(0,_createClass2.default)(GestureHandler,[{key:\"id\",get:function get(){return`${this.name}${this.gestureInstance}`;}},{key:\"isNative\",get:function get(){return false;}},{key:\"isDiscrete\",get:function get(){return false;}},{key:\"shouldEnableGestureOnSetup\",get:function get(){throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');}},{key:\"getConfig\",value:function getConfig(){return this.config;}},{key:\"onWaitingEnded\",value:function onWaitingEnded(_gesture){}},{key:\"removePendingGesture\",value:function removePendingGesture(id){delete this.pendingGestures[id];}},{key:\"addPendingGesture\",value:function addPendingGesture(gesture){this.pendingGestures[gesture.id]=gesture;}},{key:\"isGestureEnabledForEvent\",value:function isGestureEnabledForEvent(_config,_recognizer,_event){return{success:true};}},{key:\"NativeGestureClass\",get:function get(){throw new Error('Must override GestureHandler.NativeGestureClass');}},{key:\"updateHasCustomActivationCriteria\",value:function updateHasCustomActivationCriteria(_config){return true;}},{key:\"updateGestureConfig\",value:function updateGestureConfig(_ref2){var _ref2$enabled=_ref2.enabled,enabled=_ref2$enabled===void 0?true:_ref2$enabled,props=(0,_objectWithoutProperties2.default)(_ref2,_excluded);this.clearSelfAsPending();this.config=this.ensureConfig(Object.assign({enabled:enabled},props));this.hasCustomActivationCriteria=this.updateHasCustomActivationCriteria(this.config);if(Array.isArray(this.config.waitFor)){for(var gesture of this.config.waitFor){gesture.addPendingGesture(this);}}if(this.hammer){this.sync();}return this.config;}},{key:\"getState\",value:function getState(type){if(type==0){return 0;}return _constants.EventMap[type];}},{key:\"transformEventData\",value:function transformEventData(event){var eventType=event.eventType,numberOfPointers=event.maxPointers;var changedTouch=event.changedPointers[0];var pointerInside=this.isPointInView({x:changedTouch.clientX,y:changedTouch.clientY});var state=this.getState(eventType);if(state!==this.previousState){this.oldState=this.previousState;this.previousState=state;}return{nativeEvent:Object.assign({numberOfPointers:numberOfPointers,state:state,pointerInside:pointerInside},this.transformNativeEvent(event),{handlerTag:this.handlerTag,target:this.ref,oldState:state!==this.previousState||state!=4?this.oldState:undefined}),timeStamp:Date.now()};}},{key:\"transformNativeEvent\",value:function transformNativeEvent(_event){return{};}},{key:\"cancelPendingGestures\",value:function cancelPendingGestures(event){for(var gesture of Object.values(this.pendingGestures)){if(gesture&&gesture.isGestureRunning){gesture.hasGestureFailed=true;gesture.cancelEvent(event);}}}},{key:\"notifyPendingGestures\",value:function notifyPendingGestures(){for(var gesture of Object.values(this.pendingGestures)){if(gesture){gesture.onWaitingEnded(this);}}}},{key:\"onGestureEnded\",value:function onGestureEnded(event){this.isGestureRunning=false;this.cancelPendingGestures(event);}},{key:\"forceInvalidate\",value:function forceInvalidate(event){if(this.isGestureRunning){this.hasGestureFailed=true;this.cancelEvent(event);}}},{key:\"cancelEvent\",value:function cancelEvent(event){this.notifyPendingGestures();this.sendEvent(Object.assign({},event,{eventType:_hammerjs.default.INPUT_CANCEL,isFinal:true}));this.onGestureEnded(event);}},{key:\"onRawEvent\",value:function onRawEvent(_ref3){var isFirst=_ref3.isFirst;if(isFirst){this.hasGestureFailed=false;}}},{key:\"shouldUseTouchEvents\",value:function shouldUseTouchEvents(config){var _config$simultaneousH,_config$simultaneousH2;return(_config$simultaneousH=(_config$simultaneousH2=config.simultaneousHandlers)===null||_config$simultaneousH2===void 0?void 0:_config$simultaneousH2.some(function(handler){return handler.isNative;}))!==null&&_config$simultaneousH!==void 0?_config$simultaneousH:false;}},{key:\"setView\",value:function setView(ref,propsRef){var _this2=this;if(ref==null){this.destroy();this.view=null;return;}var SUPPORTS_TOUCH='ontouchstart'in window;this.propsRef=propsRef;this.ref=ref;this.view=(0,_reactNative.findNodeHandle)(ref);this.hammer=SUPPORTS_TOUCH&&this.shouldUseTouchEvents(this.config)?new _hammerjs.default.Manager(this.view,{inputClass:_hammerjs.default.TouchInput}):new _hammerjs.default.Manager(this.view);this.oldState=_State.State.UNDETERMINED;this.previousState=_State.State.UNDETERMINED;this.lastSentState=null;var NativeGestureClass=this.NativeGestureClass;var gesture=new NativeGestureClass(this.getHammerConfig());this.hammer.add(gesture);this.hammer.on('hammer.input',function(ev){if(!_this2.config.enabled){_this2.hasGestureFailed=false;_this2.isGestureRunning=false;return;}_this2.onRawEvent(ev);if(_this2.initialRotation===null&&ev.rotation!==0){_this2.initialRotation=ev.rotation;}if(ev.isFinal){setTimeout(function(){_this2.initialRotation=null;_this2.hasGestureFailed=false;});}});this.setupEvents();this.sync();}},{key:\"setupEvents\",value:function setupEvents(){var _this3=this;if(!this.isDiscrete){this.hammer.on(`${this.name}start`,function(event){return _this3.onStart(event);});this.hammer.on(`${this.name}end ${this.name}cancel`,function(event){_this3.onGestureEnded(event);});}this.hammer.on(this.name,function(ev){return _this3.onGestureActivated(ev);});}},{key:\"onStart\",value:function onStart(_ref4){var deltaX=_ref4.deltaX,deltaY=_ref4.deltaY,rotation=_ref4.rotation;this.oldState=_State.State.UNDETERMINED;this.previousState=_State.State.UNDETERMINED;this.lastSentState=null;this.isGestureRunning=true;this.__initialX=deltaX;this.__initialY=deltaY;this.initialRotation=rotation;}},{key:\"onGestureActivated\",value:function onGestureActivated(ev){this.sendEvent(ev);}},{key:\"onSuccess\",value:function onSuccess(){}},{key:\"_getPendingGestures\",value:function _getPendingGestures(){if(Array.isArray(this.config.waitFor)&&this.config.waitFor.length){var stillWaiting=this.config.waitFor.filter(function(_ref5){var hasGestureFailed=_ref5.hasGestureFailed;return hasGestureFailed===false;});return stillWaiting;}return[];}},{key:\"getHammerConfig\",value:function getHammerConfig(){var pointers=this.config.minPointers===this.config.maxPointers?this.config.minPointers:0;return{pointers:pointers};}},{key:\"simulateCancelEvent\",value:function simulateCancelEvent(_inputData){}},{key:\"ensureConfig\",value:function ensureConfig(config){var _this4=this;var props=Object.assign({},config);if('minDist'in config){props.minDist=config.minDist;props.minDistSq=props.minDist*props.minDist;}if('minVelocity'in config){props.minVelocity=config.minVelocity;props.minVelocitySq=props.minVelocity*props.minVelocity;}if('maxDist'in config){props.maxDist=config.maxDist;props.maxDistSq=config.maxDist*config.maxDist;}if('waitFor'in config){props.waitFor=asArray(config.waitFor).map(function(_ref6){var handlerTag=_ref6.handlerTag;return NodeManager.getHandler(handlerTag);}).filter(function(v){return v;});}else{props.waitFor=null;}if('simultaneousHandlers'in config){var shouldUseTouchEvents=this.shouldUseTouchEvents(this.config);props.simultaneousHandlers=asArray(config.simultaneousHandlers).map(function(handler){if(typeof handler==='number'){return NodeManager.getHandler(handler);}else{return NodeManager.getHandler(handler.handlerTag);}}).filter(function(v){return v;});if(shouldUseTouchEvents!==this.shouldUseTouchEvents(props)){(0,_ghQueueMicrotask.ghQueueMicrotask)(function(){_this4.destroy();_this4.setView(_this4.ref,_this4.propsRef);});}}else{props.simultaneousHandlers=null;}var configProps=['minPointers','maxPointers','minDist','maxDist','maxDistSq','minVelocitySq','minDistSq','minVelocity','failOffsetXStart','failOffsetYStart','failOffsetXEnd','failOffsetYEnd','activeOffsetXStart','activeOffsetXEnd','activeOffsetYStart','activeOffsetYEnd'];configProps.forEach(function(prop){if(typeof props[prop]==='undefined'){props[prop]=Number.NaN;}});return props;}}]);}();function invokeNullableMethod(method,event){if(method){if(typeof method==='function'){method(event);}else{if('__getHandler'in method&&typeof method.__getHandler==='function'){var handler=method.__getHandler();invokeNullableMethod(handler,event);}else{if('__nodeConfig'in method){var argMapping=method.__nodeConfig.argMapping;if(Array.isArray(argMapping)){for(var _ref7 of argMapping.entries()){var _ref8=(0,_slicedToArray2.default)(_ref7,2);var index=_ref8[0];var _ref8$=(0,_slicedToArray2.default)(_ref8[1],2);var key=_ref8$[0];var value=_ref8$[1];if(key in event.nativeEvent){var nativeValue=event.nativeEvent[key];if(value&&value.setValue){value.setValue(nativeValue);}else{method.__nodeConfig.argMapping[index]=[key,nativeValue];}}}}}}}}}function asArray(value){return value==null?[]:Array.isArray(value)?value:[value];}var _default=exports.default=GestureHandler;","map":{"version":3,"names":["_hammerjs","_interopRequireDefault","require","_reactNative","_State","_constants","NodeManager","_interopRequireWildcard","_ghQueueMicrotask","gestureInstances","GestureHandler","_this","_classCallCheck2","default","_defineProperty","State","UNDETERMINED","Array","isArray","config","waitFor","gesture","removePendingGesture","id","clearSelfAsPending","hammer","stop","destroy","_ref","x","y","rect","view","getBoundingClientRect","pointerInside","left","right","top","bottom","nativeEvent","_this$propsRef$curren","propsRef","current","onGestureHandlerEvent","onGestureHandlerStateChange","event","transformEventData","invokeNullableMethod","lastSentState","state","get","name","enable","recognizer","inputData","enabled","isGestureRunning","hasGestureFailed","options","maxPointers","shouldEnableGestureOnSetup","isDiscrete","_stillWaiting","_getPendingGestures","length","hasCustomActivationCriteria","deltaRotation","initialRotation","rotation","_this$isGestureEnable","isGestureEnabledForEvent","getConfig","Object","assign","success","failed","simulateCancelEvent","params","getHammerConfig","set","gestureInstance","_createClass2","key","Error","value","onWaitingEnded","_gesture","pendingGestures","addPendingGesture","_config","_recognizer","_event","updateHasCustomActivationCriteria","updateGestureConfig","_ref2","_ref2$enabled","props","_objectWithoutProperties2","_excluded","ensureConfig","sync","getState","type","EventMap","eventType","numberOfPointers","changedTouch","changedPointers","isPointInView","clientX","clientY","previousState","oldState","transformNativeEvent","handlerTag","target","ref","undefined","timeStamp","Date","now","cancelPendingGestures","values","cancelEvent","notifyPendingGestures","onGestureEnded","forceInvalidate","sendEvent","Hammer","INPUT_CANCEL","isFinal","onRawEvent","_ref3","isFirst","shouldUseTouchEvents","_config$simultaneousH","_config$simultaneousH2","simultaneousHandlers","some","handler","isNative","setView","_this2","SUPPORTS_TOUCH","window","findNodeHandle","Manager","inputClass","TouchInput","NativeGestureClass","add","on","ev","setTimeout","setupEvents","_this3","onStart","onGestureActivated","_ref4","deltaX","deltaY","__initialX","__initialY","onSuccess","stillWaiting","filter","_ref5","pointers","minPointers","_inputData","_this4","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","_ref6","getHandler","v","ghQueueMicrotask","configProps","forEach","prop","Number","NaN","method","__getHandler","argMapping","__nodeConfig","_ref7","entries","_ref8","_slicedToArray2","index","_ref8$","nativeValue","setValue","_default","exports"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-gesture-handler/lib/module/web_hammer/GestureHandler.ts"],"sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\n\n// TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\nexport type HammerInputExt = Omit<HammerInput, 'destroy' | 'handler' | 'init'>;\n\nexport type Config = Partial<{\n  enabled: boolean;\n  minPointers: number;\n  maxPointers: number;\n  minDist: number;\n  minDistSq: number;\n  minVelocity: number;\n  minVelocitySq: number;\n  maxDist: number;\n  maxDistSq: number;\n  failOffsetXStart: number;\n  failOffsetYStart: number;\n  failOffsetXEnd: number;\n  failOffsetYEnd: number;\n  activeOffsetXStart: number;\n  activeOffsetXEnd: number;\n  activeOffsetYStart: number;\n  activeOffsetYEnd: number;\n  waitFor: any[] | null;\n  simultaneousHandlers: any[] | null;\n}>;\n\ntype NativeEvent = ReturnType<GestureHandler['transformEventData']>;\n\nlet gestureInstances = 0;\n\nabstract class GestureHandler {\n  public handlerTag: any;\n  public isGestureRunning = false;\n  public view: number | null = null;\n  protected hasCustomActivationCriteria: boolean;\n  protected hasGestureFailed = false;\n  protected hammer: HammerManager | null = null;\n  protected initialRotation: number | null = null;\n  protected __initialX: any;\n  protected __initialY: any;\n  protected config: Config = {};\n  protected previousState: State = State.UNDETERMINED;\n  private pendingGestures: Record<string, this> = {};\n  private oldState: State = State.UNDETERMINED;\n  private lastSentState: State | null = null;\n  private gestureInstance: number;\n  private _stillWaiting: any;\n  private propsRef: any;\n  private ref: any;\n\n  abstract get name(): string;\n\n  get id() {\n    return `${this.name}${this.gestureInstance}`;\n  }\n\n  // a simple way to check if GestureHandler is NativeViewGestureHandler, since importing it\n  // here to use instanceof would cause import cycle\n  get isNative() {\n    return false;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(_gesture: this) {}\n\n  removePendingGesture(id: string) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture: this) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent(\n    _config: any,\n    _recognizer: any,\n    _event: any\n  ): { failed?: boolean; success?: boolean } {\n    return { success: true };\n  }\n\n  get NativeGestureClass(): RecognizerStatic {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(_config: Config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = this.ensureConfig({ enabled, ...props });\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\n      this.config\n    );\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop(false);\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }: { x: number; y: number }) => {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const pointerInside =\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type: keyof typeof EventMap): State {\n    // @ts-ignore TODO(TS) check if this is needed\n    if (type == 0) {\n      return 0;\n    }\n    return EventMap[type];\n  }\n\n  transformEventData(event: HammerInputExt) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY,\n    });\n\n    // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n    const state = this.getState(eventType as 1 | 2 | 4 | 8);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        // send oldState only when the state was changed, or is different than ACTIVE\n        // GestureDetector relies on the presence of `oldState` to differentiate between\n        // update events and state change events\n        oldState:\n          state !== this.previousState || state != 4\n            ? this.oldState\n            : undefined,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(_event: HammerInputExt) {\n    return {};\n  }\n\n  sendEvent = (nativeEvent: HammerInputExt) => {\n    const { onGestureHandlerEvent, onGestureHandlerStateChange } =\n      this.propsRef.current;\n\n    const event = this.transformEventData(nativeEvent);\n\n    invokeNullableMethod(onGestureHandlerEvent, event);\n    if (this.lastSentState !== event.nativeEvent.state) {\n      this.lastSentState = event.nativeEvent.state as State;\n      invokeNullableMethod(onGestureHandlerStateChange, event);\n    }\n  };\n\n  cancelPendingGestures(event: HammerInputExt) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n  onGestureEnded(event: HammerInputExt) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event: HammerInputExt) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }: HammerInputExt) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  shouldUseTouchEvents(config: Config) {\n    return (\n      config.simultaneousHandlers?.some((handler) => handler.isNative) ?? false\n    );\n  }\n\n  setView(ref: Parameters<typeof findNodeHandle>['0'], propsRef: any) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    // @ts-ignore window doesn't exist on global type as we don't want to use Node types\n    const SUPPORTS_TOUCH = 'ontouchstart' in window;\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    this.view = findNodeHandle(ref);\n\n    // When the browser starts handling the gesture (e.g. scrolling), it sends a pointercancel event and stops\n    // sending additional pointer events. This is not the case with touch events, so if the gesture is simultaneous\n    // with a NativeGestureHandler, we need to check if touch events are supported and use them if possible.\n    this.hammer =\n      SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config)\n        ? new Hammer.Manager(this.view as any, {\n            inputClass: Hammer.TouchInput,\n          })\n        : new Hammer.Manager(this.view as any);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    const { NativeGestureClass } = this;\n    // @ts-ignore TODO(TS)\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', (ev: HammerInput) => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent(ev as unknown as HammerInputExt);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\n    if (!this.isDiscrete) {\n      this.hammer!.on(`${this.name}start`, (event: HammerInput) =>\n        this.onStart(event as unknown as HammerInputExt)\n      );\n      this.hammer!.on(\n        `${this.name}end ${this.name}cancel`,\n        (event: HammerInput) => {\n          this.onGestureEnded(event as unknown as HammerInputExt);\n        }\n      );\n    }\n    this.hammer!.on(this.name, (ev: HammerInput) =>\n      this.onGestureActivated(ev as unknown as HammerInputExt)\n    ); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n  }\n\n  onStart({ deltaX, deltaY, rotation }: HammerInputExt) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers\n        ? this.config.minPointers\n        : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer!.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer: any, inputData: any) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (\n        !inputData ||\n        !recognizer.options ||\n        typeof inputData.maxPointers === 'undefined'\n      ) {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this.hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null\n          ? 0\n          : inputData.rotation - this.initialRotation;\n      // @ts-ignore FIXME(TS)\n      const { success, failed } = this.isGestureEnabledForEvent(\n        this.getConfig(),\n        recognizer,\n        {\n          ...inputData,\n          deltaRotation,\n        }\n      );\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    // @ts-ignore FIXME(TS)\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(_inputData: any) {}\n\n  // Validate the props\n  ensureConfig(config: Config): Required<Config> {\n    const props = { ...config };\n\n    // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n    if ('minDist' in config) {\n      props.minDist = config.minDist;\n      props.minDistSq = props.minDist! * props.minDist!;\n    }\n    if ('minVelocity' in config) {\n      props.minVelocity = config.minVelocity;\n      props.minVelocitySq = props.minVelocity! * props.minVelocity!;\n    }\n    if ('maxDist' in config) {\n      props.maxDist = config.maxDist;\n      props.maxDistSq = config.maxDist! * config.maxDist!;\n    }\n    if ('waitFor' in config) {\n      props.waitFor = asArray(config.waitFor)\n        .map(({ handlerTag }: { handlerTag: number }) =>\n          NodeManager.getHandler(handlerTag)\n        )\n        .filter((v) => v);\n    } else {\n      props.waitFor = null;\n    }\n    if ('simultaneousHandlers' in config) {\n      const shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n      props.simultaneousHandlers = asArray(config.simultaneousHandlers)\n        .map((handler: number | GestureHandler) => {\n          if (typeof handler === 'number') {\n            return NodeManager.getHandler(handler);\n          } else {\n            return NodeManager.getHandler(handler.handlerTag);\n          }\n        })\n        .filter((v) => v);\n\n      if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n        ghQueueMicrotask(() => {\n          // if the undelying event API needs to be changed, we need to unmount and mount\n          // the hammer instance again.\n          this.destroy();\n          this.setView(this.ref, this.propsRef);\n        });\n      }\n    } else {\n      props.simultaneousHandlers = null;\n    }\n\n    const configProps = [\n      'minPointers',\n      'maxPointers',\n      'minDist',\n      'maxDist',\n      'maxDistSq',\n      'minVelocitySq',\n      'minDistSq',\n      'minVelocity',\n      'failOffsetXStart',\n      'failOffsetYStart',\n      'failOffsetXEnd',\n      'failOffsetYEnd',\n      'activeOffsetXStart',\n      'activeOffsetXEnd',\n      'activeOffsetYStart',\n      'activeOffsetYEnd',\n    ] as const;\n    configProps.forEach((prop: typeof configProps[number]) => {\n      if (typeof props[prop] === 'undefined') {\n        props[prop] = Number.NaN;\n      }\n    });\n    return props as Required<Config>; // TODO(TS) how to convince TS that props are filled?\n  }\n}\n\n// TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(\n  method:\n    | ((event: NativeEvent) => void)\n    | { __getHandler: () => (event: NativeEvent) => void }\n    | { __nodeConfig: { argMapping: any } },\n  event: NativeEvent\n) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if (\n        '__getHandler' in method &&\n        typeof method.__getHandler === 'function'\n      ) {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const [index, [key, value]] of argMapping.entries()) {\n              if (key in event.nativeEvent) {\n                // @ts-ignore fix method type\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction asArray<T>(value: T | T[]) {\n  // TODO(TS) use config.waitFor type\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}