{"ast":null,"code":"'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});exports.Bezier=Bezier;var _errors=require(\"./errors.js\");var NEWTON_ITERATIONS=4;var NEWTON_MIN_SLOPE=0.001;var SUBDIVISION_PRECISION=0.0000001;var SUBDIVISION_MAX_ITERATIONS=10;var kSplineTableSize=11;var kSampleStepSize=1.0/(kSplineTableSize-1.0);function A(aA1,aA2){'worklet';return 1.0-3.0*aA2+3.0*aA1;}function B(aA1,aA2){'worklet';return 3.0*aA2-6.0*aA1;}function C(aA1){'worklet';return 3.0*aA1;}function calcBezier(aT,aA1,aA2){'worklet';return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}function getSlope(aT,aA1,aA2){'worklet';return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}function binarySubdivide(aX,aA,aB,mX1,mX2){'worklet';var currentX;var currentT;var i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){'worklet';for(var i=0;i<NEWTON_ITERATIONS;++i){var currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}var currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}function Bezier(mX1,mY1,mX2,mY2){'worklet';function LinearEasing(x){'worklet';return x;}if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1)){throw new _errors.ReanimatedError('Bezier x values must be in [0, 1] range.');}if(mX1===mY1&&mX2===mY2){return LinearEasing;}var sampleValues=new Array(kSplineTableSize);for(var i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}function getTForX(aX){'worklet';var intervalStart=0.0;var currentSample=1;var lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;var dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);var guessForT=intervalStart+dist*kSampleStepSize;var initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}return function BezierEasing(x){'worklet';if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};}","map":{"version":3,"names":["Object","defineProperty","exports","value","Bezier","_errors","require","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","i","Math","abs","newtonRaphsonIterate","aGuessT","currentSlope","mY1","mY2","LinearEasing","x","ReanimatedError","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","BezierEasing"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-reanimated/src/Bezier.ts"],"sourcesContent":["'use strict';\n\nimport { ReanimatedError } from './errors';\n\n/**\n * https://github.com/gre/bezier-easing BezierEasing - use bezier curve for\n * transition easing function by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\n\nconst NEWTON_ITERATIONS = 4;\nconst NEWTON_MIN_SLOPE = 0.001;\nconst SUBDIVISION_PRECISION = 0.0000001;\nconst SUBDIVISION_MAX_ITERATIONS = 10;\n\nconst kSplineTableSize = 11;\nconst kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nfunction A(aA1: number, aA2: number): number {\n  'worklet';\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\nfunction B(aA1: number, aA2: number): number {\n  'worklet';\n  return 3.0 * aA2 - 6.0 * aA1;\n}\nfunction C(aA1: number) {\n  'worklet';\n  return 3.0 * aA1;\n}\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier(aT: number, aA1: number, aA2: number): number {\n  'worklet';\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope(aT: number, aA1: number, aA2: number): number {\n  'worklet';\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(\n  aX: number,\n  aA: number,\n  aB: number,\n  mX1: number,\n  mX2: number\n): number {\n  'worklet';\n  let currentX;\n  let currentT;\n  let i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (\n    Math.abs(currentX) > SUBDIVISION_PRECISION &&\n    ++i < SUBDIVISION_MAX_ITERATIONS\n  );\n  return currentT;\n}\n\nfunction newtonRaphsonIterate(\n  aX: number,\n  aGuessT: number,\n  mX1: number,\n  mX2: number\n): number {\n  'worklet';\n  for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\n    const currentSlope = getSlope(aGuessT, mX1, mX2);\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n    const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n  return aGuessT;\n}\n\nexport function Bezier(\n  mX1: number,\n  mY1: number,\n  mX2: number,\n  mY2: number\n): (x: number) => number {\n  'worklet';\n\n  function LinearEasing(x: number): number {\n    'worklet';\n    return x;\n  }\n\n  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n    throw new ReanimatedError('Bezier x values must be in [0, 1] range.');\n  }\n\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  }\n\n  const sampleValues = new Array(kSplineTableSize);\n\n  // Precompute samples table\n  for (let i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n\n  function getTForX(aX: number): number {\n    'worklet';\n    let intervalStart = 0.0;\n    let currentSample = 1;\n    const lastSample = kSplineTableSize - 1;\n\n    for (\n      ;\n      currentSample !== lastSample && sampleValues[currentSample] <= aX;\n      ++currentSample\n    ) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    const dist =\n      (aX - sampleValues[currentSample]) /\n      (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    const guessForT = intervalStart + dist * kSampleStepSize;\n\n    const initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(\n        aX,\n        intervalStart,\n        intervalStart + kSampleStepSize,\n        mX1,\n        mX2\n      );\n    }\n  }\n\n  return function BezierEasing(x) {\n    'worklet';\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    }\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}