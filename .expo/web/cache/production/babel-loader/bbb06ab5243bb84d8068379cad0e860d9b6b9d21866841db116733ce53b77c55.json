{"ast":null,"code":"'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});exports.useScrollViewOffset=void 0;var _react=require(\"react\");var _useEvent=require(\"./useEvent.js\");var _useSharedValue=require(\"./useSharedValue.js\");var _PlatformChecker=require(\"../PlatformChecker.js\");var IS_WEB=(0,_PlatformChecker.isWeb)();var useScrollViewOffset=exports.useScrollViewOffset=IS_WEB?useScrollViewOffsetWeb:useScrollViewOffsetNative;function useScrollViewOffsetWeb(animatedRef,providedOffset){var internalOffset=(0,_useSharedValue.useSharedValue)(0);var offset=(0,_react.useRef)(providedOffset!=null?providedOffset:internalOffset).current;var eventHandler=(0,_react.useCallback)(function(){'worklet';if(animatedRef){var element=getWebScrollableElement(animatedRef.current);offset.value=element.scrollLeft===0?element.scrollTop:element.scrollLeft;}},[animatedRef,animatedRef==null?void 0:animatedRef.current]);(0,_react.useEffect)(function(){var element=animatedRef!=null&&animatedRef.current?getWebScrollableElement(animatedRef.current):null;if(element){element.addEventListener('scroll',eventHandler);}return function(){if(element){element.removeEventListener('scroll',eventHandler);}};},[animatedRef,animatedRef==null?void 0:animatedRef.current,eventHandler]);return offset;}function useScrollViewOffsetNative(animatedRef,providedOffset){var internalOffset=(0,_useSharedValue.useSharedValue)(0);var offset=(0,_react.useRef)(providedOffset!=null?providedOffset:internalOffset).current;var eventHandler=(0,_useEvent.useEvent)(function(event){'worklet';offset.value=event.contentOffset.x===0?event.contentOffset.y:event.contentOffset.x;},scrollNativeEventNames);(0,_react.useEffect)(function(){var _animatedRef$getTag;var elementTag=(_animatedRef$getTag=animatedRef==null?void 0:animatedRef.getTag())!=null?_animatedRef$getTag:null;if(elementTag){eventHandler.workletEventHandler.registerForEvents(elementTag);}return function(){if(elementTag){eventHandler.workletEventHandler.unregisterFromEvents(elementTag);}};},[animatedRef,animatedRef==null?void 0:animatedRef.current,eventHandler]);return offset;}function getWebScrollableElement(scrollComponent){var _scrollComponent$getS;return(_scrollComponent$getS=scrollComponent==null?void 0:scrollComponent.getScrollableNode())!=null?_scrollComponent$getS:scrollComponent;}var scrollNativeEventNames=['onScroll','onScrollBeginDrag','onScrollEndDrag','onMomentumScrollBegin','onMomentumScrollEnd'];","map":{"version":3,"names":["Object","defineProperty","exports","value","useScrollViewOffset","_react","require","_useEvent","_useSharedValue","_PlatformChecker","IS_WEB","isWeb","useScrollViewOffsetWeb","useScrollViewOffsetNative","animatedRef","providedOffset","internalOffset","useSharedValue","offset","useRef","current","eventHandler","useCallback","element","getWebScrollableElement","scrollLeft","scrollTop","useEffect","addEventListener","removeEventListener","useEvent","event","contentOffset","x","y","scrollNativeEventNames","_animatedRef$getTag","elementTag","getTag","workletEventHandler","registerForEvents","unregisterFromEvents","scrollComponent","_scrollComponent$getS","getScrollableNode"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-reanimated/src/hook/useScrollViewOffset.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef, useCallback } from 'react';\nimport type { SharedValue } from '../commonTypes';\nimport type { EventHandlerInternal } from './useEvent';\nimport { useEvent } from './useEvent';\nimport { useSharedValue } from './useSharedValue';\nimport type { AnimatedScrollView } from '../component/ScrollView';\nimport type {\n  AnimatedRef,\n  RNNativeScrollEvent,\n  ReanimatedScrollEvent,\n} from './commonTypes';\nimport { isWeb } from '../PlatformChecker';\n\nconst IS_WEB = isWeb();\n\n/**\n * Lets you synchronously get the current offset of a `ScrollView`.\n *\n * @param animatedRef - An [animated\n *   ref](https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef)\n *   attached to an Animated.ScrollView component.\n * @returns A shared value which holds the current offset of the `ScrollView`.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/scroll/useScrollViewOffset\n */\nexport const useScrollViewOffset = IS_WEB\n  ? useScrollViewOffsetWeb\n  : useScrollViewOffsetNative;\n\nfunction useScrollViewOffsetWeb(\n  animatedRef: AnimatedRef<AnimatedScrollView> | null,\n  providedOffset?: SharedValue<number>\n): SharedValue<number> {\n  const internalOffset = useSharedValue(0);\n  const offset = useRef(providedOffset ?? internalOffset).current;\n\n  const eventHandler = useCallback(() => {\n    'worklet';\n    if (animatedRef) {\n      const element = getWebScrollableElement(animatedRef.current);\n      // scrollLeft is the X axis scrolled offset, works properly also with RTL layout\n      offset.value =\n        element.scrollLeft === 0 ? element.scrollTop : element.scrollLeft;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animatedRef, animatedRef?.current]);\n\n  useEffect(() => {\n    const element = animatedRef?.current\n      ? getWebScrollableElement(animatedRef.current)\n      : null;\n\n    if (element) {\n      element.addEventListener('scroll', eventHandler);\n    }\n    return () => {\n      if (element) {\n        element.removeEventListener('scroll', eventHandler);\n      }\n    };\n    // React here has a problem with `animatedRef.current` since a Ref .current\n    // field shouldn't be used as a dependency. However, in this case we have\n    // to do it this way.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animatedRef, animatedRef?.current, eventHandler]);\n\n  return offset;\n}\n\nfunction useScrollViewOffsetNative(\n  animatedRef: AnimatedRef<AnimatedScrollView> | null,\n  providedOffset?: SharedValue<number>\n): SharedValue<number> {\n  const internalOffset = useSharedValue(0);\n  const offset = useRef(providedOffset ?? internalOffset).current;\n\n  const eventHandler = useEvent<RNNativeScrollEvent>(\n    (event: ReanimatedScrollEvent) => {\n      'worklet';\n      offset.value =\n        event.contentOffset.x === 0\n          ? event.contentOffset.y\n          : event.contentOffset.x;\n    },\n    scrollNativeEventNames\n    // Read https://github.com/software-mansion/react-native-reanimated/pull/5056\n    // for more information about this cast.\n  ) as unknown as EventHandlerInternal<ReanimatedScrollEvent>;\n\n  useEffect(() => {\n    const elementTag = animatedRef?.getTag() ?? null;\n\n    if (elementTag) {\n      eventHandler.workletEventHandler.registerForEvents(elementTag);\n    }\n    return () => {\n      if (elementTag) {\n        eventHandler.workletEventHandler.unregisterFromEvents(elementTag);\n      }\n    };\n    // React here has a problem with `animatedRef.current` since a Ref .current\n    // field shouldn't be used as a dependency. However, in this case we have\n    // to do it this way.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animatedRef, animatedRef?.current, eventHandler]);\n\n  return offset;\n}\n\nfunction getWebScrollableElement(\n  scrollComponent: AnimatedScrollView | null\n): HTMLElement {\n  return (\n    (scrollComponent?.getScrollableNode() as unknown as HTMLElement) ??\n    scrollComponent\n  );\n}\n\nconst scrollNativeEventNames = [\n  'onScroll',\n  'onScrollBeginDrag',\n  'onScrollEndDrag',\n  'onMomentumScrollBegin',\n  'onMomentumScrollEnd',\n];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}