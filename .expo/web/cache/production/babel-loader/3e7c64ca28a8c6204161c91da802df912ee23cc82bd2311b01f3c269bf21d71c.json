{"ast":null,"code":"'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});exports.useComposedEventHandler=useComposedEventHandler;var _useEvent=require(\"./useEvent.js\");var _useHandler2=require(\"./useHandler.js\");var _WorkletEventHandler=require(\"../WorkletEventHandler.js\");function useComposedEventHandler(handlers){var workletsRecord={};var composedEventNames=new Set();var workletsMap={};handlers.filter(function(h){return h!==null;}).forEach(function(handler){var workletEventHandler=handler.workletEventHandler;if(workletEventHandler instanceof _WorkletEventHandler.WorkletEventHandler){workletEventHandler.eventNames.forEach(function(eventName){composedEventNames.add(eventName);if(workletsMap[eventName]){workletsMap[eventName].push(workletEventHandler.worklet);}else{workletsMap[eventName]=[workletEventHandler.worklet];}var handlerName=eventName+`${workletsMap[eventName].length}`;workletsRecord[handlerName]=workletEventHandler.worklet;});}});var _useHandler=(0,_useHandler2.useHandler)(workletsRecord),doDependenciesDiffer=_useHandler.doDependenciesDiffer;return(0,_useEvent.useEvent)(function(event){'worklet';if(workletsMap[event.eventName]){workletsMap[event.eventName].forEach(function(worklet){return worklet(event);});}},Array.from(composedEventNames),doDependenciesDiffer);}","map":{"version":3,"names":["Object","defineProperty","exports","value","useComposedEventHandler","_useEvent","require","_useHandler2","_WorkletEventHandler","handlers","workletsRecord","composedEventNames","Set","workletsMap","filter","h","forEach","handler","workletEventHandler","WorkletEventHandler","eventNames","eventName","add","push","worklet","handlerName","length","_useHandler","useHandler","doDependenciesDiffer","useEvent","event","Array","from"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-reanimated/src/hook/useComposedEventHandler.ts"],"sourcesContent":["'use strict';\nimport { useEvent } from './useEvent';\nimport { useHandler } from './useHandler';\nimport { WorkletEventHandler } from '../WorkletEventHandler';\nimport type { ReanimatedEvent } from './commonTypes';\nimport type { WorkletFunction } from '../commonTypes';\nimport type { EventHandlerProcessed, EventHandlerInternal } from './useEvent';\n\ntype ComposedHandlerProcessed<\n  Event extends object,\n  Context extends Record<string, unknown> = Record<string, unknown>,\n> = EventHandlerProcessed<Event, Context>;\n\ntype ComposedHandlerInternal<Event extends object> =\n  EventHandlerInternal<Event>;\n\n/**\n * Lets you compose multiple event handlers based on\n * [useEvent](https://docs.swmansion.com/react-native-reanimated/docs/advanced/useEvent)\n * hook.\n *\n * @param handlers - An array of event handlers created using\n *   [useEvent](https://docs.swmansion.com/react-native-reanimated/docs/advanced/useEvent)\n *   hook.\n * @returns An object you need to pass to a coresponding \"onEvent\" prop on an\n *   `Animated` component (for example handlers responsible for `onScroll` event\n *   go to `onScroll` prop).\n * @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/useComposedEventHandler\n */\n// @ts-expect-error This overload is required by our API.\nexport function useComposedEventHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n>(\n  handlers: (EventHandlerProcessed<Event, Context> | null)[]\n): ComposedHandlerProcessed<Event, Context>;\n\nexport function useComposedEventHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n>(handlers: (EventHandlerProcessed<Event, Context> | null)[]) {\n  // Record of handlers' worklets to calculate deps diffs. We use the record type to match the useHandler API requirements\n  const workletsRecord: Record<string, WorkletFunction> = {};\n  // Summed event names for registration\n  const composedEventNames = new Set<string>();\n  // Map that holds worklets for specific handled events\n  const workletsMap: {\n    [key: string]: ((event: ReanimatedEvent<Event>) => void)[];\n  } = {};\n\n  handlers\n    .filter((h) => h !== null)\n    .forEach((handler) => {\n      // EventHandlerProcessed is the return type of useEvent and has to be force casted to EventHandlerInternal, because we need WorkletEventHandler object\n      const { workletEventHandler } =\n        handler as unknown as EventHandlerInternal<Context>;\n      if (workletEventHandler instanceof WorkletEventHandler) {\n        workletEventHandler.eventNames.forEach((eventName) => {\n          composedEventNames.add(eventName);\n\n          if (workletsMap[eventName]) {\n            workletsMap[eventName].push(workletEventHandler.worklet);\n          } else {\n            workletsMap[eventName] = [workletEventHandler.worklet];\n          }\n\n          const handlerName = eventName + `${workletsMap[eventName].length}`;\n          workletsRecord[handlerName] =\n            workletEventHandler.worklet as WorkletFunction;\n        });\n      }\n    });\n\n  const { doDependenciesDiffer } = useHandler(workletsRecord);\n\n  return useEvent<Event, Context>(\n    (event) => {\n      'worklet';\n      if (workletsMap[event.eventName]) {\n        workletsMap[event.eventName].forEach((worklet) => worklet(event));\n      }\n    },\n    Array.from(composedEventNames),\n    doDependenciesDiffer\n  ) as unknown as ComposedHandlerInternal<Event>;\n}\n"],"mappings":"AAAA,YAAY,CAAAA,MAAA,CAAAC,cAAA,CAAAC,OAAA,eAAAC,KAAA,QAAAD,OAAA,CAAAE,uBAAA,CAAAA,uBAAA,CACZ,IAAAC,SAAA,CAAAC,OAAA,kBACA,IAAAC,YAAA,CAAAD,OAAA,oBACA,IAAAE,oBAAA,CAAAF,OAAA,8BAkCO,QAAS,CAAAF,uBAAuBA,CAGrCK,QAA0D,CAAE,CAE5D,GAAM,CAAAC,cAA+C,CAAG,CAAC,CAAC,CAE1D,GAAM,CAAAC,kBAAkB,CAAG,GAAI,CAAAC,GAAG,CAAS,CAAC,CAE5C,GAAM,CAAAC,WAEL,CAAG,CAAC,CAAC,CAENJ,QAAQ,CACLK,MAAM,CAAE,SAAAC,CAAC,QAAK,CAAAA,CAAC,GAAK,IAAI,GAAC,CACzBC,OAAO,CAAE,SAAAC,OAAO,CAAK,CAEpB,GAAQ,CAAAC,mBAAA,CACND,OAAmD,CAD7CC,mBAAA,CAER,GAAIA,mBAAmB,WAAY,CAAAC,wCAAmB,CAAE,CACtDD,mBAAmB,CAACE,UAAU,CAACJ,OAAO,CAAE,SAAAK,SAAS,CAAK,CACpDV,kBAAkB,CAACW,GAAG,CAACD,SAAS,CAAC,CAEjC,GAAIR,WAAW,CAACQ,SAAS,CAAC,CAAE,CAC1BR,WAAW,CAACQ,SAAS,CAAC,CAACE,IAAI,CAACL,mBAAmB,CAACM,OAAO,CAAC,CAC1D,CAAC,IAAM,CACLX,WAAW,CAACQ,SAAS,CAAC,CAAG,CAACH,mBAAmB,CAACM,OAAO,CAAC,CACxD,CAEA,GAAM,CAAAC,WAAW,CAAGJ,SAAS,CAAG,GAAGR,WAAW,CAACQ,SAAS,CAAC,CAACK,MAAM,EAAE,CAClEhB,cAAc,CAACe,WAAW,CAAC,CACzBP,mBAAmB,CAACM,OAA0B,CAClD,CAAC,CAAC,CACJ,CACF,CAAC,CAAC,CAEJ,IAAAG,WAAA,CAAiC,GAAAC,uBAAU,EAAClB,cAAc,CAAC,CAAnDmB,oBAAA,CAAAF,WAAA,CAAAE,oBAAA,CAER,MAAO,GAAAC,kBAAQ,EACZ,SAAAC,KAAK,CAAK,CACT,SAAS,CACT,GAAIlB,WAAW,CAACkB,KAAK,CAACV,SAAS,CAAC,CAAE,CAChCR,WAAW,CAACkB,KAAK,CAACV,SAAS,CAAC,CAACL,OAAO,CAAE,SAAAQ,OAAO,QAAK,CAAAA,OAAO,CAACO,KAAK,CAAC,GAAC,CACnE,CACF,CAAC,CACDC,KAAK,CAACC,IAAI,CAACtB,kBAAkB,CAAC,CAC9BkB,oBACF,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}