{"ast":null,"code":"\"use strict\";var _toConsumableArray=require(\"@babel/runtime/helpers/toConsumableArray\");var _slicedToArray=require(\"@babel/runtime/helpers/slicedToArray\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.getPathFromState=getPathFromState;var queryString=_interopRequireWildcard(require(\"query-string\"));var _getPatternParts=require(\"./getPatternParts.js\");var _validatePathConfig=require(\"./validatePathConfig.js\");function _getRequireWildcardCache(e){if(\"function\"!=typeof WeakMap)return null;var r=new WeakMap(),t=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r;})(e);}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(\"default\"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n;}var _getActiveRoute=function getActiveRoute(state){var route=typeof state.index==='number'?state.routes[state.index]:state.routes[state.routes.length-1];if(route.state){return _getActiveRoute(route.state);}return route;};var cachedNormalizedConfigs=new WeakMap();var getNormalizedConfigs=function getNormalizedConfigs(options){if(!(options!=null&&options.screens))return{};var cached=cachedNormalizedConfigs.get(options==null?void 0:options.screens);if(cached)return cached;var normalizedConfigs=createNormalizedConfigs(options.screens);cachedNormalizedConfigs.set(options.screens,normalizedConfigs);return normalizedConfigs;};function getPathFromState(state,options){if(state==null){throw Error(`Got '${String(state)}' for the navigation state. You must pass a valid state object.`);}if(options){(0,_validatePathConfig.validatePathConfig)(options);}var configs=getNormalizedConfigs(options);var path='/';var current=state;var allParams={};var _loop=function _loop(){var index=typeof current.index==='number'?current.index:0;var route=current.routes[index];var parts;var focusedParams;var currentOptions=configs;var focusedRoute=_getActiveRoute(state);var nestedRouteNames=[];var hasNext=true;var _loop2=function _loop2(){parts=currentOptions[route.name].parts;nestedRouteNames.push(route.name);if(route.params){var _currentOptions$route,_parts2;var stringify=(_currentOptions$route=currentOptions[route.name])==null?void 0:_currentOptions$route.stringify;var currentParams=Object.fromEntries(Object.entries(route.params).map(function(_ref4){var _ref5=_slicedToArray(_ref4,2),key=_ref5[0],value=_ref5[1];return[key,stringify!=null&&stringify[key]?stringify[key](value):String(value)];}));if((_parts2=parts)!=null&&_parts2.length){Object.assign(allParams,currentParams);}if(focusedRoute===route){var _parts3;focusedParams=Object.assign({},currentParams);(_parts3=parts)==null||_parts3.forEach(function(_ref6){var param=_ref6.param;if(param){if(focusedParams){delete focusedParams[param];}}});}}if(!currentOptions[route.name].screens||route.state===undefined){hasNext=false;}else{index=typeof route.state.index==='number'?route.state.index:route.state.routes.length-1;var nextRoute=route.state.routes[index];var nestedConfig=currentOptions[route.name].screens;if(nestedConfig&&nextRoute.name in nestedConfig){route=nextRoute;currentOptions=nestedConfig;}else{hasNext=false;}}};while(route.name in currentOptions&&hasNext){_loop2();}if(currentOptions[route.name]!==undefined){var _parts;path+=(_parts=parts)==null?void 0:_parts.map(function(_ref){var segment=_ref.segment,param=_ref.param,optional=_ref.optional;if(segment==='*'){return route.name;}if(param){var value=allParams[param];if(value===undefined&&optional){return'';}return String(value).replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]/g,function(char){return encodeURIComponent(char);});}return encodeURIComponent(segment);}).join('/');}else{path+=encodeURIComponent(route.name);}if(!focusedParams&&focusedRoute.params){focusedParams=Object.fromEntries(Object.entries(focusedRoute.params).map(function(_ref2){var _ref3=_slicedToArray(_ref2,2),key=_ref3[0],value=_ref3[1];return[key,String(value)];}));}if(route.state){path+='/';}else if(focusedParams){for(var param in focusedParams){if(focusedParams[param]==='undefined'){delete focusedParams[param];}}var query=queryString.stringify(focusedParams,{sort:false});if(query){path+=`?${query}`;}}current=route.state;};while(current){_loop();}if(options!=null&&options.path){path=`${options.path}/${path}`;}path=path.replace(/\\/+/g,'/');path=path.length>1?path.replace(/\\/$/,''):path;if(!path.startsWith('/')){path=`/${path}`;}return path;}var createConfigItem=function createConfigItem(config,parentParts){if(typeof config==='string'){var _parts4=(0,_getPatternParts.getPatternParts)(config);if(parentParts){return{parts:[].concat(_toConsumableArray(parentParts),_toConsumableArray(_parts4))};}return{parts:_parts4};}if(config.exact&&config.path===undefined){throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");}var parts=config.exact!==true?[].concat(_toConsumableArray(parentParts||[]),_toConsumableArray(config.path?(0,_getPatternParts.getPatternParts)(config.path):[])):config.path?(0,_getPatternParts.getPatternParts)(config.path):undefined;var screens=config.screens?createNormalizedConfigs(config.screens,parts):undefined;return{parts:parts,stringify:config.stringify,screens:screens};};var createNormalizedConfigs=function createNormalizedConfigs(options,parts){return Object.fromEntries(Object.entries(options).map(function(_ref7){var _ref8=_slicedToArray(_ref7,2),name=_ref8[0],c=_ref8[1];var result=createConfigItem(c,parts);return[name,result];}));};","map":{"version":3,"names":["queryString","_interopRequireWildcard","require","_getPatternParts","_validatePathConfig","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","getActiveRoute","state","route","index","routes","length","cachedNormalizedConfigs","getNormalizedConfigs","options","screens","cached","normalizedConfigs","createNormalizedConfigs","getPathFromState","Error","String","validatePathConfig","configs","path","current","allParams","_loop","parts","focusedParams","currentOptions","focusedRoute","nestedRouteNames","hasNext","_loop2","name","push","params","_currentOptions$route","_parts2","stringify","currentParams","fromEntries","entries","map","_ref4","_ref5","_slicedToArray","key","value","assign","_parts3","forEach","_ref6","param","undefined","nextRoute","nestedConfig","_parts","_ref","segment","optional","replace","char","encodeURIComponent","join","_ref2","_ref3","query","sort","startsWith","createConfigItem","config","parentParts","getPatternParts","concat","_toConsumableArray","exact","_ref7","_ref8","c","result"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/@react-navigation/core/src/getPathFromState.tsx"],"sourcesContent":["import type {\n  NavigationState,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as queryString from 'query-string';\n\nimport { getPatternParts, type PatternPart } from './getPatternParts';\nimport type { PathConfig, PathConfigMap } from './types';\nimport { validatePathConfig } from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  path?: string;\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\n\ntype StringifyConfig = Record<string, (value: unknown) => string>;\n\ntype ConfigItem = {\n  parts?: PatternPart[];\n  stringify?: StringifyConfig;\n  screens?: Record<string, ConfigItem>;\n};\n\nconst getActiveRoute = (state: State): { name: string; params?: object } => {\n  const route =\n    typeof state.index === 'number'\n      ? state.routes[state.index]\n      : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\nconst cachedNormalizedConfigs = new WeakMap<\n  PathConfigMap<{}>,\n  Record<string, ConfigItem>\n>();\n\nconst getNormalizedConfigs = (options?: Options<{}>) => {\n  if (!options?.screens) return {};\n\n  const cached = cachedNormalizedConfigs.get(options?.screens);\n\n  if (cached) return cached;\n\n  const normalizedConfigs = createNormalizedConfigs(options.screens);\n\n  cachedNormalizedConfigs.set(options.screens, normalizedConfigs);\n\n  return normalizedConfigs;\n};\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * @example\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport function getPathFromState<ParamList extends {}>(\n  state: State,\n  options?: Options<ParamList>\n): string {\n  if (state == null) {\n    throw Error(\n      `Got '${String(state)}' for the navigation state. You must pass a valid state object.`\n    );\n  }\n\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  const configs = getNormalizedConfigs(options);\n\n  let path = '/';\n  let current: State | undefined = state;\n\n  const allParams: Record<string, string> = {};\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index] as Route<string> & {\n      state?: State;\n    };\n\n    let parts: PatternPart[] | undefined;\n\n    let focusedParams: Record<string, string> | undefined;\n    let currentOptions = configs;\n\n    const focusedRoute = getActiveRoute(state);\n\n    // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    const nestedRouteNames = [];\n\n    let hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      parts = currentOptions[route.name].parts;\n\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        const stringify = currentOptions[route.name]?.stringify;\n\n        const currentParams = Object.fromEntries(\n          Object.entries(route.params).map(([key, value]) => [\n            key,\n            stringify?.[key] ? stringify[key](value) : String(value),\n          ])\n        );\n\n        if (parts?.length) {\n          Object.assign(allParams, currentParams);\n        }\n\n        if (focusedRoute === route) {\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = { ...currentParams };\n\n          parts\n            // eslint-disable-next-line no-loop-func\n            ?.forEach(({ param }) => {\n              if (param) {\n                // Remove the params present in the pattern since we'll only use the rest for query string\n                if (focusedParams) {\n                  // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                  delete focusedParams[param];\n                }\n              }\n            });\n        }\n      }\n\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index =\n          typeof route.state.index === 'number'\n            ? route.state.index\n            : route.state.routes.length - 1;\n\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n\n        // if there is config for next route name, we go deeper\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute as Route<string> & { state?: State };\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      path += parts\n        ?.map(({ segment, param, optional }) => {\n          // We don't know what to show for wildcard patterns\n          // Showing the route name seems ok, though whatever we show here will be incorrect\n          // Since the page doesn't actually exist\n          if (segment === '*') {\n            return route.name;\n          }\n\n          // If the path has a pattern for a param, put the param in the path\n          if (param) {\n            const value = allParams[param];\n\n            if (value === undefined && optional) {\n              // Optional params without value assigned in route.params should be ignored\n              return '';\n            }\n\n            // Valid characters according to\n            // https://datatracker.ietf.org/doc/html/rfc3986#section-3.3 (see pchar definition)\n            return String(value).replace(\n              /[^A-Za-z0-9\\-._~!$&'()*+,;=:@]/g,\n              (char) => encodeURIComponent(char)\n            );\n          }\n\n          return encodeURIComponent(segment);\n        })\n        .join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (!focusedParams && focusedRoute.params) {\n      focusedParams = Object.fromEntries(\n        Object.entries(focusedRoute.params).map(([key, value]) => [\n          key,\n          String(value),\n        ])\n      );\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (const param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n\n      const query = queryString.stringify(focusedParams, { sort: false });\n\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n\n    current = route.state;\n  }\n\n  // Include the root path if specified\n  if (options?.path) {\n    path = `${options.path}/${path}`;\n  }\n\n  // Remove multiple as well as trailing slashes\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n\n  // If path doesn't start with a slash, add it\n  // This makes sure that history.pushState will update the path correctly instead of appending\n  if (!path.startsWith('/')) {\n    path = `/${path}`;\n  }\n\n  return path;\n}\n\nconst createConfigItem = (\n  config: PathConfig<object> | string,\n  parentParts?: PatternPart[]\n): ConfigItem => {\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const parts = getPatternParts(config);\n\n    if (parentParts) {\n      return { parts: [...parentParts, ...parts] };\n    }\n\n    return { parts };\n  }\n\n  if (config.exact && config.path === undefined) {\n    throw new Error(\n      \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n    );\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  const parts =\n    config.exact !== true\n      ? [\n          ...(parentParts || []),\n          ...(config.path ? getPatternParts(config.path) : []),\n        ]\n      : config.path\n        ? getPatternParts(config.path)\n        : undefined;\n\n  const screens = config.screens\n    ? createNormalizedConfigs(config.screens, parts)\n    : undefined;\n\n  return {\n    parts,\n    stringify: config.stringify,\n    screens,\n  };\n};\n\nconst createNormalizedConfigs = (\n  options: PathConfigMap<object>,\n  parts?: PatternPart[]\n): Record<string, ConfigItem> =>\n  Object.fromEntries(\n    Object.entries(options).map(([name, c]) => {\n      const result = createConfigItem(c, parts);\n\n      return [name, result];\n    })\n  );\n"],"mappings":"8PAKA,IAAAA,WAAA,CAAAC,uBAAA,CAAAC,OAAA,kBAEA,IAAAC,gBAAA,CAAAD,OAAA,yBAEA,IAAAE,mBAAA,CAAAF,OAAA,4BAA0D,SAAAG,yBAAAC,CAAA,wBAAAC,OAAA,iBAAAC,CAAA,KAAAD,OAAA,GAAAE,CAAA,KAAAF,OAAA,UAAAF,wBAAA,UAAAA,yBAAAC,CAAA,SAAAA,CAAA,CAAAG,CAAA,CAAAD,CAAA,IAAAF,CAAA,YAAAL,wBAAAK,CAAA,CAAAE,CAAA,MAAAA,CAAA,EAAAF,CAAA,EAAAA,CAAA,CAAAI,UAAA,QAAAJ,CAAA,WAAAA,CAAA,mBAAAA,CAAA,qBAAAA,CAAA,QAAAK,OAAA,CAAAL,CAAA,MAAAG,CAAA,CAAAJ,wBAAA,CAAAG,CAAA,KAAAC,CAAA,EAAAA,CAAA,CAAAG,GAAA,CAAAN,CAAA,SAAAG,CAAA,CAAAI,GAAA,CAAAP,CAAA,MAAAQ,CAAA,EAAAC,SAAA,OAAAC,CAAA,CAAAC,MAAA,CAAAC,cAAA,EAAAD,MAAA,CAAAE,wBAAA,SAAAC,CAAA,IAAAd,CAAA,gBAAAc,CAAA,KAAAC,cAAA,CAAAC,IAAA,CAAAhB,CAAA,CAAAc,CAAA,OAAAG,CAAA,CAAAP,CAAA,CAAAC,MAAA,CAAAE,wBAAA,CAAAb,CAAA,CAAAc,CAAA,OAAAG,CAAA,GAAAA,CAAA,CAAAV,GAAA,EAAAU,CAAA,CAAAC,GAAA,EAAAP,MAAA,CAAAC,cAAA,CAAAJ,CAAA,CAAAM,CAAA,CAAAG,CAAA,EAAAT,CAAA,CAAAM,CAAA,EAAAd,CAAA,CAAAc,CAAA,UAAAN,CAAA,CAAAH,OAAA,CAAAL,CAAA,CAAAG,CAAA,EAAAA,CAAA,CAAAe,GAAA,CAAAlB,CAAA,CAAAQ,CAAA,EAAAA,CAAA,EAkB1D,GAAM,CAAAW,eAAc,CAAI,QAAlB,CAAAA,cAAcA,CAAIC,KAAY,CAAwC,CAC1E,GAAM,CAAAC,KAAK,CACT,MAAO,CAAAD,KAAK,CAACE,KAAK,GAAK,QAAQ,CAC3BF,KAAK,CAACG,MAAM,CAACH,KAAK,CAACE,KAAK,CAAC,CACzBF,KAAK,CAACG,MAAM,CAACH,KAAK,CAACG,MAAM,CAACC,MAAM,CAAG,CAAC,CAAC,CAE3C,GAAIH,KAAK,CAACD,KAAK,CAAE,CACf,MAAO,CAAAD,eAAc,CAACE,KAAK,CAACD,KAAK,CAAC,CACpC,CAEA,MAAO,CAAAC,KAAK,CACd,CAAC,CAED,GAAM,CAAAI,uBAAuB,CAAG,GAAI,CAAAxB,OAAO,CAGzC,CAAC,CAEH,GAAM,CAAAyB,oBAAoB,CAAI,QAAxB,CAAAA,oBAAoBA,CAAIC,OAAqB,CAAK,CACtD,GAAI,EAACA,OAAO,QAAPA,OAAO,CAAEC,OAAO,EAAE,MAAO,CAAC,CAAC,CAEhC,GAAM,CAAAC,MAAM,CAAGJ,uBAAuB,CAAClB,GAAG,CAACoB,OAAO,cAAPA,OAAO,CAAEC,OAAO,CAAC,CAE5D,GAAIC,MAAM,CAAE,MAAO,CAAAA,MAAM,CAEzB,GAAM,CAAAC,iBAAiB,CAAGC,uBAAuB,CAACJ,OAAO,CAACC,OAAO,CAAC,CAElEH,uBAAuB,CAACP,GAAG,CAACS,OAAO,CAACC,OAAO,CAAEE,iBAAiB,CAAC,CAE/D,MAAO,CAAAA,iBAAiB,CAC1B,CAAC,CA+BM,QAAS,CAAAE,gBAAgBA,CAC9BZ,KAAY,CACZO,OAA4B,CACpB,CACR,GAAIP,KAAK,EAAI,IAAI,CAAE,CACjB,KAAM,CAAAa,KAAK,CACT,QAAQC,MAAM,CAACd,KAAK,CAAC,iEACvB,CAAC,CACH,CAEA,GAAIO,OAAO,CAAE,CACX,GAAA7B,mBAAA,CAAAqC,kBAAkB,EAACR,OAAO,CAAC,CAC7B,CAEA,GAAM,CAAAS,OAAO,CAAGV,oBAAoB,CAACC,OAAO,CAAC,CAE7C,GAAI,CAAAU,IAAI,CAAG,GAAG,CACd,GAAI,CAAAC,OAA0B,CAAGlB,KAAK,CAEtC,GAAM,CAAAmB,SAAiC,CAAG,CAAC,CAAC,KAAAC,KAAA,UAAAA,MAAA,CAE5B,CACd,GAAI,CAAAlB,KAAK,CAAG,MAAO,CAAAgB,OAAO,CAAChB,KAAK,GAAK,QAAQ,CAAGgB,OAAO,CAAChB,KAAK,CAAG,CAAC,CACjE,GAAI,CAAAD,KAAK,CAAGiB,OAAO,CAACf,MAAM,CAACD,KAAK,CAE/B,CAED,GAAI,CAAAmB,KAAgC,CAEpC,GAAI,CAAAC,aAAiD,CACrD,GAAI,CAAAC,cAAc,CAAGP,OAAO,CAE5B,GAAM,CAAAQ,YAAY,CAAGzB,eAAc,CAACC,KAAK,CAAC,CAG1C,GAAM,CAAAyB,gBAAgB,CAAG,EAAE,CAE3B,GAAI,CAAAC,OAAO,CAAG,IAAI,KAAAC,MAAA,UAAAA,OAAA,CAE8B,CAC9CN,KAAK,CAAGE,cAAc,CAACtB,KAAK,CAAC2B,IAAI,CAAC,CAACP,KAAK,CAExCI,gBAAgB,CAACI,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAAC,CAEjC,GAAI3B,KAAK,CAAC6B,MAAM,CAAE,KAAAC,qBAAA,CAAAC,OAAA,CAChB,GAAM,CAAAC,SAAS,EAAAF,qBAAA,CAAGR,cAAc,CAACtB,KAAK,CAAC2B,IAAI,CAAC,eAA1BG,qBAAA,CAA4BE,SAAS,CAEvD,GAAM,CAAAC,aAAa,CAAG3C,MAAM,CAAC4C,WAAW,CACtC5C,MAAM,CAAC6C,OAAO,CAACnC,KAAK,CAAC6B,MAAM,CAAC,CAACO,GAAG,CAAC,SAAAC,KAAA,MAAAC,KAAA,CAAAC,cAAA,CAAAF,KAAA,IAAEG,GAAG,CAAAF,KAAA,IAAEG,KAAK,CAAAH,KAAA,UAAM,CACjDE,GAAG,CACHR,SAAS,QAATA,SAAS,CAAGQ,GAAG,CAAC,CAAGR,SAAS,CAACQ,GAAG,CAAC,CAACC,KAAK,CAAC,CAAG5B,MAAM,CAAC4B,KAAK,CAAC,CACzD,GACH,CAAC,CAED,IAAAV,OAAA,CAAIX,KAAK,SAALW,OAAA,CAAO5B,MAAM,CAAE,CACjBb,MAAM,CAACoD,MAAM,CAACxB,SAAS,CAAEe,aAAa,CAAC,CACzC,CAEA,GAAIV,YAAY,GAAKvB,KAAK,CAAE,KAAA2C,OAAA,CAG1BtB,aAAa,CAAA/B,MAAA,CAAAoD,MAAA,IAAQT,aAAA,CAAe,CAEpC,CAAAU,OAAA,CAAAvB,KAAA,SAAAuB,OAAA,CAEIC,OAAO,CAAC,SAAAC,KAAA,CAAe,IAAZ,CAAAC,KAAA,CAAAD,KAAA,CAAAC,KAAA,CACX,GAAIA,KAAK,CAAE,CAET,GAAIzB,aAAa,CAAE,CAEjB,MAAO,CAAAA,aAAa,CAACyB,KAAK,CAAC,CAC7B,CACF,CACF,CAAC,CAAC,CACN,CACF,CAGA,GAAI,CAACxB,cAAc,CAACtB,KAAK,CAAC2B,IAAI,CAAC,CAACpB,OAAO,EAAIP,KAAK,CAACD,KAAK,GAAKgD,SAAS,CAAE,CACpEtB,OAAO,CAAG,KAAK,CACjB,CAAC,IAAM,CACLxB,KAAK,CACH,MAAO,CAAAD,KAAK,CAACD,KAAK,CAACE,KAAK,GAAK,QAAQ,CACjCD,KAAK,CAACD,KAAK,CAACE,KAAK,CACjBD,KAAK,CAACD,KAAK,CAACG,MAAM,CAACC,MAAM,CAAG,CAAC,CAEnC,GAAM,CAAA6C,SAAS,CAAGhD,KAAK,CAACD,KAAK,CAACG,MAAM,CAACD,KAAK,CAAC,CAC3C,GAAM,CAAAgD,YAAY,CAAG3B,cAAc,CAACtB,KAAK,CAAC2B,IAAI,CAAC,CAACpB,OAAO,CAGvD,GAAI0C,YAAY,EAAID,SAAS,CAACrB,IAAI,GAAI,CAAAsB,YAAY,CAAE,CAClDjD,KAAK,CAAGgD,SAA8C,CACtD1B,cAAc,CAAG2B,YAAY,CAC/B,CAAC,IAAM,CAELxB,OAAO,CAAG,KAAK,CACjB,CACF,CACF,EA3DA,MAAOzB,KAAK,CAAC2B,IAAI,GAAI,CAAAL,cAAc,EAAIG,OAAO,EAAAC,MAAA,IA6D9C,GAAIJ,cAAc,CAACtB,KAAK,CAAC2B,IAAI,CAAC,GAAKoB,SAAS,CAAE,KAAAG,MAAA,CAC5ClC,IAAI,GAAAkC,MAAA,CAAI9B,KAAK,eAAL8B,MAAA,CACJd,GAAG,CAAC,SAAAe,IAAA,CAAkC,IAA/B,CAAAC,OAAO,CAAAD,IAAA,CAAPC,OAAO,CAAEN,KAAK,CAAAK,IAAA,CAALL,KAAK,CAAEO,QAAA,CAAAF,IAAA,CAAAE,QAAA,CAIvB,GAAID,OAAO,GAAK,GAAG,CAAE,CACnB,MAAO,CAAApD,KAAK,CAAC2B,IAAI,CACnB,CAGA,GAAImB,KAAK,CAAE,CACT,GAAM,CAAAL,KAAK,CAAGvB,SAAS,CAAC4B,KAAK,CAAC,CAE9B,GAAIL,KAAK,GAAKM,SAAS,EAAIM,QAAQ,CAAE,CAEnC,MAAO,EAAE,CACX,CAIA,MAAO,CAAAxC,MAAM,CAAC4B,KAAK,CAAC,CAACa,OAAO,CAC1B,iCAAiC,CAChC,SAAAC,IAAI,QAAK,CAAAC,kBAAkB,CAACD,IAAI,CACnC,GAAC,CACH,CAEA,MAAO,CAAAC,kBAAkB,CAACJ,OAAO,CAAC,CACpC,CAAC,CAAC,CACDK,IAAI,CAAC,GAAG,CAAC,CACd,CAAC,IAAM,CACLzC,IAAI,EAAIwC,kBAAkB,CAACxD,KAAK,CAAC2B,IAAI,CAAC,CACxC,CAEA,GAAI,CAACN,aAAa,EAAIE,YAAY,CAACM,MAAM,CAAE,CACzCR,aAAa,CAAG/B,MAAM,CAAC4C,WAAW,CAChC5C,MAAM,CAAC6C,OAAO,CAACZ,YAAY,CAACM,MAAM,CAAC,CAACO,GAAG,CAAC,SAAAsB,KAAA,MAAAC,KAAA,CAAApB,cAAA,CAAAmB,KAAA,IAAElB,GAAG,CAAAmB,KAAA,IAAElB,KAAK,CAAAkB,KAAA,UAAM,CACxDnB,GAAG,CACH3B,MAAM,CAAC4B,KAAK,CAAC,CACd,GACH,CAAC,CACH,CAEA,GAAIzC,KAAK,CAACD,KAAK,CAAE,CACfiB,IAAI,EAAI,GAAG,CACb,CAAC,IAAM,IAAIK,aAAa,CAAE,CACxB,IAAK,GAAM,CAAAyB,KAAK,GAAI,CAAAzB,aAAa,CAAE,CACjC,GAAIA,aAAa,CAACyB,KAAK,CAAC,GAAK,WAAW,CAAE,CAExC,MAAO,CAAAzB,aAAa,CAACyB,KAAK,CAAC,CAC7B,CACF,CAEA,GAAM,CAAAc,KAAK,CAAGvF,WAAW,CAAC2D,SAAS,CAACX,aAAa,CAAE,CAAEwC,IAAI,CAAE,KAAM,CAAC,CAAC,CAEnE,GAAID,KAAK,CAAE,CACT5C,IAAI,EAAI,IAAI4C,KAAK,EAAE,CACrB,CACF,CAEA3C,OAAO,CAAGjB,KAAK,CAACD,KAAK,CACvB,EA5IA,MAAOkB,OAAO,EAAAE,KAAA,IA+Id,GAAIb,OAAO,QAAPA,OAAO,CAAEU,IAAI,CAAE,CACjBA,IAAI,CAAG,GAAGV,OAAO,CAACU,IAAI,IAAIA,IAAI,EAAE,CAClC,CAGAA,IAAI,CAAGA,IAAI,CAACsC,OAAO,CAAC,MAAM,CAAE,GAAG,CAAC,CAChCtC,IAAI,CAAGA,IAAI,CAACb,MAAM,CAAG,CAAC,CAAGa,IAAI,CAACsC,OAAO,CAAC,KAAK,CAAE,EAAE,CAAC,CAAGtC,IAAI,CAIvD,GAAI,CAACA,IAAI,CAAC8C,UAAU,CAAC,GAAG,CAAC,CAAE,CACzB9C,IAAI,CAAG,IAAIA,IAAI,EAAE,CACnB,CAEA,MAAO,CAAAA,IAAI,CACb,CAEA,GAAM,CAAA+C,gBAAgB,CAAG,QAAnB,CAAAA,gBAAgBA,CACpBC,MAAmC,CACnCC,WAA2B,CACZ,CACf,GAAI,MAAO,CAAAD,MAAM,GAAK,QAAQ,CAAE,CAE9B,GAAM,CAAA5C,OAAK,CAAG,GAAA5C,gBAAA,CAAA0F,eAAe,EAACF,MAAM,CAAC,CAErC,GAAIC,WAAW,CAAE,CACf,MAAO,CAAE7C,KAAK,IAAA+C,MAAA,CAAAC,kBAAA,CAAMH,WAAW,EAAAG,kBAAA,CAAKhD,OAAK,EAAE,CAAC,CAC9C,CAEA,MAAO,CAAEA,KAAA,CAAAA,OAAM,CAAC,CAClB,CAEA,GAAI4C,MAAM,CAACK,KAAK,EAAIL,MAAM,CAAChD,IAAI,GAAK+B,SAAS,CAAE,CAC7C,KAAM,IAAI,CAAAnC,KAAK,CACb,sJACF,CAAC,CACH,CAIA,GAAM,CAAAQ,KAAK,CACT4C,MAAM,CAACK,KAAK,GAAK,IAAI,IAAAF,MAAA,CAAAC,kBAAA,CAEXH,WAAW,EAAI,EAAE,EAAAG,kBAAA,CACjBJ,MAAM,CAAChD,IAAI,CAAG,GAAAxC,gBAAA,CAAA0F,eAAe,EAACF,MAAM,CAAChD,IAAI,CAAC,CAAG,EAAE,GAErDgD,MAAM,CAAChD,IAAI,CACT,GAAAxC,gBAAA,CAAA0F,eAAe,EAACF,MAAM,CAAChD,IAAI,CAAC,CAC5B+B,SAAS,CAEjB,GAAM,CAAAxC,OAAO,CAAGyD,MAAM,CAACzD,OAAO,CAC1BG,uBAAuB,CAACsD,MAAM,CAACzD,OAAO,CAAEa,KAAK,CAAC,CAC9C2B,SAAS,CAEb,MAAO,CACL3B,KAAK,CAALA,KAAK,CACLY,SAAS,CAAEgC,MAAM,CAAChC,SAAS,CAC3BzB,OAAA,CAAAA,OACF,CAAC,CACH,CAAC,CAED,GAAM,CAAAG,uBAAuB,CAAG,QAA1B,CAAAA,uBAAuBA,CAC3BJ,OAA8B,CAC9Bc,KAAqB,QAErB,CAAA9B,MAAM,CAAC4C,WAAW,CAChB5C,MAAM,CAAC6C,OAAO,CAAC7B,OAAO,CAAC,CAAC8B,GAAG,CAAC,SAAAkC,KAAA,CAAe,KAAAC,KAAA,CAAAhC,cAAA,CAAA+B,KAAA,IAAb3C,IAAI,CAAA4C,KAAA,IAAEC,CAAC,CAAAD,KAAA,IACnC,GAAM,CAAAE,MAAM,CAAGV,gBAAgB,CAACS,CAAC,CAAEpD,KAAK,CAAC,CAEzC,MAAO,CAACO,IAAI,CAAE8C,MAAM,CAAC,CACvB,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}