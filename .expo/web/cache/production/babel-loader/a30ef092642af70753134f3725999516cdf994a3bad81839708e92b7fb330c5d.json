{"ast":null,"code":"'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});exports.Extrapolate=exports.ColorSpace=void 0;exports.interpolateColor=interpolateColor;exports.useInterpolateConfig=useInterpolateConfig;var _Colors=require(\"./Colors.js\");var _core=require(\"./core.js\");var _interpolation=require(\"./interpolation.js\");var _useSharedValue=require(\"./hook/useSharedValue.js\");var _errors=require(\"./errors.js\");var Extrapolate=exports.Extrapolate=_interpolation.Extrapolation;var interpolateColorsHSV=function interpolateColorsHSV(value,inputRange,colors,options){'worklet';var h=0;var _options$useCorrected=options.useCorrectedHSVInterpolation,useCorrectedHSVInterpolation=_options$useCorrected===void 0?true:_options$useCorrected;if(useCorrectedHSVInterpolation){var correctedInputRange=[inputRange[0]];var originalH=colors.h;var correctedH=[originalH[0]];for(var i=1;i<originalH.length;++i){var d=originalH[i]-originalH[i-1];if(originalH[i]>originalH[i-1]&&d>0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]-1);correctedH.push(originalH[i]);}else if(originalH[i]<originalH[i-1]&&d<-0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]+1);correctedH.push(originalH[i]);}else{correctedInputRange.push(inputRange[i]);correctedH.push(originalH[i]);}}h=((0,_interpolation.interpolate)(value,correctedInputRange,correctedH,_interpolation.Extrapolation.CLAMP)+1)%1;}else{h=(0,_interpolation.interpolate)(value,inputRange,colors.h,_interpolation.Extrapolation.CLAMP);}var s=(0,_interpolation.interpolate)(value,inputRange,colors.s,_interpolation.Extrapolation.CLAMP);var v=(0,_interpolation.interpolate)(value,inputRange,colors.v,_interpolation.Extrapolation.CLAMP);var a=(0,_interpolation.interpolate)(value,inputRange,colors.a,_interpolation.Extrapolation.CLAMP);return(0,_Colors.hsvToColor)(h,s,v,a);};var toLinearSpace=function toLinearSpace(x,gamma){'worklet';return x.map(function(v){return Math.pow(v/255,gamma);});};var toGammaSpace=function toGammaSpace(x,gamma){'worklet';return Math.round(Math.pow(x,1/gamma)*255);};var interpolateColorsRGB=function interpolateColorsRGB(value,inputRange,colors,options){'worklet';var _options$gamma=options.gamma,gamma=_options$gamma===void 0?2.2:_options$gamma;var outputR=colors.r,outputG=colors.g,outputB=colors.b;if(gamma!==1){outputR=toLinearSpace(outputR,gamma);outputG=toLinearSpace(outputG,gamma);outputB=toLinearSpace(outputB,gamma);}var r=(0,_interpolation.interpolate)(value,inputRange,outputR,_interpolation.Extrapolation.CLAMP);var g=(0,_interpolation.interpolate)(value,inputRange,outputG,_interpolation.Extrapolation.CLAMP);var b=(0,_interpolation.interpolate)(value,inputRange,outputB,_interpolation.Extrapolation.CLAMP);var a=(0,_interpolation.interpolate)(value,inputRange,colors.a,_interpolation.Extrapolation.CLAMP);if(gamma===1){return(0,_Colors.rgbaColor)(r,g,b,a);}return(0,_Colors.rgbaColor)(toGammaSpace(r,gamma),toGammaSpace(g,gamma),toGammaSpace(b,gamma),a);};var getInterpolateRGB=function getInterpolateRGB(colors){'worklet';var r=[];var g=[];var b=[];var a=[];for(var i=0;i<colors.length;++i){var color=colors[i];var processedColor=(0,_Colors.processColor)(color);if(processedColor!==null&&processedColor!==undefined){r.push((0,_Colors.red)(processedColor));g.push((0,_Colors.green)(processedColor));b.push((0,_Colors.blue)(processedColor));a.push((0,_Colors.opacity)(processedColor));}}return{r:r,g:g,b:b,a:a};};var getInterpolateHSV=function getInterpolateHSV(colors){'worklet';var h=[];var s=[];var v=[];var a=[];for(var i=0;i<colors.length;++i){var color=colors[i];var processedColor=(0,_Colors.processColor)(color);if(typeof processedColor==='number'){var processedHSVColor=(0,_Colors.RGBtoHSV)((0,_Colors.red)(processedColor),(0,_Colors.green)(processedColor),(0,_Colors.blue)(processedColor));h.push(processedHSVColor.h);s.push(processedHSVColor.s);v.push(processedHSVColor.v);a.push((0,_Colors.opacity)(processedColor));}}return{h:h,s:s,v:v,a:a};};function interpolateColor(value,inputRange,outputRange){'worklet';var colorSpace=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'RGB';var options=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{};if(colorSpace==='HSV'){return interpolateColorsHSV(value,inputRange,getInterpolateHSV(outputRange),options);}else if(colorSpace==='RGB'){return interpolateColorsRGB(value,inputRange,getInterpolateRGB(outputRange),options);}throw new _errors.ReanimatedError(`Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV'].`);}var ColorSpace=exports.ColorSpace=function(ColorSpace){ColorSpace[ColorSpace[\"RGB\"]=0]=\"RGB\";ColorSpace[ColorSpace[\"HSV\"]=1]=\"HSV\";return ColorSpace;}({});function useInterpolateConfig(inputRange,outputRange){var colorSpace=arguments.length>2&&arguments[2]!==undefined?arguments[2]:ColorSpace.RGB;var options=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};return(0,_useSharedValue.useSharedValue)({inputRange:inputRange,outputRange:outputRange,colorSpace:colorSpace,cache:(0,_core.makeMutable)(null),options:options});}","map":{"version":3,"names":["Object","defineProperty","exports","value","Extrapolate","ColorSpace","interpolateColor","useInterpolateConfig","_Colors","require","_core","_interpolation","_useSharedValue","_errors","Extrapolation","interpolateColorsHSV","inputRange","colors","options","h","_options$useCorrected","useCorrectedHSVInterpolation","correctedInputRange","originalH","correctedH","i","length","d","push","interpolate","CLAMP","s","v","a","hsvToColor","toLinearSpace","x","gamma","map","Math","pow","toGammaSpace","round","interpolateColorsRGB","_options$gamma","outputR","r","outputG","g","outputB","b","rgbaColor","getInterpolateRGB","color","processedColor","processColor","undefined","red","green","blue","opacity","getInterpolateHSV","processedHSVColor","RGBtoHSV","outputRange","colorSpace","arguments","ReanimatedError","RGB","useSharedValue","cache","makeMutable"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-reanimated/src/interpolateColor.ts"],"sourcesContent":["'use strict';\nimport {\n  hsvToColor,\n  RGBtoHSV,\n  rgbaColor,\n  processColor,\n  red,\n  green,\n  blue,\n  opacity,\n} from './Colors';\nimport { makeMutable } from './core';\nimport { Extrapolation, interpolate } from './interpolation';\nimport type { SharedValue } from './commonTypes';\nimport { useSharedValue } from './hook/useSharedValue';\nimport { ReanimatedError } from './errors';\n\n/** @deprecated Please use Extrapolation instead */\nexport const Extrapolate = Extrapolation;\n\n/**\n * Options for color interpolation.\n *\n * @param gamma - Gamma value used in gamma correction. Defaults to `2.2`.\n * @param useCorrectedHSVInterpolation - Whether to reduce the number of colors\n *   the interpolation has to go through. Defaults to `true`.\n */\nexport type InterpolationOptions = {\n  gamma?: number;\n  useCorrectedHSVInterpolation?: boolean;\n};\n\nconst interpolateColorsHSV = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateHSV,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  let h = 0;\n  const { useCorrectedHSVInterpolation = true } = options;\n  if (useCorrectedHSVInterpolation) {\n    // if the difference between hues in a range is > 180 deg\n    // then move the hue at the right end of the range +/- 360 deg\n    // and add the next point in the original place + 0.00001 with original hue\n    // to not break the next range\n    const correctedInputRange = [inputRange[0]];\n    const originalH = colors.h;\n    const correctedH = [originalH[0]];\n\n    for (let i = 1; i < originalH.length; ++i) {\n      const d = originalH[i] - originalH[i - 1];\n      if (originalH[i] > originalH[i - 1] && d > 0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] - 1);\n        correctedH.push(originalH[i]);\n      } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] + 1);\n        correctedH.push(originalH[i]);\n      } else {\n        correctedInputRange.push(inputRange[i]);\n        correctedH.push(originalH[i]);\n      }\n    }\n    h =\n      (interpolate(\n        value,\n        correctedInputRange,\n        correctedH,\n        Extrapolation.CLAMP\n      ) +\n        1) %\n      1;\n  } else {\n    h = interpolate(value, inputRange, colors.h, Extrapolation.CLAMP);\n  }\n  const s = interpolate(value, inputRange, colors.s, Extrapolation.CLAMP);\n  const v = interpolate(value, inputRange, colors.v, Extrapolation.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolation.CLAMP);\n  return hsvToColor(h, s, v, a);\n};\n\nconst toLinearSpace = (x: number[], gamma: number): number[] => {\n  'worklet';\n  return x.map((v) => Math.pow(v / 255, gamma));\n};\n\nconst toGammaSpace = (x: number, gamma: number): number => {\n  'worklet';\n  return Math.round(Math.pow(x, 1 / gamma) * 255);\n};\n\nconst interpolateColorsRGB = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateRGB,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  const { gamma = 2.2 } = options;\n  let { r: outputR, g: outputG, b: outputB } = colors;\n  if (gamma !== 1) {\n    outputR = toLinearSpace(outputR, gamma);\n    outputG = toLinearSpace(outputG, gamma);\n    outputB = toLinearSpace(outputB, gamma);\n  }\n  const r = interpolate(value, inputRange, outputR, Extrapolation.CLAMP);\n  const g = interpolate(value, inputRange, outputG, Extrapolation.CLAMP);\n  const b = interpolate(value, inputRange, outputB, Extrapolation.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolation.CLAMP);\n  if (gamma === 1) {\n    return rgbaColor(r, g, b, a);\n  }\n  return rgbaColor(\n    toGammaSpace(r, gamma),\n    toGammaSpace(g, gamma),\n    toGammaSpace(b, gamma),\n    a\n  );\n};\n\nexport interface InterpolateRGB {\n  r: number[];\n  g: number[];\n  b: number[];\n  a: number[];\n}\n\nconst getInterpolateRGB = (\n  colors: readonly (string | number)[]\n): InterpolateRGB => {\n  'worklet';\n\n  const r = [];\n  const g = [];\n  const b = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color);\n    // explicit check in case if processedColor is 0\n    if (processedColor !== null && processedColor !== undefined) {\n      r.push(red(processedColor));\n      g.push(green(processedColor));\n      b.push(blue(processedColor));\n      a.push(opacity(processedColor));\n    }\n  }\n  return { r, g, b, a };\n};\n\nexport interface InterpolateHSV {\n  h: number[];\n  s: number[];\n  v: number[];\n  a: number[];\n}\n\nconst getInterpolateHSV = (\n  colors: readonly (string | number)[]\n): InterpolateHSV => {\n  'worklet';\n  const h = [];\n  const s = [];\n  const v = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color) as any;\n    if (typeof processedColor === 'number') {\n      const processedHSVColor = RGBtoHSV(\n        red(processedColor),\n        green(processedColor),\n        blue(processedColor)\n      );\n\n      h.push(processedHSVColor.h);\n      s.push(processedHSVColor.s);\n      v.push(processedHSVColor.v);\n      a.push(opacity(processedColor));\n    }\n  }\n  return { h, s, v, a };\n};\n\n/**\n * Lets you map a value from a range of numbers to a range of colors using\n * linear interpolation.\n *\n * @param value - A number from the `input` range that is going to be mapped to\n *   the color in the `output` range.\n * @param inputRange - An array of numbers specifying the input range of the\n *   interpolation.\n * @param outputRange - An array of output colors values (eg. \"red\", \"#00FFCC\",\n *   \"rgba(255, 0, 0, 0.5)\").\n * @param colorSpace - The color space to use for interpolation. Defaults to\n *   'RGB'.\n * @param options - Additional options for interpolation -\n *   {@link InterpolationOptions}.\n * @returns The color after interpolation from within the output range in\n *   rgba(r, g, b, a) format.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/interpolateColor\n */\nexport function interpolateColor(\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly string[],\n  colorSpace?: 'RGB' | 'HSV',\n  options?: InterpolationOptions\n): string;\n\nexport function interpolateColor(\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly number[],\n  colorSpace?: 'RGB' | 'HSV',\n  options?: InterpolationOptions\n): number;\n\nexport function interpolateColor(\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace: 'RGB' | 'HSV' = 'RGB',\n  options: InterpolationOptions = {}\n): string | number {\n  'worklet';\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(\n      value,\n      inputRange,\n      getInterpolateHSV(outputRange),\n      options\n    );\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(\n      value,\n      inputRange,\n      getInterpolateRGB(outputRange),\n      options\n    );\n  }\n  throw new ReanimatedError(\n    `Invalid color space provided: ${\n      colorSpace as string\n    }. Supported values are: ['RGB', 'HSV'].`\n  );\n}\n\nexport enum ColorSpace {\n  RGB = 0,\n  HSV = 1,\n}\n\nexport interface InterpolateConfig {\n  inputRange: readonly number[];\n  outputRange: readonly (string | number)[];\n  colorSpace: ColorSpace;\n  cache: SharedValue<InterpolateRGB | InterpolateHSV | null>;\n  options: InterpolationOptions;\n}\n\nexport function useInterpolateConfig(\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace = ColorSpace.RGB,\n  options: InterpolationOptions = {}\n): SharedValue<InterpolateConfig> {\n  return useSharedValue<InterpolateConfig>({\n    inputRange,\n    outputRange,\n    colorSpace,\n    cache: makeMutable<InterpolateRGB | InterpolateHSV | null>(null),\n    options,\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}