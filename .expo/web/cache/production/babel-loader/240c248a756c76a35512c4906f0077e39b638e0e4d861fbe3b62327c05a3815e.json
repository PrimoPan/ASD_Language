{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.useLinkProps=useLinkProps;var _core=require(\"@react-navigation/core\");var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _LinkingContext=require(\"./LinkingContext.js\");function _getRequireWildcardCache(e){if(\"function\"!=typeof WeakMap)return null;var r=new WeakMap(),t=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r;})(e);}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(\"default\"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n;}var _getStateFromParams=function getStateFromParams(params){if(params!=null&&params.state){return params.state;}if(params!=null&&params.screen){return{routes:[{name:params.screen,params:params.params,state:params.screen?_getStateFromParams(params.params):undefined}]};}return undefined;};function useLinkProps(_ref){var _options$getPathFromS;var screen=_ref.screen,params=_ref.params,href=_ref.href,action=_ref.action;var root=React.useContext(_core.NavigationContainerRefContext);var navigation=React.useContext(_core.NavigationHelpersContext);var _React$useContext=React.useContext(_LinkingContext.LinkingContext),options=_React$useContext.options;var onPress=function onPress(e){var _e$currentTarget;var hasModifierKey=e.metaKey||e.altKey||e.ctrlKey||e.shiftKey;var isLeftClick=e.button==null||e.button===0;var isSelfTarget=[undefined,null,'','self'].includes((_e$currentTarget=e.currentTarget)==null?void 0:_e$currentTarget.target);var shouldHandle=false;if(_reactNative.Platform.OS!=='web'||!e){shouldHandle=true;}else if(!hasModifierKey&&isLeftClick&&isSelfTarget){e.preventDefault();shouldHandle=true;}if(shouldHandle){if(action){if(navigation){navigation.dispatch(action);}else if(root){root.dispatch(action);}else{throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");}}else{navigation==null||navigation.navigate(screen,params);}}};var getPathFromStateHelper=(_options$getPathFromS=options==null?void 0:options.getPathFromState)!=null?_options$getPathFromS:_core.getPathFromState;return{href:href!=null?href:_reactNative.Platform.OS==='web'&&screen!=null?getPathFromStateHelper({routes:[{name:screen,params:params,state:_getStateFromParams(params)}]},options==null?void 0:options.config):undefined,accessibilityRole:'link',onPress:onPress};}","map":{"version":3,"names":["_core","require","React","_interopRequireWildcard","_reactNative","_LinkingContext","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","getStateFromParams","params","state","screen","routes","name","undefined","useLinkProps","_ref","_options$getPathFromS","href","action","root","useContext","NavigationContainerRefContext","navigation","NavigationHelpersContext","_React$useContext","LinkingContext","options","onPress","_e$currentTarget","hasModifierKey","metaKey","altKey","ctrlKey","shiftKey","isLeftClick","button","isSelfTarget","includes","currentTarget","target","shouldHandle","Platform","OS","preventDefault","dispatch","Error","navigate","getPathFromStateHelper","getPathFromState","config","accessibilityRole"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/@react-navigation/native/src/useLinkProps.tsx"],"sourcesContent":["import {\n  getPathFromState,\n  type NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n  type NavigatorScreenParams,\n  type ParamListBase,\n} from '@react-navigation/core';\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { type GestureResponderEvent, Platform } from 'react-native';\n\nimport { LinkingContext } from './LinkingContext';\n\nexport type LinkProps<\n  ParamList extends ReactNavigation.RootParamList,\n  RouteName extends keyof ParamList = keyof ParamList,\n> =\n  | ({\n      href?: string;\n      action?: NavigationAction;\n    } & {\n      [Screen in keyof ParamList]: undefined extends ParamList[Screen]\n        ? { screen: Screen; params?: ParamList[Screen] }\n        : { screen: Screen; params: ParamList[Screen] };\n    }[RouteName])\n  | {\n      href?: string;\n      action: NavigationAction;\n      screen?: undefined;\n      params?: undefined;\n    };\n\nconst getStateFromParams = (\n  params: NavigatorScreenParams<ParamListBase> | undefined\n): PartialState<NavigationState> | NavigationState | undefined => {\n  if (params?.state) {\n    return params.state;\n  }\n\n  if (params?.screen) {\n    return {\n      routes: [\n        {\n          name: params.screen,\n          params: params.params,\n          // @ts-expect-error this is fine ðŸ”¥\n          state: params.screen\n            ? getStateFromParams(\n                params.params as\n                  | NavigatorScreenParams<ParamListBase>\n                  | undefined\n              )\n            : undefined,\n        },\n      ],\n    };\n  }\n\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.screen Name of the screen to navigate to (e.g. `'Feeds'`).\n * @param props.params Params to pass to the screen to navigate to (e.g. `{ sort: 'hot' }`).\n * @param props.href Optional absolute path to use for the href (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport function useLinkProps<ParamList extends ReactNavigation.RootParamList>({\n  screen,\n  params,\n  href,\n  action,\n}: LinkProps<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const { options } = React.useContext(LinkingContext);\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    const hasModifierKey = e.metaKey || e.altKey || e.ctrlKey || e.shiftKey; // ignore clicks with modifier keys\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    const isLeftClick = e.button == null || e.button === 0; // only handle left clicks\n    const isSelfTarget = [undefined, null, '', 'self'].includes(\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      e.currentTarget?.target\n    ); // let browser handle \"target=_blank\" etc.\n\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = true;\n    } else if (!hasModifierKey && isLeftClick && isSelfTarget) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        // @ts-expect-error This is already type-checked by the prop types\n        navigation?.navigate(screen, params);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n\n  return {\n    href:\n      href ??\n      (Platform.OS === 'web' && screen != null\n        ? getPathFromStateHelper(\n            {\n              routes: [\n                {\n                  // @ts-expect-error this is fine ðŸ”¥\n                  name: screen,\n                  // @ts-expect-error this is fine ðŸ”¥\n                  params: params,\n                  // @ts-expect-error this is fine ðŸ”¥\n                  state: getStateFromParams(params),\n                },\n              ],\n            },\n            options?.config\n          )\n        : undefined),\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}