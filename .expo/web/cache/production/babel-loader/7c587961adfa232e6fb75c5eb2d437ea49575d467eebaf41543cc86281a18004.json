{"ast":null,"code":"'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.ProgressTransitionManager=void 0;var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _threads=require(\"../../threads.js\");var _core=require(\"../../core.js\");var _reactNative=require(\"react-native\");var _PlatformChecker=require(\"../../PlatformChecker.js\");var _errors=require(\"../../errors.js\");var IS_ANDROID=_reactNative.Platform.OS==='android';var ProgressTransitionManager=exports.ProgressTransitionManager=function(){function ProgressTransitionManager(){(0,_classCallCheck2.default)(this,ProgressTransitionManager);this._sharedElementCount=0;this._eventHandler={isRegistered:false,onTransitionProgress:-1,onAppear:-1,onDisappear:-1,onSwipeDismiss:-1};}return(0,_createClass2.default)(ProgressTransitionManager,[{key:\"addProgressAnimation\",value:function addProgressAnimation(viewTag,progressAnimation){(0,_threads.runOnUIImmediately)(function(){'worklet';global.ProgressTransitionRegister.addProgressAnimation(viewTag,progressAnimation);})();this.registerEventHandlers();}},{key:\"removeProgressAnimation\",value:function removeProgressAnimation(viewTag){var isUnmounting=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;this.unregisterEventHandlers();(0,_threads.runOnUIImmediately)(function(){'worklet';global.ProgressTransitionRegister.removeProgressAnimation(viewTag,isUnmounting);})();}},{key:\"registerEventHandlers\",value:function registerEventHandlers(){this._sharedElementCount++;var eventHandler=this._eventHandler;if(!eventHandler.isRegistered){eventHandler.isRegistered=true;var eventPrefix=IS_ANDROID?'on':'top';var lastProgressValue=-1;eventHandler.onTransitionProgress=(0,_core.registerEventHandler)(function(event){'worklet';var progress=event.progress;if(progress===lastProgressValue){return;}lastProgressValue=progress;global.ProgressTransitionRegister.frame(progress);},eventPrefix+'TransitionProgress');eventHandler.onAppear=(0,_core.registerEventHandler)(function(){'worklet';global.ProgressTransitionRegister.onTransitionEnd();},eventPrefix+'Appear');if(IS_ANDROID){eventHandler.onDisappear=(0,_core.registerEventHandler)(function(){'worklet';global.ProgressTransitionRegister.onAndroidFinishTransitioning();},'onFinishTransitioning');}else if(_reactNative.Platform.OS==='ios'){eventHandler.onDisappear=(0,_core.registerEventHandler)(function(){'worklet';global.ProgressTransitionRegister.onTransitionEnd(true);},'topDisappear');eventHandler.onSwipeDismiss=(0,_core.registerEventHandler)(function(){'worklet';global.ProgressTransitionRegister.onTransitionEnd();},'topGestureCancel');}}}},{key:\"unregisterEventHandlers\",value:function unregisterEventHandlers(){this._sharedElementCount--;if(this._sharedElementCount===0){var eventHandler=this._eventHandler;eventHandler.isRegistered=false;if(eventHandler.onTransitionProgress!==-1){(0,_core.unregisterEventHandler)(eventHandler.onTransitionProgress);eventHandler.onTransitionProgress=-1;}if(eventHandler.onAppear!==-1){(0,_core.unregisterEventHandler)(eventHandler.onAppear);eventHandler.onAppear=-1;}if(eventHandler.onDisappear!==-1){(0,_core.unregisterEventHandler)(eventHandler.onDisappear);eventHandler.onDisappear=-1;}if(eventHandler.onSwipeDismiss!==-1){(0,_core.unregisterEventHandler)(eventHandler.onSwipeDismiss);eventHandler.onSwipeDismiss=-1;}}}}]);}();function createProgressTransitionRegister(){'worklet';var progressAnimations=new Map();var snapshots=new Map();var currentTransitions=new Set();var toRemove=new Set();var skipCleaning=false;var isTransitionRestart=false;var progressTransitionManager={addProgressAnimation:function addProgressAnimation(viewTag,progressAnimation){if(currentTransitions.size>0&&!progressAnimations.has(viewTag)){isTransitionRestart=!IS_ANDROID;}progressAnimations.set(viewTag,progressAnimation);},removeProgressAnimation:function removeProgressAnimation(viewTag,isUnmounting){if(currentTransitions.size>0){isTransitionRestart=!IS_ANDROID;}if(isUnmounting){toRemove.add(viewTag);}else{progressAnimations.delete(viewTag);}},onTransitionStart:function onTransitionStart(viewTag,snapshot){skipCleaning=isTransitionRestart;snapshots.set(viewTag,snapshot);currentTransitions.add(viewTag);progressTransitionManager.frame(0);},frame:function frame(progress){for(var viewTag of currentTransitions){var progressAnimation=progressAnimations.get(viewTag);if(!progressAnimation){continue;}var snapshot=snapshots.get(viewTag);progressAnimation(viewTag,snapshot,progress);}},onAndroidFinishTransitioning:function onAndroidFinishTransitioning(){if(toRemove.size>0){progressTransitionManager.onTransitionEnd();}},onTransitionEnd:function onTransitionEnd(){var removeViews=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(currentTransitions.size===0){toRemove.clear();return;}if(skipCleaning){skipCleaning=false;isTransitionRestart=false;return;}for(var viewTag of currentTransitions){global._notifyAboutEnd(viewTag,removeViews);}currentTransitions.clear();if(isTransitionRestart){return;}snapshots.clear();if(toRemove.size>0){for(var _viewTag of toRemove){progressAnimations.delete(_viewTag);global._notifyAboutEnd(_viewTag,removeViews);}toRemove.clear();}}};return progressTransitionManager;}if((0,_PlatformChecker.shouldBeUseWeb)()){var maybeThrowError=function maybeThrowError(){if(!(0,_PlatformChecker.isJest)()){throw new _errors.ReanimatedError('`ProgressTransitionRegister` is not available on non-native platform.');}};global.ProgressTransitionRegister=new Proxy({},{get:maybeThrowError,set:function set(){maybeThrowError();return false;}});}else{(0,_threads.runOnUIImmediately)(function(){'worklet';global.ProgressTransitionRegister=createProgressTransitionRegister();})();}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","ProgressTransitionManager","_classCallCheck2","_createClass2","_threads","_core","_reactNative","_PlatformChecker","_errors","IS_ANDROID","Platform","OS","default","_sharedElementCount","_eventHandler","isRegistered","onTransitionProgress","onAppear","onDisappear","onSwipeDismiss","key","addProgressAnimation","viewTag","progressAnimation","runOnUIImmediately","global","ProgressTransitionRegister","registerEventHandlers","removeProgressAnimation","isUnmounting","arguments","length","undefined","unregisterEventHandlers","eventHandler","eventPrefix","lastProgressValue","registerEventHandler","event","progress","frame","onTransitionEnd","onAndroidFinishTransitioning","unregisterEventHandler","createProgressTransitionRegister","progressAnimations","Map","snapshots","currentTransitions","Set","toRemove","skipCleaning","isTransitionRestart","progressTransitionManager","size","has","set","add","delete","onTransitionStart","snapshot","get","removeViews","clear","_notifyAboutEnd","shouldBeUseWeb","maybeThrowError","isJest","ReanimatedError","Proxy"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-reanimated/src/layoutReanimation/sharedTransitions/ProgressTransitionManager.ts"],"sourcesContent":["'use strict';\nimport { runOnUIImmediately } from '../../threads';\nimport type {\n  ProgressAnimation,\n  SharedTransitionAnimationsValues,\n} from '../animationBuilder/commonTypes';\nimport { registerEventHandler, unregisterEventHandler } from '../../core';\nimport { Platform } from 'react-native';\nimport { isJest, shouldBeUseWeb } from '../../PlatformChecker';\nimport { ReanimatedError } from '../../errors';\n\ntype TransitionProgressEvent = {\n  closing: number;\n  goingForward: number;\n  eventName: string;\n  progress: number;\n  target: number;\n};\n\nconst IS_ANDROID = Platform.OS === 'android';\n\nexport class ProgressTransitionManager {\n  private _sharedElementCount = 0;\n  private _eventHandler = {\n    isRegistered: false,\n    onTransitionProgress: -1,\n    onAppear: -1,\n    onDisappear: -1,\n    onSwipeDismiss: -1,\n  };\n\n  public addProgressAnimation(\n    viewTag: number,\n    progressAnimation: ProgressAnimation\n  ) {\n    runOnUIImmediately(() => {\n      'worklet';\n      global.ProgressTransitionRegister.addProgressAnimation(\n        viewTag,\n        progressAnimation\n      );\n    })();\n\n    this.registerEventHandlers();\n  }\n\n  public removeProgressAnimation(viewTag: number, isUnmounting = true) {\n    this.unregisterEventHandlers();\n    runOnUIImmediately(() => {\n      'worklet';\n      global.ProgressTransitionRegister.removeProgressAnimation(\n        viewTag,\n        isUnmounting\n      );\n    })();\n  }\n\n  private registerEventHandlers() {\n    this._sharedElementCount++;\n    const eventHandler = this._eventHandler;\n    if (!eventHandler.isRegistered) {\n      eventHandler.isRegistered = true;\n      const eventPrefix = IS_ANDROID ? 'on' : 'top';\n      let lastProgressValue = -1;\n      eventHandler.onTransitionProgress = registerEventHandler(\n        (event: TransitionProgressEvent) => {\n          'worklet';\n          const progress = event.progress;\n          if (progress === lastProgressValue) {\n            // During screen transition, handler receives two events with the same progress\n            // value for both screens, but for modals, there is only one event. To optimize\n            // performance and avoid unnecessary worklet calls, let's skip the second event.\n            return;\n          }\n          lastProgressValue = progress;\n          global.ProgressTransitionRegister.frame(progress);\n        },\n        eventPrefix + 'TransitionProgress'\n      );\n      eventHandler.onAppear = registerEventHandler(() => {\n        'worklet';\n        global.ProgressTransitionRegister.onTransitionEnd();\n      }, eventPrefix + 'Appear');\n\n      if (IS_ANDROID) {\n        // onFinishTransitioning event is available only on Android and\n        // is used to handle closing modals\n        eventHandler.onDisappear = registerEventHandler(() => {\n          'worklet';\n          global.ProgressTransitionRegister.onAndroidFinishTransitioning();\n        }, 'onFinishTransitioning');\n      } else if (Platform.OS === 'ios') {\n        // topDisappear event is required to handle closing modals on iOS\n        eventHandler.onDisappear = registerEventHandler(() => {\n          'worklet';\n          global.ProgressTransitionRegister.onTransitionEnd(true);\n        }, 'topDisappear');\n        eventHandler.onSwipeDismiss = registerEventHandler(() => {\n          'worklet';\n          global.ProgressTransitionRegister.onTransitionEnd();\n        }, 'topGestureCancel');\n      }\n    }\n  }\n\n  private unregisterEventHandlers(): void {\n    this._sharedElementCount--;\n    if (this._sharedElementCount === 0) {\n      const eventHandler = this._eventHandler;\n      eventHandler.isRegistered = false;\n      if (eventHandler.onTransitionProgress !== -1) {\n        unregisterEventHandler(eventHandler.onTransitionProgress);\n        eventHandler.onTransitionProgress = -1;\n      }\n      if (eventHandler.onAppear !== -1) {\n        unregisterEventHandler(eventHandler.onAppear);\n        eventHandler.onAppear = -1;\n      }\n      if (eventHandler.onDisappear !== -1) {\n        unregisterEventHandler(eventHandler.onDisappear);\n        eventHandler.onDisappear = -1;\n      }\n      if (eventHandler.onSwipeDismiss !== -1) {\n        unregisterEventHandler(eventHandler.onSwipeDismiss);\n        eventHandler.onSwipeDismiss = -1;\n      }\n    }\n  }\n}\n\nfunction createProgressTransitionRegister() {\n  'worklet';\n  const progressAnimations = new Map<number, ProgressAnimation>();\n  const snapshots = new Map<\n    number,\n    Partial<SharedTransitionAnimationsValues>\n  >();\n  const currentTransitions = new Set<number>();\n  const toRemove = new Set<number>();\n\n  let skipCleaning = false;\n  let isTransitionRestart = false;\n\n  const progressTransitionManager = {\n    addProgressAnimation: (\n      viewTag: number,\n      progressAnimation: ProgressAnimation\n    ) => {\n      if (currentTransitions.size > 0 && !progressAnimations.has(viewTag)) {\n        // there is no need to prevent cleaning on android\n        isTransitionRestart = !IS_ANDROID;\n      }\n      progressAnimations.set(viewTag, progressAnimation);\n    },\n    removeProgressAnimation: (viewTag: number, isUnmounting: boolean) => {\n      if (currentTransitions.size > 0) {\n        // there is no need to prevent cleaning on android\n        isTransitionRestart = !IS_ANDROID;\n      }\n      if (isUnmounting) {\n        // Remove the animation config after the transition is finished\n        toRemove.add(viewTag);\n      } else {\n        // if the animation is removed, without ever being started, it can be removed immediately\n        progressAnimations.delete(viewTag);\n      }\n    },\n    onTransitionStart: (\n      viewTag: number,\n      snapshot: Partial<SharedTransitionAnimationsValues>\n    ) => {\n      skipCleaning = isTransitionRestart;\n      snapshots.set(viewTag, snapshot);\n      currentTransitions.add(viewTag);\n      // set initial style for re-parented components\n      progressTransitionManager.frame(0);\n    },\n    frame: (progress: number) => {\n      for (const viewTag of currentTransitions) {\n        const progressAnimation = progressAnimations.get(viewTag);\n        if (!progressAnimation) {\n          continue;\n        }\n        const snapshot = snapshots.get(\n          viewTag\n        )! as SharedTransitionAnimationsValues;\n        progressAnimation(viewTag, snapshot, progress);\n      }\n    },\n    onAndroidFinishTransitioning: () => {\n      if (toRemove.size > 0) {\n        // it should be ran only on modal closing\n        progressTransitionManager.onTransitionEnd();\n      }\n    },\n    onTransitionEnd: (removeViews = false) => {\n      if (currentTransitions.size === 0) {\n        toRemove.clear();\n        return;\n      }\n      if (skipCleaning) {\n        skipCleaning = false;\n        isTransitionRestart = false;\n        return;\n      }\n      for (const viewTag of currentTransitions) {\n        global._notifyAboutEnd(viewTag, removeViews);\n      }\n      currentTransitions.clear();\n      if (isTransitionRestart) {\n        // on transition restart, progressAnimations should be saved\n        // because they potentially can be used in the next transition\n        return;\n      }\n      snapshots.clear();\n      if (toRemove.size > 0) {\n        for (const viewTag of toRemove) {\n          progressAnimations.delete(viewTag);\n          global._notifyAboutEnd(viewTag, removeViews);\n        }\n        toRemove.clear();\n      }\n    },\n  };\n  return progressTransitionManager;\n}\n\nif (shouldBeUseWeb()) {\n  const maybeThrowError = () => {\n    // Jest attempts to access a property of this object to check if it is a Jest mock\n    // so we can't throw an error in the getter.\n    if (!isJest()) {\n      throw new ReanimatedError(\n        '`ProgressTransitionRegister` is not available on non-native platform.'\n      );\n    }\n  };\n  global.ProgressTransitionRegister = new Proxy(\n    {} as ProgressTransitionRegister,\n    {\n      get: maybeThrowError,\n      set: () => {\n        maybeThrowError();\n        return false;\n      },\n    }\n  );\n} else {\n  runOnUIImmediately(() => {\n    'worklet';\n    global.ProgressTransitionRegister = createProgressTransitionRegister();\n  })();\n}\n\nexport type ProgressTransitionRegister = ReturnType<\n  typeof createProgressTransitionRegister\n>;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}