{"ast":null,"code":"'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.useDerivedValue=useDerivedValue;var _toConsumableArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var _react=require(\"react\");var _index=require(\"../animation/index.js\");var _core=require(\"../core.js\");var _PlatformChecker=require(\"../PlatformChecker.js\");function useDerivedValue(updater,dependencies){var _updater$__closure;var initRef=(0,_react.useRef)(null);var inputs=Object.values((_updater$__closure=updater.__closure)!=null?_updater$__closure:{});if((0,_PlatformChecker.shouldBeUseWeb)()){var _dependencies;if(!inputs.length&&(_dependencies=dependencies)!=null&&_dependencies.length){inputs=dependencies;}}if(dependencies===undefined){dependencies=[].concat((0,_toConsumableArray2.default)(inputs),[updater.__workletHash]);}else{dependencies.push(updater.__workletHash);}if(initRef.current===null){initRef.current=(0,_core.makeMutable)((0,_index.initialUpdaterRun)(updater));}var sharedValue=initRef.current;(0,_react.useEffect)(function(){var fun=function fun(){'worklet';sharedValue.value=updater();};var mapperId=(0,_core.startMapper)(fun,inputs,[sharedValue]);return function(){(0,_core.stopMapper)(mapperId);};},dependencies);return sharedValue;}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","useDerivedValue","_toConsumableArray2","_react","_index","_core","_PlatformChecker","updater","dependencies","_updater$__closure","initRef","useRef","inputs","values","__closure","shouldBeUseWeb","_dependencies","length","undefined","concat","default","__workletHash","push","current","makeMutable","initialUpdaterRun","sharedValue","useEffect","fun","mapperId","startMapper","stopMapper"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-reanimated/src/hook/useDerivedValue.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef } from 'react';\nimport { initialUpdaterRun } from '../animation';\nimport type { SharedValue, WorkletFunction } from '../commonTypes';\nimport { makeMutable, startMapper, stopMapper } from '../core';\nimport type { DependencyList } from './commonTypes';\nimport { shouldBeUseWeb } from '../PlatformChecker';\n\nexport interface DerivedValue<Value = unknown>\n  extends Readonly<Omit<SharedValue<Value>, 'set'>> {\n  /**\n   * @deprecated Derived values are readonly, don't use this method. It's here\n   *   only to prevent breaking changes in TypeScript types. It will be removed\n   *   in the future.\n   */\n  set: SharedValue<Value>['set'];\n}\n\n/**\n * Lets you create new shared values based on existing ones while keeping them\n * reactive.\n *\n * @param updater - A function called whenever at least one of the shared values\n *   or state used in the function body changes.\n * @param dependencies - An optional array of dependencies. Only relevant when\n *   using Reanimated without the Babel plugin on the Web.\n * @returns A new readonly shared value based on a value returned from the\n *   updater function\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useDerivedValue\n */\n// @ts-expect-error This overload is required by our API.\nexport function useDerivedValue<Value>(\n  updater: () => Value,\n  dependencies?: DependencyList\n): DerivedValue<Value>;\n\nexport function useDerivedValue<Value>(\n  updater: WorkletFunction<[], Value>,\n  dependencies?: DependencyList\n): DerivedValue<Value> {\n  const initRef = useRef<SharedValue<Value> | null>(null);\n  let inputs = Object.values(updater.__closure ?? {});\n  if (shouldBeUseWeb()) {\n    if (!inputs.length && dependencies?.length) {\n      // let web work without a Babel/SWC plugin\n      inputs = dependencies;\n    }\n  }\n\n  // build dependencies\n  if (dependencies === undefined) {\n    dependencies = [...inputs, updater.__workletHash];\n  } else {\n    dependencies.push(updater.__workletHash);\n  }\n\n  if (initRef.current === null) {\n    initRef.current = makeMutable(initialUpdaterRun(updater));\n  }\n\n  const sharedValue: SharedValue<Value> = initRef.current;\n\n  useEffect(() => {\n    const fun = () => {\n      'worklet';\n      sharedValue.value = updater();\n    };\n    const mapperId = startMapper(fun, inputs, [\n      sharedValue as SharedValue<unknown>,\n    ]);\n    return () => {\n      stopMapper(mapperId);\n    };\n  }, dependencies);\n\n  return sharedValue;\n}\n"],"mappings":"AAAA,YAAY,KAAAA,sBAAA,CAAAC,OAAA,iDAAAC,MAAA,CAAAC,cAAA,CAAAC,OAAA,eAAAC,KAAA,QAAAD,OAAA,CAAAE,eAAA,CAAAA,eAAA,KAAAC,mBAAA,CAAAP,sBAAA,CAAAC,OAAA,8CACZ,IAAAO,MAAA,CAAAP,OAAA,UACA,IAAAQ,MAAA,CAAAR,OAAA,0BAEA,IAAAS,KAAA,CAAAT,OAAA,eAEA,IAAAU,gBAAA,CAAAV,OAAA,0BA8BO,QAAS,CAAAK,eAAeA,CAC7BM,OAAmC,CACnCC,YAA6B,CACR,KAAAC,kBAAA,CACrB,GAAM,CAAAC,OAAO,CAAG,GAAAC,aAAM,EAA4B,IAAI,CAAC,CACvD,GAAI,CAAAC,MAAM,CAAGf,MAAM,CAACgB,MAAM,EAAAJ,kBAAA,CAACF,OAAO,CAACO,SAAS,QAAAL,kBAAA,CAAI,CAAC,CAAC,CAAC,CACnD,GAAI,GAAAM,+BAAc,EAAC,CAAC,CAAE,KAAAC,aAAA,CACpB,GAAI,CAACJ,MAAM,CAACK,MAAM,GAAAD,aAAA,CAAIR,YAAY,SAAZQ,aAAA,CAAcC,MAAM,CAAE,CAE1CL,MAAM,CAAGJ,YAAY,CACvB,CACF,CAGA,GAAIA,YAAY,GAAKU,SAAS,CAAE,CAC9BV,YAAY,IAAAW,MAAA,IAAAjB,mBAAA,CAAAkB,OAAA,EAAOR,MAAM,GAAEL,OAAO,CAACc,aAAa,EAAC,CACnD,CAAC,IAAM,CACLb,YAAY,CAACc,IAAI,CAACf,OAAO,CAACc,aAAa,CAAC,CAC1C,CAEA,GAAIX,OAAO,CAACa,OAAO,GAAK,IAAI,CAAE,CAC5Bb,OAAO,CAACa,OAAO,CAAG,GAAAC,iBAAW,EAAC,GAAAC,wBAAiB,EAAClB,OAAO,CAAC,CAAC,CAC3D,CAEA,GAAM,CAAAmB,WAA+B,CAAGhB,OAAO,CAACa,OAAO,CAEvD,GAAAI,gBAAS,EAAC,UAAM,CACd,GAAM,CAAAC,GAAG,CAAG,QAAN,CAAAA,GAAGA,CAAA,CAAS,CAChB,SAAS,CACTF,WAAW,CAAC1B,KAAK,CAAGO,OAAO,CAAC,CAAC,CAC/B,CAAC,CACD,GAAM,CAAAsB,QAAQ,CAAG,GAAAC,iBAAW,EAACF,GAAG,CAAEhB,MAAM,CAAE,CACxCc,WAAW,CACZ,CAAC,CACF,MAAO,WAAM,CACX,GAAAK,gBAAU,EAACF,QAAQ,CAAC,CACtB,CAAC,CACH,CAAC,CAAErB,YAAY,CAAC,CAEhB,MAAO,CAAAkB,WAAW,CACpB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}