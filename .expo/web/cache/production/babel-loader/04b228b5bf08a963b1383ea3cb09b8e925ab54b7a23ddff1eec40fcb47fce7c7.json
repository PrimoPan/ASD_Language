{"ast":null,"code":"'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});exports.useHandler=useHandler;var _react=require(\"react\");var _PlatformChecker=require(\"../PlatformChecker.js\");var _utils=require(\"./utils.js\");var _shareables=require(\"../shareables.js\");function useHandler(handlers,dependencies){var initRef=(0,_react.useRef)(null);if(initRef.current===null){var _context=(0,_shareables.makeShareable)({});initRef.current={context:_context,savedDependencies:[]};}(0,_react.useEffect)(function(){return function(){initRef.current=null;};},[]);var _initRef$current=initRef.current,context=_initRef$current.context,savedDependencies=_initRef$current.savedDependencies;dependencies=(0,_utils.buildDependencies)(dependencies,handlers);var doDependenciesDiffer=!(0,_utils.areDependenciesEqual)(dependencies,savedDependencies);initRef.current.savedDependencies=dependencies;var useWeb=(0,_PlatformChecker.isWeb)()||(0,_PlatformChecker.isJest)();return{context:context,doDependenciesDiffer:doDependenciesDiffer,useWeb:useWeb};}","map":{"version":3,"names":["Object","defineProperty","exports","value","useHandler","_react","require","_PlatformChecker","_utils","_shareables","handlers","dependencies","initRef","useRef","current","context","makeShareable","savedDependencies","useEffect","_initRef$current","buildDependencies","doDependenciesDiffer","areDependenciesEqual","useWeb","isWeb","isJest"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-reanimated/src/hook/useHandler.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef } from 'react';\nimport type { WorkletFunction } from '../commonTypes';\nimport { isWeb, isJest } from '../PlatformChecker';\nimport type { DependencyList, ReanimatedEvent } from './commonTypes';\nimport { areDependenciesEqual, buildDependencies } from './utils';\nimport { makeShareable } from '../shareables';\n\ninterface GeneralHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n> {\n  (event: ReanimatedEvent<Event>, context: Context): void;\n}\n\ntype GeneralWorkletHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n> = WorkletFunction<[event: ReanimatedEvent<Event>, context: Context]>;\n\ntype GeneralHandlers<\n  Event extends object,\n  Context extends Record<string, unknown>,\n> = Record<string, GeneralHandler<Event, Context> | undefined>;\n\ntype GeneralWorkletHandlers<\n  Event extends object,\n  Context extends Record<string, unknown>,\n> = Record<string, GeneralWorkletHandler<Event, Context> | undefined>;\n\ninterface ContextWithDependencies<Context extends Record<string, unknown>> {\n  context: Context;\n  savedDependencies: DependencyList;\n}\n\nexport interface UseHandlerContext<Context extends Record<string, unknown>> {\n  context: Context;\n  doDependenciesDiffer: boolean;\n  useWeb: boolean;\n}\n\n/**\n * Lets you find out whether the event handler dependencies have changed.\n *\n * @param handlers - An object of event handlers.\n * @param dependencies - An optional array of dependencies.\n * @returns An object containing a boolean indicating whether the dependencies\n *   have changed, and a boolean indicating whether the code is running on the\n *   web.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/useHandler\n */\n// @ts-expect-error This overload is required by our API.\nexport function useHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n>(\n  handlers: GeneralHandlers<Event, Context>,\n  dependencies?: DependencyList\n): UseHandlerContext<Context>;\n\nexport function useHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n>(\n  handlers: GeneralWorkletHandlers<Event, Context>,\n  dependencies?: DependencyList\n): UseHandlerContext<Context> {\n  const initRef = useRef<ContextWithDependencies<Context> | null>(null);\n  if (initRef.current === null) {\n    const context = makeShareable({} as Context);\n    initRef.current = {\n      context,\n      savedDependencies: [],\n    };\n  }\n\n  useEffect(() => {\n    return () => {\n      initRef.current = null;\n    };\n  }, []);\n\n  const { context, savedDependencies } = initRef.current;\n\n  dependencies = buildDependencies(\n    dependencies,\n    handlers as Record<string, WorkletFunction | undefined>\n  );\n\n  const doDependenciesDiffer = !areDependenciesEqual(\n    dependencies,\n    savedDependencies\n  );\n  initRef.current.savedDependencies = dependencies;\n  const useWeb = isWeb() || isJest();\n\n  return { context, doDependenciesDiffer, useWeb };\n}\n"],"mappings":"AAAA,YAAY,CAAAA,MAAA,CAAAC,cAAA,CAAAC,OAAA,eAAAC,KAAA,QAAAD,OAAA,CAAAE,UAAA,CAAAA,UAAA,CACZ,IAAAC,MAAA,CAAAC,OAAA,UAEA,IAAAC,gBAAA,CAAAD,OAAA,0BAEA,IAAAE,MAAA,CAAAF,OAAA,eACA,IAAAG,WAAA,CAAAH,OAAA,qBAsDO,QAAS,CAAAF,UAAUA,CAIxBM,QAAgD,CAChDC,YAA6B,CACD,CAC5B,GAAM,CAAAC,OAAO,CAAG,GAAAC,aAAM,EAA0C,IAAI,CAAC,CACrE,GAAID,OAAO,CAACE,OAAO,GAAK,IAAI,CAAE,CAC5B,GAAM,CAAAC,QAAO,CAAG,GAAAC,yBAAa,EAAC,CAAC,CAAY,CAAC,CAC5CJ,OAAO,CAACE,OAAO,CAAG,CAChBC,OAAO,CAAPA,QAAO,CACPE,iBAAiB,CAAE,EACrB,CAAC,CACH,CAEA,GAAAC,gBAAS,EAAC,UAAM,CACd,MAAO,WAAM,CACXN,OAAO,CAACE,OAAO,CAAG,IAAI,CACxB,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,IAAAK,gBAAA,CAAuCP,OAAO,CAACE,OAAO,CAA9CC,OAAO,CAAAI,gBAAA,CAAPJ,OAAO,CAAEE,iBAAA,CAAAE,gBAAA,CAAAF,iBAAA,CAEjBN,YAAY,CAAG,GAAAS,wBAAiB,EAC9BT,YAAY,CACZD,QACF,CAAC,CAED,GAAM,CAAAW,oBAAoB,CAAG,CAAC,GAAAC,2BAAoB,EAChDX,YAAY,CACZM,iBACF,CAAC,CACDL,OAAO,CAACE,OAAO,CAACG,iBAAiB,CAAGN,YAAY,CAChD,GAAM,CAAAY,MAAM,CAAG,GAAAC,sBAAK,EAAC,CAAC,EAAI,GAAAC,uBAAM,EAAC,CAAC,CAElC,MAAO,CAAEV,OAAO,CAAPA,OAAO,CAAEM,oBAAoB,CAApBA,oBAAoB,CAAEE,MAAA,CAAAA,MAAO,CAAC,CAClD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}