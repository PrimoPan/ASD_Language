{"ast":null,"code":"'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});exports.shareableMappingFlag=exports.shareableMappingCache=void 0;var _PlatformChecker=require(\"./PlatformChecker.js\");var SHOULD_BE_USE_WEB=(0,_PlatformChecker.shouldBeUseWeb)();var shareableMappingFlag=exports.shareableMappingFlag=Symbol('shareable flag');var cache=SHOULD_BE_USE_WEB?null:new WeakMap();var shareableMappingCache=exports.shareableMappingCache=SHOULD_BE_USE_WEB?{set:function set(){},get:function get(){return null;}}:{set:function set(shareable,shareableRef){cache.set(shareable,shareableRef||shareableMappingFlag);},get:cache.get.bind(cache)};","map":{"version":3,"names":["Object","defineProperty","exports","value","shareableMappingFlag","shareableMappingCache","_PlatformChecker","require","SHOULD_BE_USE_WEB","shouldBeUseWeb","Symbol","cache","WeakMap","set","get","shareable","shareableRef","bind"],"sources":["/Users/primopan/WebstormProjects/AsdLanguauge/AsdLanguage/node_modules/react-native-reanimated/src/shareableMappingCache.ts"],"sourcesContent":["'use strict';\nimport { shouldBeUseWeb } from './PlatformChecker';\nimport type { ShareableRef } from './commonTypes';\n\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\n\n/**\n * This symbol is used to represent a mapping from the value to itself.\n *\n * It's used to prevent converting a shareable that's already converted - for\n * example a Shared Value that's in worklet's closure.\n */\nexport const shareableMappingFlag = Symbol('shareable flag');\n\n/*\nDuring a fast refresh, React holds the same instance of a Mutable\n(that's guaranteed by `useRef`) but `shareableCache` gets regenerated and thus\nbecoming empty. This happens when editing the file that contains the definition of this cache.\n\nBecause of it, `makeShareableCloneRecursive` can't find given mapping\nin `shareableCache` for the Mutable and tries to clone it as if it was a regular JS object.\nDuring cloning we use `Object.entries` to iterate over the keys which throws an error on accessing `_value`.\nFor convenience we moved this cache to a separate file so it doesn't scare us with red squiggles.\n*/\n\nconst cache = SHOULD_BE_USE_WEB\n  ? null\n  : new WeakMap<object, ShareableRef | symbol>();\n\nexport const shareableMappingCache = SHOULD_BE_USE_WEB\n  ? {\n      set() {\n        // NOOP\n      },\n      get() {\n        return null;\n      },\n    }\n  : {\n      set(shareable: object, shareableRef?: ShareableRef): void {\n        cache!.set(shareable, shareableRef || shareableMappingFlag);\n      },\n      get: cache!.get.bind(cache),\n    };\n"],"mappings":"AAAA,YAAY,CAAAA,MAAA,CAAAC,cAAA,CAAAC,OAAA,eAAAC,KAAA,QAAAD,OAAA,CAAAE,oBAAA,CAAAF,OAAA,CAAAG,qBAAA,QACZ,IAAAC,gBAAA,CAAAC,OAAA,yBAGA,GAAM,CAAAC,iBAAiB,CAAG,GAAAC,+BAAc,EAAC,CAAC,CAQnC,GAAM,CAAAL,oBAAoB,CAAAF,OAAA,CAAAE,oBAAA,CAAGM,MAAM,CAAC,gBAAgB,CAAC,CAa5D,GAAM,CAAAC,KAAK,CAAGH,iBAAiB,CAC3B,IAAI,CACJ,GAAI,CAAAI,OAAO,CAAgC,CAAC,CAEzC,GAAM,CAAAP,qBAAqB,CAAAH,OAAA,CAAAG,qBAAA,CAAGG,iBAAiB,CAClD,CACEK,GAAG,SAAH,CAAAA,GAAGA,CAAA,CAAG,CACJ,CACD,CACDC,GAAG,SAAH,CAAAA,GAAGA,CAAA,CAAG,CACJ,MAAO,KAAI,CACb,CACF,CAAC,CACD,CACED,GAAG,SAAH,CAAAA,GAAGA,CAACE,SAAiB,CAAEC,YAA2B,CAAQ,CACxDL,KAAK,CAAEE,GAAG,CAACE,SAAS,CAAEC,YAAY,EAAIZ,oBAAoB,CAAC,CAC7D,CAAC,CACDU,GAAG,CAAEH,KAAK,CAAEG,GAAG,CAACG,IAAI,CAACN,KAAK,CAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}